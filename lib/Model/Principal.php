<?php
/**
 * Principal
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * Principal Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Principal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Principal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subject' => 'string',
        'token' => 'string',
        'client_id' => 'string',
        'customer_app_id' => 'string',
        'login_identity_id' => 'string',
        'customization_id' => 'string',
        'mandate_id' => 'string',
        'expires_in' => 'float',
        'payment_attempt_id' => 'string',
        'product_flow' => 'string',
        'scopes' => 'string[]',
        'link_token_request' => '\FinversePhp\Model\LinkTokenRequest',
        'get_mandate_auth_link_request' => '\FinversePhp\Model\GetMandateAuthLinkRequest',
        'currency' => 'string',
        'redirect_uri' => 'string',
        'payment_link_id' => 'string',
        'unique_reference_id' => 'string',
        'payment_method_id' => 'string',
        'tpp_name' => 'string',
        'retry_url' => 'string',
        'onboarding_flow' => 'string',
        'qr_code_text' => 'string',
        'manual_payment_provider' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subject' => null,
        'token' => null,
        'client_id' => null,
        'customer_app_id' => null,
        'login_identity_id' => null,
        'customization_id' => null,
        'mandate_id' => null,
        'expires_in' => null,
        'payment_attempt_id' => null,
        'product_flow' => null,
        'scopes' => null,
        'link_token_request' => null,
        'get_mandate_auth_link_request' => null,
        'currency' => null,
        'redirect_uri' => null,
        'payment_link_id' => null,
        'unique_reference_id' => null,
        'payment_method_id' => null,
        'tpp_name' => null,
        'retry_url' => null,
        'onboarding_flow' => null,
        'qr_code_text' => null,
        'manual_payment_provider' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subject' => false,
        'token' => false,
        'client_id' => false,
        'customer_app_id' => false,
        'login_identity_id' => false,
        'customization_id' => false,
        'mandate_id' => false,
        'expires_in' => false,
        'payment_attempt_id' => false,
        'product_flow' => false,
        'scopes' => false,
        'link_token_request' => false,
        'get_mandate_auth_link_request' => false,
        'currency' => false,
        'redirect_uri' => false,
        'payment_link_id' => false,
        'unique_reference_id' => false,
        'payment_method_id' => false,
        'tpp_name' => false,
        'retry_url' => false,
        'onboarding_flow' => false,
        'qr_code_text' => false,
        'manual_payment_provider' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subject' => 'subject',
        'token' => 'token',
        'client_id' => 'client_id',
        'customer_app_id' => 'customer_app_id',
        'login_identity_id' => 'login_identity_id',
        'customization_id' => 'customization_id',
        'mandate_id' => 'mandate_id',
        'expires_in' => 'expires_in',
        'payment_attempt_id' => 'payment_attempt_id',
        'product_flow' => 'product_flow',
        'scopes' => 'scopes',
        'link_token_request' => 'link_token_request',
        'get_mandate_auth_link_request' => 'get_mandate_auth_link_request',
        'currency' => 'currency',
        'redirect_uri' => 'redirect_uri',
        'payment_link_id' => 'payment_link_id',
        'unique_reference_id' => 'unique_reference_id',
        'payment_method_id' => 'payment_method_id',
        'tpp_name' => 'tpp_name',
        'retry_url' => 'retry_url',
        'onboarding_flow' => 'onboarding_flow',
        'qr_code_text' => 'qr_code_text',
        'manual_payment_provider' => 'manual_payment_provider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subject' => 'setSubject',
        'token' => 'setToken',
        'client_id' => 'setClientId',
        'customer_app_id' => 'setCustomerAppId',
        'login_identity_id' => 'setLoginIdentityId',
        'customization_id' => 'setCustomizationId',
        'mandate_id' => 'setMandateId',
        'expires_in' => 'setExpiresIn',
        'payment_attempt_id' => 'setPaymentAttemptId',
        'product_flow' => 'setProductFlow',
        'scopes' => 'setScopes',
        'link_token_request' => 'setLinkTokenRequest',
        'get_mandate_auth_link_request' => 'setGetMandateAuthLinkRequest',
        'currency' => 'setCurrency',
        'redirect_uri' => 'setRedirectUri',
        'payment_link_id' => 'setPaymentLinkId',
        'unique_reference_id' => 'setUniqueReferenceId',
        'payment_method_id' => 'setPaymentMethodId',
        'tpp_name' => 'setTppName',
        'retry_url' => 'setRetryUrl',
        'onboarding_flow' => 'setOnboardingFlow',
        'qr_code_text' => 'setQrCodeText',
        'manual_payment_provider' => 'setManualPaymentProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subject' => 'getSubject',
        'token' => 'getToken',
        'client_id' => 'getClientId',
        'customer_app_id' => 'getCustomerAppId',
        'login_identity_id' => 'getLoginIdentityId',
        'customization_id' => 'getCustomizationId',
        'mandate_id' => 'getMandateId',
        'expires_in' => 'getExpiresIn',
        'payment_attempt_id' => 'getPaymentAttemptId',
        'product_flow' => 'getProductFlow',
        'scopes' => 'getScopes',
        'link_token_request' => 'getLinkTokenRequest',
        'get_mandate_auth_link_request' => 'getGetMandateAuthLinkRequest',
        'currency' => 'getCurrency',
        'redirect_uri' => 'getRedirectUri',
        'payment_link_id' => 'getPaymentLinkId',
        'unique_reference_id' => 'getUniqueReferenceId',
        'payment_method_id' => 'getPaymentMethodId',
        'tpp_name' => 'getTppName',
        'retry_url' => 'getRetryUrl',
        'onboarding_flow' => 'getOnboardingFlow',
        'qr_code_text' => 'getQrCodeText',
        'manual_payment_provider' => 'getManualPaymentProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('customer_app_id', $data ?? [], null);
        $this->setIfExists('login_identity_id', $data ?? [], null);
        $this->setIfExists('customization_id', $data ?? [], null);
        $this->setIfExists('mandate_id', $data ?? [], null);
        $this->setIfExists('expires_in', $data ?? [], null);
        $this->setIfExists('payment_attempt_id', $data ?? [], null);
        $this->setIfExists('product_flow', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('link_token_request', $data ?? [], null);
        $this->setIfExists('get_mandate_auth_link_request', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('redirect_uri', $data ?? [], null);
        $this->setIfExists('payment_link_id', $data ?? [], null);
        $this->setIfExists('unique_reference_id', $data ?? [], null);
        $this->setIfExists('payment_method_id', $data ?? [], null);
        $this->setIfExists('tpp_name', $data ?? [], null);
        $this->setIfExists('retry_url', $data ?? [], null);
        $this->setIfExists('onboarding_flow', $data ?? [], null);
        $this->setIfExists('qr_code_text', $data ?? [], null);
        $this->setIfExists('manual_payment_provider', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['customer_app_id'] === null) {
            $invalidProperties[] = "'customer_app_id' can't be null";
        }
        if ($this->container['login_identity_id'] === null) {
            $invalidProperties[] = "'login_identity_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets customer_app_id
     *
     * @return string
     */
    public function getCustomerAppId()
    {
        return $this->container['customer_app_id'];
    }

    /**
     * Sets customer_app_id
     *
     * @param string $customer_app_id customer_app_id
     *
     * @return self
     */
    public function setCustomerAppId($customer_app_id)
    {
        if (is_null($customer_app_id)) {
            throw new \InvalidArgumentException('non-nullable customer_app_id cannot be null');
        }
        $this->container['customer_app_id'] = $customer_app_id;

        return $this;
    }

    /**
     * Gets login_identity_id
     *
     * @return string
     */
    public function getLoginIdentityId()
    {
        return $this->container['login_identity_id'];
    }

    /**
     * Sets login_identity_id
     *
     * @param string $login_identity_id login_identity_id
     *
     * @return self
     */
    public function setLoginIdentityId($login_identity_id)
    {
        if (is_null($login_identity_id)) {
            throw new \InvalidArgumentException('non-nullable login_identity_id cannot be null');
        }
        $this->container['login_identity_id'] = $login_identity_id;

        return $this;
    }

    /**
     * Gets customization_id
     *
     * @return string|null
     */
    public function getCustomizationId()
    {
        return $this->container['customization_id'];
    }

    /**
     * Sets customization_id
     *
     * @param string|null $customization_id customization_id
     *
     * @return self
     */
    public function setCustomizationId($customization_id)
    {
        if (is_null($customization_id)) {
            throw new \InvalidArgumentException('non-nullable customization_id cannot be null');
        }
        $this->container['customization_id'] = $customization_id;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string|null
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string|null $mandate_id mandate_id
     *
     * @return self
     */
    public function setMandateId($mandate_id)
    {
        if (is_null($mandate_id)) {
            throw new \InvalidArgumentException('non-nullable mandate_id cannot be null');
        }
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets expires_in
     *
     * @return float|null
     */
    public function getExpiresIn()
    {
        return $this->container['expires_in'];
    }

    /**
     * Sets expires_in
     *
     * @param float|null $expires_in expires_in
     *
     * @return self
     */
    public function setExpiresIn($expires_in)
    {
        if (is_null($expires_in)) {
            throw new \InvalidArgumentException('non-nullable expires_in cannot be null');
        }
        $this->container['expires_in'] = $expires_in;

        return $this;
    }

    /**
     * Gets payment_attempt_id
     *
     * @return string|null
     */
    public function getPaymentAttemptId()
    {
        return $this->container['payment_attempt_id'];
    }

    /**
     * Sets payment_attempt_id
     *
     * @param string|null $payment_attempt_id payment_attempt_id
     *
     * @return self
     */
    public function setPaymentAttemptId($payment_attempt_id)
    {
        if (is_null($payment_attempt_id)) {
            throw new \InvalidArgumentException('non-nullable payment_attempt_id cannot be null');
        }
        $this->container['payment_attempt_id'] = $payment_attempt_id;

        return $this;
    }

    /**
     * Gets product_flow
     *
     * @return string|null
     */
    public function getProductFlow()
    {
        return $this->container['product_flow'];
    }

    /**
     * Sets product_flow
     *
     * @param string|null $product_flow product_flow
     *
     * @return self
     */
    public function setProductFlow($product_flow)
    {
        if (is_null($product_flow)) {
            throw new \InvalidArgumentException('non-nullable product_flow cannot be null');
        }
        $this->container['product_flow'] = $product_flow;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]|null
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[]|null $scopes scopes
     *
     * @return self
     */
    public function setScopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException('non-nullable scopes cannot be null');
        }
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets link_token_request
     *
     * @return \FinversePhp\Model\LinkTokenRequest|null
     */
    public function getLinkTokenRequest()
    {
        return $this->container['link_token_request'];
    }

    /**
     * Sets link_token_request
     *
     * @param \FinversePhp\Model\LinkTokenRequest|null $link_token_request link_token_request
     *
     * @return self
     */
    public function setLinkTokenRequest($link_token_request)
    {
        if (is_null($link_token_request)) {
            throw new \InvalidArgumentException('non-nullable link_token_request cannot be null');
        }
        $this->container['link_token_request'] = $link_token_request;

        return $this;
    }

    /**
     * Gets get_mandate_auth_link_request
     *
     * @return \FinversePhp\Model\GetMandateAuthLinkRequest|null
     */
    public function getGetMandateAuthLinkRequest()
    {
        return $this->container['get_mandate_auth_link_request'];
    }

    /**
     * Sets get_mandate_auth_link_request
     *
     * @param \FinversePhp\Model\GetMandateAuthLinkRequest|null $get_mandate_auth_link_request get_mandate_auth_link_request
     *
     * @return self
     */
    public function setGetMandateAuthLinkRequest($get_mandate_auth_link_request)
    {
        if (is_null($get_mandate_auth_link_request)) {
            throw new \InvalidArgumentException('non-nullable get_mandate_auth_link_request cannot be null');
        }
        $this->container['get_mandate_auth_link_request'] = $get_mandate_auth_link_request;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string|null
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string|null $redirect_uri redirect_uri
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        if (is_null($redirect_uri)) {
            throw new \InvalidArgumentException('non-nullable redirect_uri cannot be null');
        }
        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets payment_link_id
     *
     * @return string|null
     */
    public function getPaymentLinkId()
    {
        return $this->container['payment_link_id'];
    }

    /**
     * Sets payment_link_id
     *
     * @param string|null $payment_link_id payment_link_id
     *
     * @return self
     */
    public function setPaymentLinkId($payment_link_id)
    {
        if (is_null($payment_link_id)) {
            throw new \InvalidArgumentException('non-nullable payment_link_id cannot be null');
        }
        $this->container['payment_link_id'] = $payment_link_id;

        return $this;
    }

    /**
     * Gets unique_reference_id
     *
     * @return string|null
     */
    public function getUniqueReferenceId()
    {
        return $this->container['unique_reference_id'];
    }

    /**
     * Sets unique_reference_id
     *
     * @param string|null $unique_reference_id unique_reference_id
     *
     * @return self
     */
    public function setUniqueReferenceId($unique_reference_id)
    {
        if (is_null($unique_reference_id)) {
            throw new \InvalidArgumentException('non-nullable unique_reference_id cannot be null');
        }
        $this->container['unique_reference_id'] = $unique_reference_id;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {
        if (is_null($payment_method_id)) {
            throw new \InvalidArgumentException('non-nullable payment_method_id cannot be null');
        }
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets tpp_name
     *
     * @return string|null
     */
    public function getTppName()
    {
        return $this->container['tpp_name'];
    }

    /**
     * Sets tpp_name
     *
     * @param string|null $tpp_name tpp_name
     *
     * @return self
     */
    public function setTppName($tpp_name)
    {
        if (is_null($tpp_name)) {
            throw new \InvalidArgumentException('non-nullable tpp_name cannot be null');
        }
        $this->container['tpp_name'] = $tpp_name;

        return $this;
    }

    /**
     * Gets retry_url
     *
     * @return string|null
     */
    public function getRetryUrl()
    {
        return $this->container['retry_url'];
    }

    /**
     * Sets retry_url
     *
     * @param string|null $retry_url retry_url
     *
     * @return self
     */
    public function setRetryUrl($retry_url)
    {
        if (is_null($retry_url)) {
            throw new \InvalidArgumentException('non-nullable retry_url cannot be null');
        }
        $this->container['retry_url'] = $retry_url;

        return $this;
    }

    /**
     * Gets onboarding_flow
     *
     * @return string|null
     */
    public function getOnboardingFlow()
    {
        return $this->container['onboarding_flow'];
    }

    /**
     * Sets onboarding_flow
     *
     * @param string|null $onboarding_flow onboarding_flow
     *
     * @return self
     */
    public function setOnboardingFlow($onboarding_flow)
    {
        if (is_null($onboarding_flow)) {
            throw new \InvalidArgumentException('non-nullable onboarding_flow cannot be null');
        }
        $this->container['onboarding_flow'] = $onboarding_flow;

        return $this;
    }

    /**
     * Gets qr_code_text
     *
     * @return string|null
     */
    public function getQrCodeText()
    {
        return $this->container['qr_code_text'];
    }

    /**
     * Sets qr_code_text
     *
     * @param string|null $qr_code_text The qrCode text to be used to generate the image
     *
     * @return self
     */
    public function setQrCodeText($qr_code_text)
    {
        if (is_null($qr_code_text)) {
            throw new \InvalidArgumentException('non-nullable qr_code_text cannot be null');
        }
        $this->container['qr_code_text'] = $qr_code_text;

        return $this;
    }

    /**
     * Gets manual_payment_provider
     *
     * @return string|null
     */
    public function getManualPaymentProvider()
    {
        return $this->container['manual_payment_provider'];
    }

    /**
     * Sets manual_payment_provider
     *
     * @param string|null $manual_payment_provider manual_payment_provider
     *
     * @return self
     */
    public function setManualPaymentProvider($manual_payment_provider)
    {
        if (is_null($manual_payment_provider)) {
            throw new \InvalidArgumentException('non-nullable manual_payment_provider cannot be null');
        }
        $this->container['manual_payment_provider'] = $manual_payment_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


