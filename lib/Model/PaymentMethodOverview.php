<?php
/**
 * PaymentMethodOverview
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * PaymentMethodOverview Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentMethodOverview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentMethodOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'external_gateway' => 'string',
        'payment_confirmation_speed' => 'string',
        'payment_method_type' => 'string',
        'payment_method_subtype' => 'string',
        'payment_processor' => 'string',
        'live_mode' => 'bool',
        'supported_currencies' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'external_gateway' => null,
        'payment_confirmation_speed' => null,
        'payment_method_type' => null,
        'payment_method_subtype' => null,
        'payment_processor' => null,
        'live_mode' => null,
        'supported_currencies' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'external_gateway' => false,
        'payment_confirmation_speed' => false,
        'payment_method_type' => false,
        'payment_method_subtype' => false,
        'payment_processor' => false,
        'live_mode' => false,
        'supported_currencies' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_gateway' => 'external_gateway',
        'payment_confirmation_speed' => 'payment_confirmation_speed',
        'payment_method_type' => 'payment_method_type',
        'payment_method_subtype' => 'payment_method_subtype',
        'payment_processor' => 'payment_processor',
        'live_mode' => 'live_mode',
        'supported_currencies' => 'supported_currencies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_gateway' => 'setExternalGateway',
        'payment_confirmation_speed' => 'setPaymentConfirmationSpeed',
        'payment_method_type' => 'setPaymentMethodType',
        'payment_method_subtype' => 'setPaymentMethodSubtype',
        'payment_processor' => 'setPaymentProcessor',
        'live_mode' => 'setLiveMode',
        'supported_currencies' => 'setSupportedCurrencies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_gateway' => 'getExternalGateway',
        'payment_confirmation_speed' => 'getPaymentConfirmationSpeed',
        'payment_method_type' => 'getPaymentMethodType',
        'payment_method_subtype' => 'getPaymentMethodSubtype',
        'payment_processor' => 'getPaymentProcessor',
        'live_mode' => 'getLiveMode',
        'supported_currencies' => 'getSupportedCurrencies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('external_gateway', $data ?? [], null);
        $this->setIfExists('payment_confirmation_speed', $data ?? [], null);
        $this->setIfExists('payment_method_type', $data ?? [], null);
        $this->setIfExists('payment_method_subtype', $data ?? [], null);
        $this->setIfExists('payment_processor', $data ?? [], null);
        $this->setIfExists('live_mode', $data ?? [], null);
        $this->setIfExists('supported_currencies', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['live_mode'] === null) {
            $invalidProperties[] = "'live_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_gateway
     *
     * @return string|null
     */
    public function getExternalGateway()
    {
        return $this->container['external_gateway'];
    }

    /**
     * Sets external_gateway
     *
     * @param string|null $external_gateway STRIPE, CYBERSOURCE, UOB, DBS (only shown when payment flows funds via a 3rd party gateway direct to the customer)
     *
     * @return self
     */
    public function setExternalGateway($external_gateway)
    {
        if (is_null($external_gateway)) {
            throw new \InvalidArgumentException('non-nullable external_gateway cannot be null');
        }
        $this->container['external_gateway'] = $external_gateway;

        return $this;
    }

    /**
     * Gets payment_confirmation_speed
     *
     * @return string|null
     */
    public function getPaymentConfirmationSpeed()
    {
        return $this->container['payment_confirmation_speed'];
    }

    /**
     * Sets payment_confirmation_speed
     *
     * @param string|null $payment_confirmation_speed It can be either REALTIME or DELAYED
     *
     * @return self
     */
    public function setPaymentConfirmationSpeed($payment_confirmation_speed)
    {
        if (is_null($payment_confirmation_speed)) {
            throw new \InvalidArgumentException('non-nullable payment_confirmation_speed cannot be null');
        }
        $this->container['payment_confirmation_speed'] = $payment_confirmation_speed;

        return $this;
    }

    /**
     * Gets payment_method_type
     *
     * @return string|null
     */
    public function getPaymentMethodType()
    {
        return $this->container['payment_method_type'];
    }

    /**
     * Sets payment_method_type
     *
     * @param string|null $payment_method_type The payment method type, possible values CARD, MANDATE and MANUAL
     *
     * @return self
     */
    public function setPaymentMethodType($payment_method_type)
    {
        if (is_null($payment_method_type)) {
            throw new \InvalidArgumentException('non-nullable payment_method_type cannot be null');
        }
        $this->container['payment_method_type'] = $payment_method_type;

        return $this;
    }

    /**
     * Gets payment_method_subtype
     *
     * @return string|null
     */
    public function getPaymentMethodSubtype()
    {
        return $this->container['payment_method_subtype'];
    }

    /**
     * Sets payment_method_subtype
     *
     * @param string|null $payment_method_subtype The payment method subtype
     *
     * @return self
     */
    public function setPaymentMethodSubtype($payment_method_subtype)
    {
        if (is_null($payment_method_subtype)) {
            throw new \InvalidArgumentException('non-nullable payment_method_subtype cannot be null');
        }
        $this->container['payment_method_subtype'] = $payment_method_subtype;

        return $this;
    }

    /**
     * Gets payment_processor
     *
     * @return string|null
     */
    public function getPaymentProcessor()
    {
        return $this->container['payment_processor'];
    }

    /**
     * Sets payment_processor
     *
     * @param string|null $payment_processor Only shown if funds flow via Finverse, possible values FINVERSE
     *
     * @return self
     */
    public function setPaymentProcessor($payment_processor)
    {
        if (is_null($payment_processor)) {
            throw new \InvalidArgumentException('non-nullable payment_processor cannot be null');
        }
        $this->container['payment_processor'] = $payment_processor;

        return $this;
    }

    /**
     * Gets live_mode
     *
     * @return bool
     */
    public function getLiveMode()
    {
        return $this->container['live_mode'];
    }

    /**
     * Sets live_mode
     *
     * @param bool $live_mode Whether the payment method can move real money or not
     *
     * @return self
     */
    public function setLiveMode($live_mode)
    {
        if (is_null($live_mode)) {
            throw new \InvalidArgumentException('non-nullable live_mode cannot be null');
        }
        $this->container['live_mode'] = $live_mode;

        return $this;
    }

    /**
     * Gets supported_currencies
     *
     * @return string[]|null
     */
    public function getSupportedCurrencies()
    {
        return $this->container['supported_currencies'];
    }

    /**
     * Sets supported_currencies
     *
     * @param string[]|null $supported_currencies Shows which currencies are supported
     *
     * @return self
     */
    public function setSupportedCurrencies($supported_currencies)
    {
        if (is_null($supported_currencies)) {
            throw new \InvalidArgumentException('non-nullable supported_currencies cannot be null');
        }
        $this->container['supported_currencies'] = $supported_currencies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


