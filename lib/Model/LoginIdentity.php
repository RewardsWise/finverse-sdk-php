<?php
/**
 * LoginIdentity
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * LoginIdentity Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LoginIdentity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoginIdentity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'login_identity_id' => 'string',
        'customer_app_id' => 'string',
        'user_id' => 'string',
        'login_methods_available' => '\FinversePhp\Model\LoginIdentityLoginMethodsAvailable',
        'permissions_grant_date' => '\DateTime',
        'permissions_expiry_date' => '\DateTime',
        'permissions' => 'string[]',
        'billing_details' => '\FinversePhp\Model\LoginIdentityBillingDetails',
        'status' => 'string',
        'status_details' => '\FinversePhp\Model\LoginIdentityStatusDetails',
        'product_status' => '\FinversePhp\Model\AllProductStatus',
        'authentication_status' => '\FinversePhp\Model\ProductStatus',
        'error' => '\FinversePhp\Model\LoginIdentityError',
        'last_success' => '\DateTime',
        'first_success' => '\DateTime',
        'webhook' => 'string',
        'session_status' => 'string',
        'institution_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'linking_attempt_id' => 'string',
        'authentication_id' => 'string',
        'last_session_id' => 'string',
        'refresh' => '\FinversePhp\Model\RefreshData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'login_identity_id' => 'ulid',
        'customer_app_id' => 'ulid',
        'user_id' => null,
        'login_methods_available' => null,
        'permissions_grant_date' => 'date-time',
        'permissions_expiry_date' => 'date-time',
        'permissions' => null,
        'billing_details' => null,
        'status' => null,
        'status_details' => null,
        'product_status' => null,
        'authentication_status' => null,
        'error' => null,
        'last_success' => 'date-time',
        'first_success' => 'date-time',
        'webhook' => 'uri',
        'session_status' => null,
        'institution_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'linking_attempt_id' => null,
        'authentication_id' => null,
        'last_session_id' => 'ulid',
        'refresh' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'login_identity_id' => false,
        'customer_app_id' => false,
        'user_id' => false,
        'login_methods_available' => false,
        'permissions_grant_date' => false,
        'permissions_expiry_date' => false,
        'permissions' => false,
        'billing_details' => false,
        'status' => false,
        'status_details' => false,
        'product_status' => false,
        'authentication_status' => false,
        'error' => false,
        'last_success' => false,
        'first_success' => false,
        'webhook' => false,
        'session_status' => false,
        'institution_id' => false,
        'created_at' => false,
        'updated_at' => false,
        'linking_attempt_id' => false,
        'authentication_id' => false,
        'last_session_id' => false,
        'refresh' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'login_identity_id' => 'login_identity_id',
        'customer_app_id' => 'customer_app_id',
        'user_id' => 'user_id',
        'login_methods_available' => 'login_methods_available',
        'permissions_grant_date' => 'permissions_grant_date',
        'permissions_expiry_date' => 'permissions_expiry_date',
        'permissions' => 'permissions',
        'billing_details' => 'billing_details',
        'status' => 'status',
        'status_details' => 'status_details',
        'product_status' => 'product_status',
        'authentication_status' => 'authentication_status',
        'error' => 'error',
        'last_success' => 'last_success',
        'first_success' => 'first_success',
        'webhook' => 'webhook',
        'session_status' => 'session_status',
        'institution_id' => 'institution_id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'linking_attempt_id' => 'linking_attempt_id',
        'authentication_id' => 'authentication_id',
        'last_session_id' => 'last_session_id',
        'refresh' => 'refresh'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'login_identity_id' => 'setLoginIdentityId',
        'customer_app_id' => 'setCustomerAppId',
        'user_id' => 'setUserId',
        'login_methods_available' => 'setLoginMethodsAvailable',
        'permissions_grant_date' => 'setPermissionsGrantDate',
        'permissions_expiry_date' => 'setPermissionsExpiryDate',
        'permissions' => 'setPermissions',
        'billing_details' => 'setBillingDetails',
        'status' => 'setStatus',
        'status_details' => 'setStatusDetails',
        'product_status' => 'setProductStatus',
        'authentication_status' => 'setAuthenticationStatus',
        'error' => 'setError',
        'last_success' => 'setLastSuccess',
        'first_success' => 'setFirstSuccess',
        'webhook' => 'setWebhook',
        'session_status' => 'setSessionStatus',
        'institution_id' => 'setInstitutionId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'linking_attempt_id' => 'setLinkingAttemptId',
        'authentication_id' => 'setAuthenticationId',
        'last_session_id' => 'setLastSessionId',
        'refresh' => 'setRefresh'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'login_identity_id' => 'getLoginIdentityId',
        'customer_app_id' => 'getCustomerAppId',
        'user_id' => 'getUserId',
        'login_methods_available' => 'getLoginMethodsAvailable',
        'permissions_grant_date' => 'getPermissionsGrantDate',
        'permissions_expiry_date' => 'getPermissionsExpiryDate',
        'permissions' => 'getPermissions',
        'billing_details' => 'getBillingDetails',
        'status' => 'getStatus',
        'status_details' => 'getStatusDetails',
        'product_status' => 'getProductStatus',
        'authentication_status' => 'getAuthenticationStatus',
        'error' => 'getError',
        'last_success' => 'getLastSuccess',
        'first_success' => 'getFirstSuccess',
        'webhook' => 'getWebhook',
        'session_status' => 'getSessionStatus',
        'institution_id' => 'getInstitutionId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'linking_attempt_id' => 'getLinkingAttemptId',
        'authentication_id' => 'getAuthenticationId',
        'last_session_id' => 'getLastSessionId',
        'refresh' => 'getRefresh'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('login_identity_id', $data ?? [], null);
        $this->setIfExists('customer_app_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('login_methods_available', $data ?? [], null);
        $this->setIfExists('permissions_grant_date', $data ?? [], null);
        $this->setIfExists('permissions_expiry_date', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('billing_details', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_details', $data ?? [], null);
        $this->setIfExists('product_status', $data ?? [], null);
        $this->setIfExists('authentication_status', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('last_success', $data ?? [], null);
        $this->setIfExists('first_success', $data ?? [], null);
        $this->setIfExists('webhook', $data ?? [], null);
        $this->setIfExists('session_status', $data ?? [], null);
        $this->setIfExists('institution_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('linking_attempt_id', $data ?? [], null);
        $this->setIfExists('authentication_id', $data ?? [], null);
        $this->setIfExists('last_session_id', $data ?? [], null);
        $this->setIfExists('refresh', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_app_id'] === null) {
            $invalidProperties[] = "'customer_app_id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['institution_id'] === null) {
            $invalidProperties[] = "'institution_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets login_identity_id
     *
     * @return string|null
     */
    public function getLoginIdentityId()
    {
        return $this->container['login_identity_id'];
    }

    /**
     * Sets login_identity_id
     *
     * @param string|null $login_identity_id login_identity_id
     *
     * @return self
     */
    public function setLoginIdentityId($login_identity_id)
    {
        if (is_null($login_identity_id)) {
            throw new \InvalidArgumentException('non-nullable login_identity_id cannot be null');
        }
        $this->container['login_identity_id'] = $login_identity_id;

        return $this;
    }

    /**
     * Gets customer_app_id
     *
     * @return string
     */
    public function getCustomerAppId()
    {
        return $this->container['customer_app_id'];
    }

    /**
     * Sets customer_app_id
     *
     * @param string $customer_app_id customer_app_id
     *
     * @return self
     */
    public function setCustomerAppId($customer_app_id)
    {
        if (is_null($customer_app_id)) {
            throw new \InvalidArgumentException('non-nullable customer_app_id cannot be null');
        }
        $this->container['customer_app_id'] = $customer_app_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets login_methods_available
     *
     * @return \FinversePhp\Model\LoginIdentityLoginMethodsAvailable|null
     */
    public function getLoginMethodsAvailable()
    {
        return $this->container['login_methods_available'];
    }

    /**
     * Sets login_methods_available
     *
     * @param \FinversePhp\Model\LoginIdentityLoginMethodsAvailable|null $login_methods_available login_methods_available
     *
     * @return self
     */
    public function setLoginMethodsAvailable($login_methods_available)
    {
        if (is_null($login_methods_available)) {
            throw new \InvalidArgumentException('non-nullable login_methods_available cannot be null');
        }
        $this->container['login_methods_available'] = $login_methods_available;

        return $this;
    }

    /**
     * Gets permissions_grant_date
     *
     * @return \DateTime|null
     */
    public function getPermissionsGrantDate()
    {
        return $this->container['permissions_grant_date'];
    }

    /**
     * Sets permissions_grant_date
     *
     * @param \DateTime|null $permissions_grant_date permissions_grant_date
     *
     * @return self
     */
    public function setPermissionsGrantDate($permissions_grant_date)
    {
        if (is_null($permissions_grant_date)) {
            throw new \InvalidArgumentException('non-nullable permissions_grant_date cannot be null');
        }
        $this->container['permissions_grant_date'] = $permissions_grant_date;

        return $this;
    }

    /**
     * Gets permissions_expiry_date
     *
     * @return \DateTime|null
     */
    public function getPermissionsExpiryDate()
    {
        return $this->container['permissions_expiry_date'];
    }

    /**
     * Sets permissions_expiry_date
     *
     * @param \DateTime|null $permissions_expiry_date permissions_expiry_date
     *
     * @return self
     */
    public function setPermissionsExpiryDate($permissions_expiry_date)
    {
        if (is_null($permissions_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable permissions_expiry_date cannot be null');
        }
        $this->container['permissions_expiry_date'] = $permissions_expiry_date;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[]|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets billing_details
     *
     * @return \FinversePhp\Model\LoginIdentityBillingDetails|null
     */
    public function getBillingDetails()
    {
        return $this->container['billing_details'];
    }

    /**
     * Sets billing_details
     *
     * @param \FinversePhp\Model\LoginIdentityBillingDetails|null $billing_details billing_details
     *
     * @return self
     */
    public function setBillingDetails($billing_details)
    {
        if (is_null($billing_details)) {
            throw new \InvalidArgumentException('non-nullable billing_details cannot be null');
        }
        $this->container['billing_details'] = $billing_details;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_details
     *
     * @return \FinversePhp\Model\LoginIdentityStatusDetails|null
     */
    public function getStatusDetails()
    {
        return $this->container['status_details'];
    }

    /**
     * Sets status_details
     *
     * @param \FinversePhp\Model\LoginIdentityStatusDetails|null $status_details status_details
     *
     * @return self
     */
    public function setStatusDetails($status_details)
    {
        if (is_null($status_details)) {
            throw new \InvalidArgumentException('non-nullable status_details cannot be null');
        }
        $this->container['status_details'] = $status_details;

        return $this;
    }

    /**
     * Gets product_status
     *
     * @return \FinversePhp\Model\AllProductStatus|null
     */
    public function getProductStatus()
    {
        return $this->container['product_status'];
    }

    /**
     * Sets product_status
     *
     * @param \FinversePhp\Model\AllProductStatus|null $product_status product_status
     *
     * @return self
     */
    public function setProductStatus($product_status)
    {
        if (is_null($product_status)) {
            throw new \InvalidArgumentException('non-nullable product_status cannot be null');
        }
        $this->container['product_status'] = $product_status;

        return $this;
    }

    /**
     * Gets authentication_status
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getAuthenticationStatus()
    {
        return $this->container['authentication_status'];
    }

    /**
     * Sets authentication_status
     *
     * @param \FinversePhp\Model\ProductStatus|null $authentication_status authentication_status
     *
     * @return self
     */
    public function setAuthenticationStatus($authentication_status)
    {
        if (is_null($authentication_status)) {
            throw new \InvalidArgumentException('non-nullable authentication_status cannot be null');
        }
        $this->container['authentication_status'] = $authentication_status;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \FinversePhp\Model\LoginIdentityError|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \FinversePhp\Model\LoginIdentityError|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets last_success
     *
     * @return \DateTime|null
     */
    public function getLastSuccess()
    {
        return $this->container['last_success'];
    }

    /**
     * Sets last_success
     *
     * @param \DateTime|null $last_success last_success
     *
     * @return self
     */
    public function setLastSuccess($last_success)
    {
        if (is_null($last_success)) {
            throw new \InvalidArgumentException('non-nullable last_success cannot be null');
        }
        $this->container['last_success'] = $last_success;

        return $this;
    }

    /**
     * Gets first_success
     *
     * @return \DateTime|null
     */
    public function getFirstSuccess()
    {
        return $this->container['first_success'];
    }

    /**
     * Sets first_success
     *
     * @param \DateTime|null $first_success first_success
     *
     * @return self
     */
    public function setFirstSuccess($first_success)
    {
        if (is_null($first_success)) {
            throw new \InvalidArgumentException('non-nullable first_success cannot be null');
        }
        $this->container['first_success'] = $first_success;

        return $this;
    }

    /**
     * Gets webhook
     *
     * @return string|null
     */
    public function getWebhook()
    {
        return $this->container['webhook'];
    }

    /**
     * Sets webhook
     *
     * @param string|null $webhook webhook
     *
     * @return self
     */
    public function setWebhook($webhook)
    {
        if (is_null($webhook)) {
            throw new \InvalidArgumentException('non-nullable webhook cannot be null');
        }
        $this->container['webhook'] = $webhook;

        return $this;
    }

    /**
     * Gets session_status
     *
     * @return string|null
     */
    public function getSessionStatus()
    {
        return $this->container['session_status'];
    }

    /**
     * Sets session_status
     *
     * @param string|null $session_status session_status
     *
     * @return self
     */
    public function setSessionStatus($session_status)
    {
        if (is_null($session_status)) {
            throw new \InvalidArgumentException('non-nullable session_status cannot be null');
        }
        $this->container['session_status'] = $session_status;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id institution_id
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        if (is_null($institution_id)) {
            throw new \InvalidArgumentException('non-nullable institution_id cannot be null');
        }
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets linking_attempt_id
     *
     * @return string|null
     */
    public function getLinkingAttemptId()
    {
        return $this->container['linking_attempt_id'];
    }

    /**
     * Sets linking_attempt_id
     *
     * @param string|null $linking_attempt_id a login attempt id which is unique per login_identity
     *
     * @return self
     */
    public function setLinkingAttemptId($linking_attempt_id)
    {
        if (is_null($linking_attempt_id)) {
            throw new \InvalidArgumentException('non-nullable linking_attempt_id cannot be null');
        }
        $this->container['linking_attempt_id'] = $linking_attempt_id;

        return $this;
    }

    /**
     * Gets authentication_id
     *
     * @return string|null
     */
    public function getAuthenticationId()
    {
        return $this->container['authentication_id'];
    }

    /**
     * Sets authentication_id
     *
     * @param string|null $authentication_id a successful login attempt id which is unique per login_identity
     *
     * @return self
     */
    public function setAuthenticationId($authentication_id)
    {
        if (is_null($authentication_id)) {
            throw new \InvalidArgumentException('non-nullable authentication_id cannot be null');
        }
        $this->container['authentication_id'] = $authentication_id;

        return $this;
    }

    /**
     * Gets last_session_id
     *
     * @return string|null
     */
    public function getLastSessionId()
    {
        return $this->container['last_session_id'];
    }

    /**
     * Sets last_session_id
     *
     * @param string|null $last_session_id last_session_id
     *
     * @return self
     */
    public function setLastSessionId($last_session_id)
    {
        if (is_null($last_session_id)) {
            throw new \InvalidArgumentException('non-nullable last_session_id cannot be null');
        }
        $this->container['last_session_id'] = $last_session_id;

        return $this;
    }

    /**
     * Gets refresh
     *
     * @return \FinversePhp\Model\RefreshData|null
     */
    public function getRefresh()
    {
        return $this->container['refresh'];
    }

    /**
     * Sets refresh
     *
     * @param \FinversePhp\Model\RefreshData|null $refresh refresh
     *
     * @return self
     */
    public function setRefresh($refresh)
    {
        if (is_null($refresh)) {
            throw new \InvalidArgumentException('non-nullable refresh cannot be null');
        }
        $this->container['refresh'] = $refresh;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


