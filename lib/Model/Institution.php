<?php
/**
 * Institution
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * Institution Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Institution implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Institution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'institution_id' => 'string',
        'countries' => 'string[]',
        'tags' => 'string[]',
        'institution_type' => 'string',
        'products_supported' => 'string[]',
        'parent_institution_name' => 'string',
        'institution_name' => 'string',
        'portal_name' => 'string',
        'user_type' => 'string[]',
        'status' => 'string',
        'status_details' => 'object',
        'login_url' => 'string',
        'login_details' => 'object',
        'login_methods' => '\FinversePhp\Model\LoginMethod[]',
        'payment_info' => '\FinversePhp\Model\PaymentInfo',
        'color' => 'string',
        'updated_at' => '\DateTime',
        'login_actions' => '\FinversePhp\Model\LoginAction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'institution_id' => null,
        'countries' => null,
        'tags' => null,
        'institution_type' => null,
        'products_supported' => null,
        'parent_institution_name' => null,
        'institution_name' => null,
        'portal_name' => null,
        'user_type' => null,
        'status' => null,
        'status_details' => null,
        'login_url' => null,
        'login_details' => null,
        'login_methods' => null,
        'payment_info' => null,
        'color' => null,
        'updated_at' => 'date-time',
        'login_actions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'institution_id' => false,
        'countries' => false,
        'tags' => false,
        'institution_type' => false,
        'products_supported' => false,
        'parent_institution_name' => false,
        'institution_name' => false,
        'portal_name' => false,
        'user_type' => false,
        'status' => false,
        'status_details' => false,
        'login_url' => false,
        'login_details' => false,
        'login_methods' => false,
        'payment_info' => false,
        'color' => false,
        'updated_at' => false,
        'login_actions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'institution_id' => 'institution_id',
        'countries' => 'countries',
        'tags' => 'tags',
        'institution_type' => 'institution_type',
        'products_supported' => 'products_supported',
        'parent_institution_name' => 'parent_institution_name',
        'institution_name' => 'institution_name',
        'portal_name' => 'portal_name',
        'user_type' => 'user_type',
        'status' => 'status',
        'status_details' => 'status_details',
        'login_url' => 'login_url',
        'login_details' => 'login_details',
        'login_methods' => 'login_methods',
        'payment_info' => 'payment_info',
        'color' => 'color',
        'updated_at' => 'updated_at',
        'login_actions' => 'login_actions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'institution_id' => 'setInstitutionId',
        'countries' => 'setCountries',
        'tags' => 'setTags',
        'institution_type' => 'setInstitutionType',
        'products_supported' => 'setProductsSupported',
        'parent_institution_name' => 'setParentInstitutionName',
        'institution_name' => 'setInstitutionName',
        'portal_name' => 'setPortalName',
        'user_type' => 'setUserType',
        'status' => 'setStatus',
        'status_details' => 'setStatusDetails',
        'login_url' => 'setLoginUrl',
        'login_details' => 'setLoginDetails',
        'login_methods' => 'setLoginMethods',
        'payment_info' => 'setPaymentInfo',
        'color' => 'setColor',
        'updated_at' => 'setUpdatedAt',
        'login_actions' => 'setLoginActions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'institution_id' => 'getInstitutionId',
        'countries' => 'getCountries',
        'tags' => 'getTags',
        'institution_type' => 'getInstitutionType',
        'products_supported' => 'getProductsSupported',
        'parent_institution_name' => 'getParentInstitutionName',
        'institution_name' => 'getInstitutionName',
        'portal_name' => 'getPortalName',
        'user_type' => 'getUserType',
        'status' => 'getStatus',
        'status_details' => 'getStatusDetails',
        'login_url' => 'getLoginUrl',
        'login_details' => 'getLoginDetails',
        'login_methods' => 'getLoginMethods',
        'payment_info' => 'getPaymentInfo',
        'color' => 'getColor',
        'updated_at' => 'getUpdatedAt',
        'login_actions' => 'getLoginActions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TAGS_REAL = 'real';
    public const TAGS_TEST = 'test';
    public const INSTITUTION_TYPE_BANK = 'BANK';
    public const INSTITUTION_TYPE_WALLET = 'WALLET';
    public const INSTITUTION_TYPE_TEST = 'TEST';
    public const PRODUCTS_SUPPORTED_ACCOUNTS = 'ACCOUNTS';
    public const PRODUCTS_SUPPORTED_TRANSACTIONS = 'TRANSACTIONS';
    public const PRODUCTS_SUPPORTED_STATEMENTS = 'STATEMENTS';
    public const PRODUCTS_SUPPORTED_ACCOUNT_NUMBERS = 'ACCOUNT_NUMBERS';
    public const PRODUCTS_SUPPORTED_IDENTITY = 'IDENTITY';
    public const PRODUCTS_SUPPORTED_AUTO_DEBIT_SETUP = 'AUTO_DEBIT_SETUP';
    public const PRODUCTS_SUPPORTED_PAYOUTS = 'PAYOUTS';
    public const PRODUCTS_SUPPORTED_PAYMENTS = 'PAYMENTS';
    public const PRODUCTS_SUPPORTED_BALANCE_HISTORY = 'BALANCE_HISTORY';
    public const PRODUCTS_SUPPORTED_HISTORICAL_TRANSACTIONS = 'HISTORICAL_TRANSACTIONS';
    public const PRODUCTS_SUPPORTED_CARD_DETAILS = 'CARD_DETAILS';



    public const USER_TYPE_PERSONAL = 'PERSONAL';
    public const USER_TYPE_INDIVIDUAL = 'INDIVIDUAL';
    public const USER_TYPE_BUSINESS = 'BUSINESS';
    public const STATUS_SUPPORTED = 'SUPPORTED';
    public const STATUS_ALPHA = 'ALPHA';
    public const STATUS_BETA = 'BETA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTagsAllowableValues()
    {
        return [
            self::TAGS_REAL,
            self::TAGS_TEST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInstitutionTypeAllowableValues()
    {
        return [
            self::INSTITUTION_TYPE_BANK,
            self::INSTITUTION_TYPE_WALLET,
            self::INSTITUTION_TYPE_TEST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductsSupportedAllowableValues()
    {
        return [
            self::PRODUCTS_SUPPORTED_ACCOUNTS,
            self::PRODUCTS_SUPPORTED_TRANSACTIONS,
            self::PRODUCTS_SUPPORTED_STATEMENTS,
            self::PRODUCTS_SUPPORTED_ACCOUNT_NUMBERS,
            self::PRODUCTS_SUPPORTED_IDENTITY,
            self::PRODUCTS_SUPPORTED_AUTO_DEBIT_SETUP,
            self::PRODUCTS_SUPPORTED_PAYOUTS,
            self::PRODUCTS_SUPPORTED_PAYMENTS,
            self::PRODUCTS_SUPPORTED_BALANCE_HISTORY,
            self::PRODUCTS_SUPPORTED_HISTORICAL_TRANSACTIONS,
            self::PRODUCTS_SUPPORTED_CARD_DETAILS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserTypeAllowableValues()
    {
        return [
            self::USER_TYPE_PERSONAL,
            self::USER_TYPE_INDIVIDUAL,
            self::USER_TYPE_BUSINESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUPPORTED,
            self::STATUS_ALPHA,
            self::STATUS_BETA,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('institution_id', $data ?? [], null);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('institution_type', $data ?? [], null);
        $this->setIfExists('products_supported', $data ?? [], null);
        $this->setIfExists('parent_institution_name', $data ?? [], null);
        $this->setIfExists('institution_name', $data ?? [], null);
        $this->setIfExists('portal_name', $data ?? [], null);
        $this->setIfExists('user_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_details', $data ?? [], null);
        $this->setIfExists('login_url', $data ?? [], null);
        $this->setIfExists('login_details', $data ?? [], null);
        $this->setIfExists('login_methods', $data ?? [], null);
        $this->setIfExists('payment_info', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('login_actions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['institution_id'] === null) {
            $invalidProperties[] = "'institution_id' can't be null";
        }
        if ($this->container['countries'] === null) {
            $invalidProperties[] = "'countries' can't be null";
        }
        if ($this->container['institution_type'] === null) {
            $invalidProperties[] = "'institution_type' can't be null";
        }
        $allowedValues = $this->getInstitutionTypeAllowableValues();
        if (!is_null($this->container['institution_type']) && !in_array($this->container['institution_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'institution_type', must be one of '%s'",
                $this->container['institution_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['products_supported'] === null) {
            $invalidProperties[] = "'products_supported' can't be null";
        }
        if ($this->container['institution_name'] === null) {
            $invalidProperties[] = "'institution_name' can't be null";
        }
        if ($this->container['user_type'] === null) {
            $invalidProperties[] = "'user_type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['login_details'] === null) {
            $invalidProperties[] = "'login_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id institution_id
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        if (is_null($institution_id)) {
            throw new \InvalidArgumentException('non-nullable institution_id cannot be null');
        }
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[] $countries countries
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $allowedValues = $this->getTagsAllowableValues();
        if (array_diff($tags, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tags', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets institution_type
     *
     * @return string
     */
    public function getInstitutionType()
    {
        return $this->container['institution_type'];
    }

    /**
     * Sets institution_type
     *
     * @param string $institution_type institution_type
     *
     * @return self
     */
    public function setInstitutionType($institution_type)
    {
        if (is_null($institution_type)) {
            throw new \InvalidArgumentException('non-nullable institution_type cannot be null');
        }
        $allowedValues = $this->getInstitutionTypeAllowableValues();
        if (!in_array($institution_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'institution_type', must be one of '%s'",
                    $institution_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['institution_type'] = $institution_type;

        return $this;
    }

    /**
     * Gets products_supported
     *
     * @return string[]
     */
    public function getProductsSupported()
    {
        return $this->container['products_supported'];
    }

    /**
     * Sets products_supported
     *
     * @param string[] $products_supported products_supported
     *
     * @return self
     */
    public function setProductsSupported($products_supported)
    {
        if (is_null($products_supported)) {
            throw new \InvalidArgumentException('non-nullable products_supported cannot be null');
        }
        $allowedValues = $this->getProductsSupportedAllowableValues();
        if (array_diff($products_supported, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'products_supported', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['products_supported'] = $products_supported;

        return $this;
    }

    /**
     * Gets parent_institution_name
     *
     * @return string|null
     */
    public function getParentInstitutionName()
    {
        return $this->container['parent_institution_name'];
    }

    /**
     * Sets parent_institution_name
     *
     * @param string|null $parent_institution_name parent_institution_name
     *
     * @return self
     */
    public function setParentInstitutionName($parent_institution_name)
    {
        if (is_null($parent_institution_name)) {
            throw new \InvalidArgumentException('non-nullable parent_institution_name cannot be null');
        }
        $this->container['parent_institution_name'] = $parent_institution_name;

        return $this;
    }

    /**
     * Gets institution_name
     *
     * @return string
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string $institution_name institution_name
     *
     * @return self
     */
    public function setInstitutionName($institution_name)
    {
        if (is_null($institution_name)) {
            throw new \InvalidArgumentException('non-nullable institution_name cannot be null');
        }
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets portal_name
     *
     * @return string|null
     */
    public function getPortalName()
    {
        return $this->container['portal_name'];
    }

    /**
     * Sets portal_name
     *
     * @param string|null $portal_name portal_name
     *
     * @return self
     */
    public function setPortalName($portal_name)
    {
        if (is_null($portal_name)) {
            throw new \InvalidArgumentException('non-nullable portal_name cannot be null');
        }
        $this->container['portal_name'] = $portal_name;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string[]
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string[] $user_type user_type
     *
     * @return self
     */
    public function setUserType($user_type)
    {
        if (is_null($user_type)) {
            throw new \InvalidArgumentException('non-nullable user_type cannot be null');
        }
        $allowedValues = $this->getUserTypeAllowableValues();
        if (array_diff($user_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_details
     *
     * @return object|null
     */
    public function getStatusDetails()
    {
        return $this->container['status_details'];
    }

    /**
     * Sets status_details
     *
     * @param object|null $status_details status_details
     *
     * @return self
     */
    public function setStatusDetails($status_details)
    {
        if (is_null($status_details)) {
            throw new \InvalidArgumentException('non-nullable status_details cannot be null');
        }
        $this->container['status_details'] = $status_details;

        return $this;
    }

    /**
     * Gets login_url
     *
     * @return string|null
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }

    /**
     * Sets login_url
     *
     * @param string|null $login_url login_url
     *
     * @return self
     */
    public function setLoginUrl($login_url)
    {
        if (is_null($login_url)) {
            throw new \InvalidArgumentException('non-nullable login_url cannot be null');
        }
        $this->container['login_url'] = $login_url;

        return $this;
    }

    /**
     * Gets login_details
     *
     * @return object
     */
    public function getLoginDetails()
    {
        return $this->container['login_details'];
    }

    /**
     * Sets login_details
     *
     * @param object $login_details login_details
     *
     * @return self
     */
    public function setLoginDetails($login_details)
    {
        if (is_null($login_details)) {
            throw new \InvalidArgumentException('non-nullable login_details cannot be null');
        }
        $this->container['login_details'] = $login_details;

        return $this;
    }

    /**
     * Gets login_methods
     *
     * @return \FinversePhp\Model\LoginMethod[]|null
     */
    public function getLoginMethods()
    {
        return $this->container['login_methods'];
    }

    /**
     * Sets login_methods
     *
     * @param \FinversePhp\Model\LoginMethod[]|null $login_methods login_methods
     *
     * @return self
     */
    public function setLoginMethods($login_methods)
    {
        if (is_null($login_methods)) {
            throw new \InvalidArgumentException('non-nullable login_methods cannot be null');
        }
        $this->container['login_methods'] = $login_methods;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \FinversePhp\Model\PaymentInfo|null
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \FinversePhp\Model\PaymentInfo|null $payment_info payment_info
     *
     * @return self
     */
    public function setPaymentInfo($payment_info)
    {
        if (is_null($payment_info)) {
            throw new \InvalidArgumentException('non-nullable payment_info cannot be null');
        }
        $this->container['payment_info'] = $payment_info;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets login_actions
     *
     * @return \FinversePhp\Model\LoginAction[]|null
     */
    public function getLoginActions()
    {
        return $this->container['login_actions'];
    }

    /**
     * Sets login_actions
     *
     * @param \FinversePhp\Model\LoginAction[]|null $login_actions login_actions
     *
     * @return self
     */
    public function setLoginActions($login_actions)
    {
        if (is_null($login_actions)) {
            throw new \InvalidArgumentException('non-nullable login_actions cannot be null');
        }
        $this->container['login_actions'] = $login_actions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


