<?php
/**
 * Account
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Account implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'group_id' => 'string',
        'account_holder_name' => 'string',
        'account_name' => 'string',
        'account_nickname' => 'string',
        'account_sub_type' => 'string',
        'account_number_masked' => 'string',
        'country' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'account_currency' => 'string',
        'balance' => '\FinversePhp\Model\CurrencyAmount',
        'statement_balance' => '\FinversePhp\Model\CurrencyAmount',
        'is_parent' => 'bool',
        'is_closed' => 'bool',
        'is_excluded' => 'bool',
        'account_type' => '\FinversePhp\Model\AccountType',
        'metadata' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'group_id' => null,
        'account_holder_name' => null,
        'account_name' => null,
        'account_nickname' => null,
        'account_sub_type' => null,
        'account_number_masked' => null,
        'country' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'account_currency' => null,
        'balance' => null,
        'statement_balance' => null,
        'is_parent' => null,
        'is_closed' => null,
        'is_excluded' => null,
        'account_type' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'group_id' => false,
        'account_holder_name' => false,
        'account_name' => false,
        'account_nickname' => false,
        'account_sub_type' => false,
        'account_number_masked' => false,
        'country' => false,
        'created_at' => false,
        'updated_at' => false,
        'account_currency' => false,
        'balance' => false,
        'statement_balance' => false,
        'is_parent' => false,
        'is_closed' => false,
        'is_excluded' => false,
        'account_type' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'group_id' => 'group_id',
        'account_holder_name' => 'account_holder_name',
        'account_name' => 'account_name',
        'account_nickname' => 'account_nickname',
        'account_sub_type' => 'account_sub_type',
        'account_number_masked' => 'account_number_masked',
        'country' => 'country',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'account_currency' => 'account_currency',
        'balance' => 'balance',
        'statement_balance' => 'statement_balance',
        'is_parent' => 'is_parent',
        'is_closed' => 'is_closed',
        'is_excluded' => 'is_excluded',
        'account_type' => 'account_type',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'group_id' => 'setGroupId',
        'account_holder_name' => 'setAccountHolderName',
        'account_name' => 'setAccountName',
        'account_nickname' => 'setAccountNickname',
        'account_sub_type' => 'setAccountSubType',
        'account_number_masked' => 'setAccountNumberMasked',
        'country' => 'setCountry',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'account_currency' => 'setAccountCurrency',
        'balance' => 'setBalance',
        'statement_balance' => 'setStatementBalance',
        'is_parent' => 'setIsParent',
        'is_closed' => 'setIsClosed',
        'is_excluded' => 'setIsExcluded',
        'account_type' => 'setAccountType',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'group_id' => 'getGroupId',
        'account_holder_name' => 'getAccountHolderName',
        'account_name' => 'getAccountName',
        'account_nickname' => 'getAccountNickname',
        'account_sub_type' => 'getAccountSubType',
        'account_number_masked' => 'getAccountNumberMasked',
        'country' => 'getCountry',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'account_currency' => 'getAccountCurrency',
        'balance' => 'getBalance',
        'statement_balance' => 'getStatementBalance',
        'is_parent' => 'getIsParent',
        'is_closed' => 'getIsClosed',
        'is_excluded' => 'getIsExcluded',
        'account_type' => 'getAccountType',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('group_id', $data ?? [], null);
        $this->setIfExists('account_holder_name', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('account_nickname', $data ?? [], null);
        $this->setIfExists('account_sub_type', $data ?? [], null);
        $this->setIfExists('account_number_masked', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('account_currency', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('statement_balance', $data ?? [], null);
        $this->setIfExists('is_parent', $data ?? [], null);
        $this->setIfExists('is_closed', $data ?? [], null);
        $this->setIfExists('is_excluded', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['group_id'] === null) {
            $invalidProperties[] = "'group_id' can't be null";
        }
        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ($this->container['is_parent'] === null) {
            $invalidProperties[] = "'is_parent' can't be null";
        }
        if ($this->container['is_closed'] === null) {
            $invalidProperties[] = "'is_closed' can't be null";
        }
        if ($this->container['is_excluded'] === null) {
            $invalidProperties[] = "'is_excluded' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id The SHA3-256 hash of the account number, salted with the loginIdentityId
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        if (is_null($group_id)) {
            throw new \InvalidArgumentException('non-nullable group_id cannot be null');
        }
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets account_holder_name
     *
     * @return string|null
     */
    public function getAccountHolderName()
    {
        return $this->container['account_holder_name'];
    }

    /**
     * Sets account_holder_name
     *
     * @param string|null $account_holder_name account_holder_name
     *
     * @return self
     */
    public function setAccountHolderName($account_holder_name)
    {
        if (is_null($account_holder_name)) {
            throw new \InvalidArgumentException('non-nullable account_holder_name cannot be null');
        }
        $this->container['account_holder_name'] = $account_holder_name;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_nickname
     *
     * @return string|null
     */
    public function getAccountNickname()
    {
        return $this->container['account_nickname'];
    }

    /**
     * Sets account_nickname
     *
     * @param string|null $account_nickname account_nickname
     *
     * @return self
     */
    public function setAccountNickname($account_nickname)
    {
        if (is_null($account_nickname)) {
            throw new \InvalidArgumentException('non-nullable account_nickname cannot be null');
        }
        $this->container['account_nickname'] = $account_nickname;

        return $this;
    }

    /**
     * Gets account_sub_type
     *
     * @return string|null
     */
    public function getAccountSubType()
    {
        return $this->container['account_sub_type'];
    }

    /**
     * Sets account_sub_type
     *
     * @param string|null $account_sub_type account_sub_type
     *
     * @return self
     */
    public function setAccountSubType($account_sub_type)
    {
        if (is_null($account_sub_type)) {
            throw new \InvalidArgumentException('non-nullable account_sub_type cannot be null');
        }
        $this->container['account_sub_type'] = $account_sub_type;

        return $this;
    }

    /**
     * Gets account_number_masked
     *
     * @return string|null
     */
    public function getAccountNumberMasked()
    {
        return $this->container['account_number_masked'];
    }

    /**
     * Sets account_number_masked
     *
     * @param string|null $account_number_masked account_number_masked
     *
     * @return self
     */
    public function setAccountNumberMasked($account_number_masked)
    {
        if (is_null($account_number_masked)) {
            throw new \InvalidArgumentException('non-nullable account_number_masked cannot be null');
        }
        $this->container['account_number_masked'] = $account_number_masked;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets account_currency
     *
     * @return string|null
     */
    public function getAccountCurrency()
    {
        return $this->container['account_currency'];
    }

    /**
     * Sets account_currency
     *
     * @param string|null $account_currency account_currency
     *
     * @return self
     */
    public function setAccountCurrency($account_currency)
    {
        if (is_null($account_currency)) {
            throw new \InvalidArgumentException('non-nullable account_currency cannot be null');
        }
        $this->container['account_currency'] = $account_currency;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets statement_balance
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getStatementBalance()
    {
        return $this->container['statement_balance'];
    }

    /**
     * Sets statement_balance
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $statement_balance statement_balance
     *
     * @return self
     */
    public function setStatementBalance($statement_balance)
    {
        if (is_null($statement_balance)) {
            throw new \InvalidArgumentException('non-nullable statement_balance cannot be null');
        }
        $this->container['statement_balance'] = $statement_balance;

        return $this;
    }

    /**
     * Gets is_parent
     *
     * @return bool
     */
    public function getIsParent()
    {
        return $this->container['is_parent'];
    }

    /**
     * Sets is_parent
     *
     * @param bool $is_parent is_parent
     *
     * @return self
     */
    public function setIsParent($is_parent)
    {
        if (is_null($is_parent)) {
            throw new \InvalidArgumentException('non-nullable is_parent cannot be null');
        }
        $this->container['is_parent'] = $is_parent;

        return $this;
    }

    /**
     * Gets is_closed
     *
     * @return bool
     */
    public function getIsClosed()
    {
        return $this->container['is_closed'];
    }

    /**
     * Sets is_closed
     *
     * @param bool $is_closed is_closed
     *
     * @return self
     */
    public function setIsClosed($is_closed)
    {
        if (is_null($is_closed)) {
            throw new \InvalidArgumentException('non-nullable is_closed cannot be null');
        }
        $this->container['is_closed'] = $is_closed;

        return $this;
    }

    /**
     * Gets is_excluded
     *
     * @return bool
     */
    public function getIsExcluded()
    {
        return $this->container['is_excluded'];
    }

    /**
     * Sets is_excluded
     *
     * @param bool $is_excluded is_excluded
     *
     * @return self
     */
    public function setIsExcluded($is_excluded)
    {
        if (is_null($is_excluded)) {
            throw new \InvalidArgumentException('non-nullable is_excluded cannot be null');
        }
        $this->container['is_excluded'] = $is_excluded;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return \FinversePhp\Model\AccountType|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param \FinversePhp\Model\AccountType|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string> $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


