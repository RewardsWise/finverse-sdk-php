<?php
/**
 * SubmitAuthChecklistRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * SubmitAuthChecklistRequest Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubmitAuthChecklistRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubmitAuthChecklistRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key_id' => 'string',
        'envelope_encryption_key' => 'string',
        'initialization_vector' => 'string',
        'message_authentication_code' => 'string',
        'ciphertext' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key_id' => null,
        'envelope_encryption_key' => null,
        'initialization_vector' => null,
        'message_authentication_code' => null,
        'ciphertext' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key_id' => false,
        'envelope_encryption_key' => false,
        'initialization_vector' => false,
        'message_authentication_code' => false,
        'ciphertext' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key_id' => 'key_id',
        'envelope_encryption_key' => 'envelope_encryption_key',
        'initialization_vector' => 'initialization_vector',
        'message_authentication_code' => 'message_authentication_code',
        'ciphertext' => 'ciphertext'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key_id' => 'setKeyId',
        'envelope_encryption_key' => 'setEnvelopeEncryptionKey',
        'initialization_vector' => 'setInitializationVector',
        'message_authentication_code' => 'setMessageAuthenticationCode',
        'ciphertext' => 'setCiphertext'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key_id' => 'getKeyId',
        'envelope_encryption_key' => 'getEnvelopeEncryptionKey',
        'initialization_vector' => 'getInitializationVector',
        'message_authentication_code' => 'getMessageAuthenticationCode',
        'ciphertext' => 'getCiphertext'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('key_id', $data ?? [], null);
        $this->setIfExists('envelope_encryption_key', $data ?? [], null);
        $this->setIfExists('initialization_vector', $data ?? [], null);
        $this->setIfExists('message_authentication_code', $data ?? [], null);
        $this->setIfExists('ciphertext', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key_id'] === null) {
            $invalidProperties[] = "'key_id' can't be null";
        }
        if ((mb_strlen($this->container['key_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'key_id', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['envelope_encryption_key'] === null) {
            $invalidProperties[] = "'envelope_encryption_key' can't be null";
        }
        if ((mb_strlen($this->container['envelope_encryption_key']) > 1000)) {
            $invalidProperties[] = "invalid value for 'envelope_encryption_key', the character length must be smaller than or equal to 1000.";
        }

        if ($this->container['initialization_vector'] === null) {
            $invalidProperties[] = "'initialization_vector' can't be null";
        }
        if ((mb_strlen($this->container['initialization_vector']) > 100)) {
            $invalidProperties[] = "invalid value for 'initialization_vector', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['message_authentication_code'] === null) {
            $invalidProperties[] = "'message_authentication_code' can't be null";
        }
        if ((mb_strlen($this->container['message_authentication_code']) > 100)) {
            $invalidProperties[] = "invalid value for 'message_authentication_code', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['ciphertext'] === null) {
            $invalidProperties[] = "'ciphertext' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key_id
     *
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param string $key_id The key_id that was used to encrypt the envelope key
     *
     * @return self
     */
    public function setKeyId($key_id)
    {
        if (is_null($key_id)) {
            throw new \InvalidArgumentException('non-nullable key_id cannot be null');
        }
        if ((mb_strlen($key_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $key_id when calling SubmitAuthChecklistRequest., must be smaller than or equal to 100.');
        }

        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets envelope_encryption_key
     *
     * @return string
     */
    public function getEnvelopeEncryptionKey()
    {
        return $this->container['envelope_encryption_key'];
    }

    /**
     * Sets envelope_encryption_key
     *
     * @param string $envelope_encryption_key The encrypted envelope key
     *
     * @return self
     */
    public function setEnvelopeEncryptionKey($envelope_encryption_key)
    {
        if (is_null($envelope_encryption_key)) {
            throw new \InvalidArgumentException('non-nullable envelope_encryption_key cannot be null');
        }
        if ((mb_strlen($envelope_encryption_key) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $envelope_encryption_key when calling SubmitAuthChecklistRequest., must be smaller than or equal to 1000.');
        }

        $this->container['envelope_encryption_key'] = $envelope_encryption_key;

        return $this;
    }

    /**
     * Gets initialization_vector
     *
     * @return string
     */
    public function getInitializationVector()
    {
        return $this->container['initialization_vector'];
    }

    /**
     * Sets initialization_vector
     *
     * @param string $initialization_vector The initialization vector used for enncrypting the payload
     *
     * @return self
     */
    public function setInitializationVector($initialization_vector)
    {
        if (is_null($initialization_vector)) {
            throw new \InvalidArgumentException('non-nullable initialization_vector cannot be null');
        }
        if ((mb_strlen($initialization_vector) > 100)) {
            throw new \InvalidArgumentException('invalid length for $initialization_vector when calling SubmitAuthChecklistRequest., must be smaller than or equal to 100.');
        }

        $this->container['initialization_vector'] = $initialization_vector;

        return $this;
    }

    /**
     * Gets message_authentication_code
     *
     * @return string
     */
    public function getMessageAuthenticationCode()
    {
        return $this->container['message_authentication_code'];
    }

    /**
     * Sets message_authentication_code
     *
     * @param string $message_authentication_code The authentication code is used to authenticate the origin of the message
     *
     * @return self
     */
    public function setMessageAuthenticationCode($message_authentication_code)
    {
        if (is_null($message_authentication_code)) {
            throw new \InvalidArgumentException('non-nullable message_authentication_code cannot be null');
        }
        if ((mb_strlen($message_authentication_code) > 100)) {
            throw new \InvalidArgumentException('invalid length for $message_authentication_code when calling SubmitAuthChecklistRequest., must be smaller than or equal to 100.');
        }

        $this->container['message_authentication_code'] = $message_authentication_code;

        return $this;
    }

    /**
     * Gets ciphertext
     *
     * @return string
     */
    public function getCiphertext()
    {
        return $this->container['ciphertext'];
    }

    /**
     * Sets ciphertext
     *
     * @param string $ciphertext The encrypted payload that contains auth checklist items
     *
     * @return self
     */
    public function setCiphertext($ciphertext)
    {
        if (is_null($ciphertext)) {
            throw new \InvalidArgumentException('non-nullable ciphertext cannot be null');
        }
        $this->container['ciphertext'] = $ciphertext;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


