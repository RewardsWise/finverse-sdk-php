<?php
/**
 * AllProductStatus
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * AllProductStatus Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AllProductStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AllProductStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounts' => '\FinversePhp\Model\ProductStatus',
        'online_transactions' => '\FinversePhp\Model\ProductStatus',
        'statements' => '\FinversePhp\Model\ProductStatus',
        'historical_transactions' => '\FinversePhp\Model\ProductStatus',
        'account_numbers' => '\FinversePhp\Model\ProductStatus',
        'identity' => '\FinversePhp\Model\ProductStatus',
        'balance_history' => '\FinversePhp\Model\ProductStatus',
        'payments' => '\FinversePhp\Model\ProductStatus',
        'income_estimation' => '\FinversePhp\Model\ProductStatus',
        'card_details' => '\FinversePhp\Model\ProductStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounts' => null,
        'online_transactions' => null,
        'statements' => null,
        'historical_transactions' => null,
        'account_numbers' => null,
        'identity' => null,
        'balance_history' => null,
        'payments' => null,
        'income_estimation' => null,
        'card_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accounts' => false,
        'online_transactions' => false,
        'statements' => false,
        'historical_transactions' => false,
        'account_numbers' => false,
        'identity' => false,
        'balance_history' => false,
        'payments' => false,
        'income_estimation' => false,
        'card_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'online_transactions' => 'online_transactions',
        'statements' => 'statements',
        'historical_transactions' => 'historical_transactions',
        'account_numbers' => 'account_numbers',
        'identity' => 'identity',
        'balance_history' => 'balance_history',
        'payments' => 'payments',
        'income_estimation' => 'income_estimation',
        'card_details' => 'card_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'online_transactions' => 'setOnlineTransactions',
        'statements' => 'setStatements',
        'historical_transactions' => 'setHistoricalTransactions',
        'account_numbers' => 'setAccountNumbers',
        'identity' => 'setIdentity',
        'balance_history' => 'setBalanceHistory',
        'payments' => 'setPayments',
        'income_estimation' => 'setIncomeEstimation',
        'card_details' => 'setCardDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'online_transactions' => 'getOnlineTransactions',
        'statements' => 'getStatements',
        'historical_transactions' => 'getHistoricalTransactions',
        'account_numbers' => 'getAccountNumbers',
        'identity' => 'getIdentity',
        'balance_history' => 'getBalanceHistory',
        'payments' => 'getPayments',
        'income_estimation' => 'getIncomeEstimation',
        'card_details' => 'getCardDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('online_transactions', $data ?? [], null);
        $this->setIfExists('statements', $data ?? [], null);
        $this->setIfExists('historical_transactions', $data ?? [], null);
        $this->setIfExists('account_numbers', $data ?? [], null);
        $this->setIfExists('identity', $data ?? [], null);
        $this->setIfExists('balance_history', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('income_estimation', $data ?? [], null);
        $this->setIfExists('card_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \FinversePhp\Model\ProductStatus|null $accounts accounts
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets online_transactions
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getOnlineTransactions()
    {
        return $this->container['online_transactions'];
    }

    /**
     * Sets online_transactions
     *
     * @param \FinversePhp\Model\ProductStatus|null $online_transactions online_transactions
     *
     * @return self
     */
    public function setOnlineTransactions($online_transactions)
    {
        if (is_null($online_transactions)) {
            throw new \InvalidArgumentException('non-nullable online_transactions cannot be null');
        }
        $this->container['online_transactions'] = $online_transactions;

        return $this;
    }

    /**
     * Gets statements
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getStatements()
    {
        return $this->container['statements'];
    }

    /**
     * Sets statements
     *
     * @param \FinversePhp\Model\ProductStatus|null $statements statements
     *
     * @return self
     */
    public function setStatements($statements)
    {
        if (is_null($statements)) {
            throw new \InvalidArgumentException('non-nullable statements cannot be null');
        }
        $this->container['statements'] = $statements;

        return $this;
    }

    /**
     * Gets historical_transactions
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getHistoricalTransactions()
    {
        return $this->container['historical_transactions'];
    }

    /**
     * Sets historical_transactions
     *
     * @param \FinversePhp\Model\ProductStatus|null $historical_transactions historical_transactions
     *
     * @return self
     */
    public function setHistoricalTransactions($historical_transactions)
    {
        if (is_null($historical_transactions)) {
            throw new \InvalidArgumentException('non-nullable historical_transactions cannot be null');
        }
        $this->container['historical_transactions'] = $historical_transactions;

        return $this;
    }

    /**
     * Gets account_numbers
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getAccountNumbers()
    {
        return $this->container['account_numbers'];
    }

    /**
     * Sets account_numbers
     *
     * @param \FinversePhp\Model\ProductStatus|null $account_numbers account_numbers
     *
     * @return self
     */
    public function setAccountNumbers($account_numbers)
    {
        if (is_null($account_numbers)) {
            throw new \InvalidArgumentException('non-nullable account_numbers cannot be null');
        }
        $this->container['account_numbers'] = $account_numbers;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param \FinversePhp\Model\ProductStatus|null $identity identity
     *
     * @return self
     */
    public function setIdentity($identity)
    {
        if (is_null($identity)) {
            throw new \InvalidArgumentException('non-nullable identity cannot be null');
        }
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets balance_history
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getBalanceHistory()
    {
        return $this->container['balance_history'];
    }

    /**
     * Sets balance_history
     *
     * @param \FinversePhp\Model\ProductStatus|null $balance_history balance_history
     *
     * @return self
     */
    public function setBalanceHistory($balance_history)
    {
        if (is_null($balance_history)) {
            throw new \InvalidArgumentException('non-nullable balance_history cannot be null');
        }
        $this->container['balance_history'] = $balance_history;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \FinversePhp\Model\ProductStatus|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets income_estimation
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getIncomeEstimation()
    {
        return $this->container['income_estimation'];
    }

    /**
     * Sets income_estimation
     *
     * @param \FinversePhp\Model\ProductStatus|null $income_estimation income_estimation
     *
     * @return self
     */
    public function setIncomeEstimation($income_estimation)
    {
        if (is_null($income_estimation)) {
            throw new \InvalidArgumentException('non-nullable income_estimation cannot be null');
        }
        $this->container['income_estimation'] = $income_estimation;

        return $this;
    }

    /**
     * Gets card_details
     *
     * @return \FinversePhp\Model\ProductStatus|null
     */
    public function getCardDetails()
    {
        return $this->container['card_details'];
    }

    /**
     * Sets card_details
     *
     * @param \FinversePhp\Model\ProductStatus|null $card_details card_details
     *
     * @return self
     */
    public function setCardDetails($card_details)
    {
        if (is_null($card_details)) {
            throw new \InvalidArgumentException('non-nullable card_details cannot be null');
        }
        $this->container['card_details'] = $card_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


