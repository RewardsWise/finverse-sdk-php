<?php
/**
 * CardAccount
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * CardAccount Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'account_name' => 'string',
        'account_number_masked' => 'string',
        'account_type' => '\FinversePhp\Model\AccountType',
        'statement_payment_due_date' => 'string',
        'next_payment_due_date' => 'string',
        'statement_date' => 'string',
        'last_payment_date' => 'string',
        'last_payment_amount' => '\FinversePhp\Model\CurrencyAmount',
        'current_balance' => '\FinversePhp\Model\CurrencyAmount',
        'payment_due_amount' => '\FinversePhp\Model\CurrencyAmount',
        'statement_due_amount' => '\FinversePhp\Model\CurrencyAmount',
        'total_credit_limit' => '\FinversePhp\Model\CurrencyAmount',
        'available_credit_limit' => '\FinversePhp\Model\CurrencyAmount',
        'minimum_payment_due' => '\FinversePhp\Model\CurrencyAmount',
        'rewards_balances' => '\FinversePhp\Model\GenericAmount[]',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'account_name' => null,
        'account_number_masked' => null,
        'account_type' => null,
        'statement_payment_due_date' => null,
        'next_payment_due_date' => null,
        'statement_date' => null,
        'last_payment_date' => null,
        'last_payment_amount' => null,
        'current_balance' => null,
        'payment_due_amount' => null,
        'statement_due_amount' => null,
        'total_credit_limit' => null,
        'available_credit_limit' => null,
        'minimum_payment_due' => null,
        'rewards_balances' => null,
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'account_name' => false,
        'account_number_masked' => false,
        'account_type' => false,
        'statement_payment_due_date' => false,
        'next_payment_due_date' => false,
        'statement_date' => false,
        'last_payment_date' => false,
        'last_payment_amount' => false,
        'current_balance' => false,
        'payment_due_amount' => false,
        'statement_due_amount' => false,
        'total_credit_limit' => false,
        'available_credit_limit' => false,
        'minimum_payment_due' => false,
        'rewards_balances' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'account_name' => 'account_name',
        'account_number_masked' => 'account_number_masked',
        'account_type' => 'account_type',
        'statement_payment_due_date' => 'statement_payment_due_date',
        'next_payment_due_date' => 'next_payment_due_date',
        'statement_date' => 'statement_date',
        'last_payment_date' => 'last_payment_date',
        'last_payment_amount' => 'last_payment_amount',
        'current_balance' => 'current_balance',
        'payment_due_amount' => 'payment_due_amount',
        'statement_due_amount' => 'statement_due_amount',
        'total_credit_limit' => 'total_credit_limit',
        'available_credit_limit' => 'available_credit_limit',
        'minimum_payment_due' => 'minimum_payment_due',
        'rewards_balances' => 'rewards_balances',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_name' => 'setAccountName',
        'account_number_masked' => 'setAccountNumberMasked',
        'account_type' => 'setAccountType',
        'statement_payment_due_date' => 'setStatementPaymentDueDate',
        'next_payment_due_date' => 'setNextPaymentDueDate',
        'statement_date' => 'setStatementDate',
        'last_payment_date' => 'setLastPaymentDate',
        'last_payment_amount' => 'setLastPaymentAmount',
        'current_balance' => 'setCurrentBalance',
        'payment_due_amount' => 'setPaymentDueAmount',
        'statement_due_amount' => 'setStatementDueAmount',
        'total_credit_limit' => 'setTotalCreditLimit',
        'available_credit_limit' => 'setAvailableCreditLimit',
        'minimum_payment_due' => 'setMinimumPaymentDue',
        'rewards_balances' => 'setRewardsBalances',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_name' => 'getAccountName',
        'account_number_masked' => 'getAccountNumberMasked',
        'account_type' => 'getAccountType',
        'statement_payment_due_date' => 'getStatementPaymentDueDate',
        'next_payment_due_date' => 'getNextPaymentDueDate',
        'statement_date' => 'getStatementDate',
        'last_payment_date' => 'getLastPaymentDate',
        'last_payment_amount' => 'getLastPaymentAmount',
        'current_balance' => 'getCurrentBalance',
        'payment_due_amount' => 'getPaymentDueAmount',
        'statement_due_amount' => 'getStatementDueAmount',
        'total_credit_limit' => 'getTotalCreditLimit',
        'available_credit_limit' => 'getAvailableCreditLimit',
        'minimum_payment_due' => 'getMinimumPaymentDue',
        'rewards_balances' => 'getRewardsBalances',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('account_number_masked', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('statement_payment_due_date', $data ?? [], null);
        $this->setIfExists('next_payment_due_date', $data ?? [], null);
        $this->setIfExists('statement_date', $data ?? [], null);
        $this->setIfExists('last_payment_date', $data ?? [], null);
        $this->setIfExists('last_payment_amount', $data ?? [], null);
        $this->setIfExists('current_balance', $data ?? [], null);
        $this->setIfExists('payment_due_amount', $data ?? [], null);
        $this->setIfExists('statement_due_amount', $data ?? [], null);
        $this->setIfExists('total_credit_limit', $data ?? [], null);
        $this->setIfExists('available_credit_limit', $data ?? [], null);
        $this->setIfExists('minimum_payment_due', $data ?? [], null);
        $this->setIfExists('rewards_balances', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id Account this card is associated with
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_number_masked
     *
     * @return string|null
     */
    public function getAccountNumberMasked()
    {
        return $this->container['account_number_masked'];
    }

    /**
     * Sets account_number_masked
     *
     * @param string|null $account_number_masked Masked Account number of the card account
     *
     * @return self
     */
    public function setAccountNumberMasked($account_number_masked)
    {
        if (is_null($account_number_masked)) {
            throw new \InvalidArgumentException('non-nullable account_number_masked cannot be null');
        }
        $this->container['account_number_masked'] = $account_number_masked;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return \FinversePhp\Model\AccountType|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param \FinversePhp\Model\AccountType|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets statement_payment_due_date
     *
     * @return string|null
     */
    public function getStatementPaymentDueDate()
    {
        return $this->container['statement_payment_due_date'];
    }

    /**
     * Sets statement_payment_due_date
     *
     * @param string|null $statement_payment_due_date The statement payment due date
     *
     * @return self
     */
    public function setStatementPaymentDueDate($statement_payment_due_date)
    {
        if (is_null($statement_payment_due_date)) {
            throw new \InvalidArgumentException('non-nullable statement_payment_due_date cannot be null');
        }
        $this->container['statement_payment_due_date'] = $statement_payment_due_date;

        return $this;
    }

    /**
     * Gets next_payment_due_date
     *
     * @return string|null
     */
    public function getNextPaymentDueDate()
    {
        return $this->container['next_payment_due_date'];
    }

    /**
     * Sets next_payment_due_date
     *
     * @param string|null $next_payment_due_date The next payment due date
     *
     * @return self
     */
    public function setNextPaymentDueDate($next_payment_due_date)
    {
        if (is_null($next_payment_due_date)) {
            throw new \InvalidArgumentException('non-nullable next_payment_due_date cannot be null');
        }
        $this->container['next_payment_due_date'] = $next_payment_due_date;

        return $this;
    }

    /**
     * Gets statement_date
     *
     * @return string|null
     */
    public function getStatementDate()
    {
        return $this->container['statement_date'];
    }

    /**
     * Sets statement_date
     *
     * @param string|null $statement_date The statement date
     *
     * @return self
     */
    public function setStatementDate($statement_date)
    {
        if (is_null($statement_date)) {
            throw new \InvalidArgumentException('non-nullable statement_date cannot be null');
        }
        $this->container['statement_date'] = $statement_date;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return string|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param string|null $last_payment_date The date of the last payment
     *
     * @return self
     */
    public function setLastPaymentDate($last_payment_date)
    {
        if (is_null($last_payment_date)) {
            throw new \InvalidArgumentException('non-nullable last_payment_date cannot be null');
        }
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $last_payment_amount last_payment_amount
     *
     * @return self
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        if (is_null($last_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable last_payment_amount cannot be null');
        }
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $current_balance current_balance
     *
     * @return self
     */
    public function setCurrentBalance($current_balance)
    {
        if (is_null($current_balance)) {
            throw new \InvalidArgumentException('non-nullable current_balance cannot be null');
        }
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets payment_due_amount
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getPaymentDueAmount()
    {
        return $this->container['payment_due_amount'];
    }

    /**
     * Sets payment_due_amount
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $payment_due_amount payment_due_amount
     *
     * @return self
     */
    public function setPaymentDueAmount($payment_due_amount)
    {
        if (is_null($payment_due_amount)) {
            throw new \InvalidArgumentException('non-nullable payment_due_amount cannot be null');
        }
        $this->container['payment_due_amount'] = $payment_due_amount;

        return $this;
    }

    /**
     * Gets statement_due_amount
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getStatementDueAmount()
    {
        return $this->container['statement_due_amount'];
    }

    /**
     * Sets statement_due_amount
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $statement_due_amount statement_due_amount
     *
     * @return self
     */
    public function setStatementDueAmount($statement_due_amount)
    {
        if (is_null($statement_due_amount)) {
            throw new \InvalidArgumentException('non-nullable statement_due_amount cannot be null');
        }
        $this->container['statement_due_amount'] = $statement_due_amount;

        return $this;
    }

    /**
     * Gets total_credit_limit
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getTotalCreditLimit()
    {
        return $this->container['total_credit_limit'];
    }

    /**
     * Sets total_credit_limit
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $total_credit_limit total_credit_limit
     *
     * @return self
     */
    public function setTotalCreditLimit($total_credit_limit)
    {
        if (is_null($total_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable total_credit_limit cannot be null');
        }
        $this->container['total_credit_limit'] = $total_credit_limit;

        return $this;
    }

    /**
     * Gets available_credit_limit
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getAvailableCreditLimit()
    {
        return $this->container['available_credit_limit'];
    }

    /**
     * Sets available_credit_limit
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $available_credit_limit available_credit_limit
     *
     * @return self
     */
    public function setAvailableCreditLimit($available_credit_limit)
    {
        if (is_null($available_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable available_credit_limit cannot be null');
        }
        $this->container['available_credit_limit'] = $available_credit_limit;

        return $this;
    }

    /**
     * Gets minimum_payment_due
     *
     * @return \FinversePhp\Model\CurrencyAmount|null
     */
    public function getMinimumPaymentDue()
    {
        return $this->container['minimum_payment_due'];
    }

    /**
     * Sets minimum_payment_due
     *
     * @param \FinversePhp\Model\CurrencyAmount|null $minimum_payment_due minimum_payment_due
     *
     * @return self
     */
    public function setMinimumPaymentDue($minimum_payment_due)
    {
        if (is_null($minimum_payment_due)) {
            throw new \InvalidArgumentException('non-nullable minimum_payment_due cannot be null');
        }
        $this->container['minimum_payment_due'] = $minimum_payment_due;

        return $this;
    }

    /**
     * Gets rewards_balances
     *
     * @return \FinversePhp\Model\GenericAmount[]|null
     */
    public function getRewardsBalances()
    {
        return $this->container['rewards_balances'];
    }

    /**
     * Sets rewards_balances
     *
     * @param \FinversePhp\Model\GenericAmount[]|null $rewards_balances rewards_balances
     *
     * @return self
     */
    public function setRewardsBalances($rewards_balances)
    {
        if (is_null($rewards_balances)) {
            throw new \InvalidArgumentException('non-nullable rewards_balances cannot be null');
        }
        $this->container['rewards_balances'] = $rewards_balances;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


