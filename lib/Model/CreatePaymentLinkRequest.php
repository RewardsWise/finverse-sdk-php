<?php
/**
 * CreatePaymentLinkRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * CreatePaymentLinkRequest Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreatePaymentLinkRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreatePaymentLinkRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'int',
        'currency' => 'string',
        'link_customizations' => '\FinversePhp\Model\PaymentLinkCustomizations',
        'mode' => 'string',
        'payment_details' => '\FinversePhp\Model\PaymentLinkDetails',
        'sender' => '\FinversePhp\Model\PaymentLinkSender',
        'unique_reference_id' => 'string',
        'payment_setup_options' => '\FinversePhp\Model\PaymentSetupOptions',
        'metadata' => 'array<string,string>',
        'payment_metadata' => 'array<string,string>',
        'integration_metadata' => '\FinversePhp\Model\IntegrationMetadataRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'currency' => null,
        'link_customizations' => null,
        'mode' => null,
        'payment_details' => null,
        'sender' => null,
        'unique_reference_id' => null,
        'payment_setup_options' => null,
        'metadata' => null,
        'payment_metadata' => null,
        'integration_metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'currency' => false,
        'link_customizations' => false,
        'mode' => false,
        'payment_details' => false,
        'sender' => false,
        'unique_reference_id' => false,
        'payment_setup_options' => false,
        'metadata' => false,
        'payment_metadata' => false,
        'integration_metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'currency' => 'currency',
        'link_customizations' => 'link_customizations',
        'mode' => 'mode',
        'payment_details' => 'payment_details',
        'sender' => 'sender',
        'unique_reference_id' => 'unique_reference_id',
        'payment_setup_options' => 'payment_setup_options',
        'metadata' => 'metadata',
        'payment_metadata' => 'payment_metadata',
        'integration_metadata' => 'integration_metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'link_customizations' => 'setLinkCustomizations',
        'mode' => 'setMode',
        'payment_details' => 'setPaymentDetails',
        'sender' => 'setSender',
        'unique_reference_id' => 'setUniqueReferenceId',
        'payment_setup_options' => 'setPaymentSetupOptions',
        'metadata' => 'setMetadata',
        'payment_metadata' => 'setPaymentMetadata',
        'integration_metadata' => 'setIntegrationMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'link_customizations' => 'getLinkCustomizations',
        'mode' => 'getMode',
        'payment_details' => 'getPaymentDetails',
        'sender' => 'getSender',
        'unique_reference_id' => 'getUniqueReferenceId',
        'payment_setup_options' => 'getPaymentSetupOptions',
        'metadata' => 'getMetadata',
        'payment_metadata' => 'getPaymentMetadata',
        'integration_metadata' => 'getIntegrationMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODE_PAYMENT = 'PAYMENT';
    public const MODE_SETUP = 'SETUP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_PAYMENT,
            self::MODE_SETUP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('link_customizations', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('payment_details', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('unique_reference_id', $data ?? [], null);
        $this->setIfExists('payment_setup_options', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('payment_metadata', $data ?? [], null);
        $this->setIfExists('integration_metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['amount']) && ($this->container['amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 1.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ((mb_strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['unique_reference_id'] === null) {
            $invalidProperties[] = "'unique_reference_id' can't be null";
        }
        if ((mb_strlen($this->container['unique_reference_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'unique_reference_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount The amount of the payment. Expressed in currency's smallest unit or “minor unit”, as defined in ISO 4217.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling CreatePaymentLinkRequest., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        if ((mb_strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling CreatePaymentLinkRequest., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling CreatePaymentLinkRequest., must be bigger than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets link_customizations
     *
     * @return \FinversePhp\Model\PaymentLinkCustomizations|null
     */
    public function getLinkCustomizations()
    {
        return $this->container['link_customizations'];
    }

    /**
     * Sets link_customizations
     *
     * @param \FinversePhp\Model\PaymentLinkCustomizations|null $link_customizations link_customizations
     *
     * @return self
     */
    public function setLinkCustomizations($link_customizations)
    {
        if (is_null($link_customizations)) {
            throw new \InvalidArgumentException('non-nullable link_customizations cannot be null');
        }
        $this->container['link_customizations'] = $link_customizations;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode The payment link mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \FinversePhp\Model\PaymentLinkDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \FinversePhp\Model\PaymentLinkDetails|null $payment_details payment_details
     *
     * @return self
     */
    public function setPaymentDetails($payment_details)
    {
        if (is_null($payment_details)) {
            throw new \InvalidArgumentException('non-nullable payment_details cannot be null');
        }
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \FinversePhp\Model\PaymentLinkSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \FinversePhp\Model\PaymentLinkSender $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets unique_reference_id
     *
     * @return string
     */
    public function getUniqueReferenceId()
    {
        return $this->container['unique_reference_id'];
    }

    /**
     * Sets unique_reference_id
     *
     * @param string $unique_reference_id Unique reference id to identifying the payment to be collected.
     *
     * @return self
     */
    public function setUniqueReferenceId($unique_reference_id)
    {
        if (is_null($unique_reference_id)) {
            throw new \InvalidArgumentException('non-nullable unique_reference_id cannot be null');
        }

        if ((mb_strlen($unique_reference_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unique_reference_id when calling CreatePaymentLinkRequest., must be bigger than or equal to 1.');
        }

        $this->container['unique_reference_id'] = $unique_reference_id;

        return $this;
    }

    /**
     * Gets payment_setup_options
     *
     * @return \FinversePhp\Model\PaymentSetupOptions|null
     */
    public function getPaymentSetupOptions()
    {
        return $this->container['payment_setup_options'];
    }

    /**
     * Sets payment_setup_options
     *
     * @param \FinversePhp\Model\PaymentSetupOptions|null $payment_setup_options payment_setup_options
     *
     * @return self
     */
    public function setPaymentSetupOptions($payment_setup_options)
    {
        if (is_null($payment_setup_options)) {
            throw new \InvalidArgumentException('non-nullable payment_setup_options cannot be null');
        }
        $this->container['payment_setup_options'] = $payment_setup_options;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets payment_metadata
     *
     * @return array<string,string>|null
     */
    public function getPaymentMetadata()
    {
        return $this->container['payment_metadata'];
    }

    /**
     * Sets payment_metadata
     *
     * @param array<string,string>|null $payment_metadata payment_metadata
     *
     * @return self
     */
    public function setPaymentMetadata($payment_metadata)
    {
        if (is_null($payment_metadata)) {
            throw new \InvalidArgumentException('non-nullable payment_metadata cannot be null');
        }
        $this->container['payment_metadata'] = $payment_metadata;

        return $this;
    }

    /**
     * Gets integration_metadata
     *
     * @return \FinversePhp\Model\IntegrationMetadataRequest|null
     */
    public function getIntegrationMetadata()
    {
        return $this->container['integration_metadata'];
    }

    /**
     * Sets integration_metadata
     *
     * @param \FinversePhp\Model\IntegrationMetadataRequest|null $integration_metadata integration_metadata
     *
     * @return self
     */
    public function setIntegrationMetadata($integration_metadata)
    {
        if (is_null($integration_metadata)) {
            throw new \InvalidArgumentException('non-nullable integration_metadata cannot be null');
        }
        $this->container['integration_metadata'] = $integration_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


