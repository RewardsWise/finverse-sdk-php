<?php
/**
 * PaymentDetails2
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * PaymentDetails2 Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentDetails2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentDetails2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'mandate_id' => 'string',
        'transaction_reference_id' => 'string',
        'external_transaction_reference' => 'string',
        'references' => '\FinversePhp\Model\PaymentDetailsReferences',
        'processor_entity_name' => 'string',
        'collection_entity_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'mandate_id' => null,
        'transaction_reference_id' => null,
        'external_transaction_reference' => null,
        'references' => null,
        'processor_entity_name' => null,
        'collection_entity_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'mandate_id' => false,
        'transaction_reference_id' => false,
        'external_transaction_reference' => false,
        'references' => false,
        'processor_entity_name' => false,
        'collection_entity_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'mandate_id' => 'mandate_id',
        'transaction_reference_id' => 'transaction_reference_id',
        'external_transaction_reference' => 'external_transaction_reference',
        'references' => 'references',
        'processor_entity_name' => 'processor_entity_name',
        'collection_entity_name' => 'collection_entity_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'mandate_id' => 'setMandateId',
        'transaction_reference_id' => 'setTransactionReferenceId',
        'external_transaction_reference' => 'setExternalTransactionReference',
        'references' => 'setReferences',
        'processor_entity_name' => 'setProcessorEntityName',
        'collection_entity_name' => 'setCollectionEntityName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'mandate_id' => 'getMandateId',
        'transaction_reference_id' => 'getTransactionReferenceId',
        'external_transaction_reference' => 'getExternalTransactionReference',
        'references' => 'getReferences',
        'processor_entity_name' => 'getProcessorEntityName',
        'collection_entity_name' => 'getCollectionEntityName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mandate_id', $data ?? [], null);
        $this->setIfExists('transaction_reference_id', $data ?? [], null);
        $this->setIfExists('external_transaction_reference', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('processor_entity_name', $data ?? [], null);
        $this->setIfExists('collection_entity_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 100)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['external_transaction_reference']) && (mb_strlen($this->container['external_transaction_reference']) > 35)) {
            $invalidProperties[] = "invalid value for 'external_transaction_reference', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The transaction description provided to banks, which banks will show to their customers.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 100)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PaymentDetails2., must be smaller than or equal to 100.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string|null
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string|null $mandate_id ID of the mandate this pament is referring to.
     *
     * @return self
     */
    public function setMandateId($mandate_id)
    {
        if (is_null($mandate_id)) {
            throw new \InvalidArgumentException('non-nullable mandate_id cannot be null');
        }
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets transaction_reference_id
     *
     * @return string|null
     */
    public function getTransactionReferenceId()
    {
        return $this->container['transaction_reference_id'];
    }

    /**
     * Sets transaction_reference_id
     *
     * @param string|null $transaction_reference_id Deprecated: Customer's ID for this transaction
     *
     * @return self
     */
    public function setTransactionReferenceId($transaction_reference_id)
    {
        if (is_null($transaction_reference_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_reference_id cannot be null');
        }
        $this->container['transaction_reference_id'] = $transaction_reference_id;

        return $this;
    }

    /**
     * Gets external_transaction_reference
     *
     * @return string|null
     */
    public function getExternalTransactionReference()
    {
        return $this->container['external_transaction_reference'];
    }

    /**
     * Sets external_transaction_reference
     *
     * @param string|null $external_transaction_reference Customer reference for this transaction
     *
     * @return self
     */
    public function setExternalTransactionReference($external_transaction_reference)
    {
        if (is_null($external_transaction_reference)) {
            throw new \InvalidArgumentException('non-nullable external_transaction_reference cannot be null');
        }
        if ((mb_strlen($external_transaction_reference) > 35)) {
            throw new \InvalidArgumentException('invalid length for $external_transaction_reference when calling PaymentDetails2., must be smaller than or equal to 35.');
        }

        $this->container['external_transaction_reference'] = $external_transaction_reference;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \FinversePhp\Model\PaymentDetailsReferences|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \FinversePhp\Model\PaymentDetailsReferences|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets processor_entity_name
     *
     * @return string|null
     */
    public function getProcessorEntityName()
    {
        return $this->container['processor_entity_name'];
    }

    /**
     * Sets processor_entity_name
     *
     * @param string|null $processor_entity_name processor_entity_name
     *
     * @return self
     */
    public function setProcessorEntityName($processor_entity_name)
    {
        if (is_null($processor_entity_name)) {
            throw new \InvalidArgumentException('non-nullable processor_entity_name cannot be null');
        }
        $this->container['processor_entity_name'] = $processor_entity_name;

        return $this;
    }

    /**
     * Gets collection_entity_name
     *
     * @return string|null
     */
    public function getCollectionEntityName()
    {
        return $this->container['collection_entity_name'];
    }

    /**
     * Sets collection_entity_name
     *
     * @param string|null $collection_entity_name collection_entity_name
     *
     * @return self
     */
    public function setCollectionEntityName($collection_entity_name)
    {
        if (is_null($collection_entity_name)) {
            throw new \InvalidArgumentException('non-nullable collection_entity_name cannot be null');
        }
        $this->container['collection_entity_name'] = $collection_entity_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


