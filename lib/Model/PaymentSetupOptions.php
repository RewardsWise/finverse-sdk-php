<?php
/**
 * PaymentSetupOptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * PaymentSetupOptions Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentSetupOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentSetupOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'future_payments' => 'string',
        'mandate_details' => '\FinversePhp\Model\MandateDetailsForPaymentLink',
        'payment_method_types' => 'string[]',
        'recipient_account_filters' => '\FinversePhp\Model\RecipientAccountFilters',
        'autopay_enrollment_configuration' => '\FinversePhp\Model\AutopayEnrollmentConfiguration'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'future_payments' => null,
        'mandate_details' => null,
        'payment_method_types' => null,
        'recipient_account_filters' => null,
        'autopay_enrollment_configuration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'future_payments' => false,
        'mandate_details' => false,
        'payment_method_types' => false,
        'recipient_account_filters' => false,
        'autopay_enrollment_configuration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'future_payments' => 'future_payments',
        'mandate_details' => 'mandate_details',
        'payment_method_types' => 'payment_method_types',
        'recipient_account_filters' => 'recipient_account_filters',
        'autopay_enrollment_configuration' => 'autopay_enrollment_configuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'future_payments' => 'setFuturePayments',
        'mandate_details' => 'setMandateDetails',
        'payment_method_types' => 'setPaymentMethodTypes',
        'recipient_account_filters' => 'setRecipientAccountFilters',
        'autopay_enrollment_configuration' => 'setAutopayEnrollmentConfiguration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'future_payments' => 'getFuturePayments',
        'mandate_details' => 'getMandateDetails',
        'payment_method_types' => 'getPaymentMethodTypes',
        'recipient_account_filters' => 'getRecipientAccountFilters',
        'autopay_enrollment_configuration' => 'getAutopayEnrollmentConfiguration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FUTURE_PAYMENTS_AUTOPAY = 'AUTOPAY';
    public const FUTURE_PAYMENTS_CLICK_TO_PAY = 'CLICK_TO_PAY';
    public const PAYMENT_METHOD_TYPES_MANDATE = 'MANDATE';
    public const PAYMENT_METHOD_TYPES_SINGLE = 'SINGLE';
    public const PAYMENT_METHOD_TYPES_CARD = 'CARD';
    public const PAYMENT_METHOD_TYPES_MANUAL = 'MANUAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFuturePaymentsAllowableValues()
    {
        return [
            self::FUTURE_PAYMENTS_AUTOPAY,
            self::FUTURE_PAYMENTS_CLICK_TO_PAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodTypesAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_TYPES_MANDATE,
            self::PAYMENT_METHOD_TYPES_SINGLE,
            self::PAYMENT_METHOD_TYPES_CARD,
            self::PAYMENT_METHOD_TYPES_MANUAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('future_payments', $data ?? [], null);
        $this->setIfExists('mandate_details', $data ?? [], null);
        $this->setIfExists('payment_method_types', $data ?? [], null);
        $this->setIfExists('recipient_account_filters', $data ?? [], null);
        $this->setIfExists('autopay_enrollment_configuration', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFuturePaymentsAllowableValues();
        if (!is_null($this->container['future_payments']) && !in_array($this->container['future_payments'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'future_payments', must be one of '%s'",
                $this->container['future_payments'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets future_payments
     *
     * @return string|null
     */
    public function getFuturePayments()
    {
        return $this->container['future_payments'];
    }

    /**
     * Sets future_payments
     *
     * @param string|null $future_payments The type of future_payments that customer want to use. Possible values: AUTOPAY or CLICK_TO_PAY
     *
     * @return self
     */
    public function setFuturePayments($future_payments)
    {
        if (is_null($future_payments)) {
            throw new \InvalidArgumentException('non-nullable future_payments cannot be null');
        }
        $allowedValues = $this->getFuturePaymentsAllowableValues();
        if (!in_array($future_payments, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'future_payments', must be one of '%s'",
                    $future_payments,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['future_payments'] = $future_payments;

        return $this;
    }

    /**
     * Gets mandate_details
     *
     * @return \FinversePhp\Model\MandateDetailsForPaymentLink|null
     */
    public function getMandateDetails()
    {
        return $this->container['mandate_details'];
    }

    /**
     * Sets mandate_details
     *
     * @param \FinversePhp\Model\MandateDetailsForPaymentLink|null $mandate_details mandate_details
     *
     * @return self
     */
    public function setMandateDetails($mandate_details)
    {
        if (is_null($mandate_details)) {
            throw new \InvalidArgumentException('non-nullable mandate_details cannot be null');
        }
        $this->container['mandate_details'] = $mandate_details;

        return $this;
    }

    /**
     * Gets payment_method_types
     *
     * @return string[]|null
     */
    public function getPaymentMethodTypes()
    {
        return $this->container['payment_method_types'];
    }

    /**
     * Sets payment_method_types
     *
     * @param string[]|null $payment_method_types payment_method_types
     *
     * @return self
     */
    public function setPaymentMethodTypes($payment_method_types)
    {
        if (is_null($payment_method_types)) {
            throw new \InvalidArgumentException('non-nullable payment_method_types cannot be null');
        }
        $allowedValues = $this->getPaymentMethodTypesAllowableValues();
        if (array_diff($payment_method_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method_types'] = $payment_method_types;

        return $this;
    }

    /**
     * Gets recipient_account_filters
     *
     * @return \FinversePhp\Model\RecipientAccountFilters|null
     */
    public function getRecipientAccountFilters()
    {
        return $this->container['recipient_account_filters'];
    }

    /**
     * Sets recipient_account_filters
     *
     * @param \FinversePhp\Model\RecipientAccountFilters|null $recipient_account_filters recipient_account_filters
     *
     * @return self
     */
    public function setRecipientAccountFilters($recipient_account_filters)
    {
        if (is_null($recipient_account_filters)) {
            throw new \InvalidArgumentException('non-nullable recipient_account_filters cannot be null');
        }
        $this->container['recipient_account_filters'] = $recipient_account_filters;

        return $this;
    }

    /**
     * Gets autopay_enrollment_configuration
     *
     * @return \FinversePhp\Model\AutopayEnrollmentConfiguration|null
     */
    public function getAutopayEnrollmentConfiguration()
    {
        return $this->container['autopay_enrollment_configuration'];
    }

    /**
     * Sets autopay_enrollment_configuration
     *
     * @param \FinversePhp\Model\AutopayEnrollmentConfiguration|null $autopay_enrollment_configuration autopay_enrollment_configuration
     *
     * @return self
     */
    public function setAutopayEnrollmentConfiguration($autopay_enrollment_configuration)
    {
        if (is_null($autopay_enrollment_configuration)) {
            throw new \InvalidArgumentException('non-nullable autopay_enrollment_configuration cannot be null');
        }
        $this->container['autopay_enrollment_configuration'] = $autopay_enrollment_configuration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


