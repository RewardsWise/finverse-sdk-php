<?php
/**
 * PayoutSnapshotResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * PayoutSnapshotResponse Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayoutSnapshotResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayoutSnapshotResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payout_id' => 'string',
        'status' => 'string',
        'type' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'transaction_date' => 'string',
        'payment_details' => '\FinversePhp\Model\PayoutSnapshotDetails',
        'metadata' => 'array<string,string>',
        'amount' => 'int',
        'currency' => 'string',
        'sender' => '\FinversePhp\Model\MandateRecipient',
        'sender_account' => '\FinversePhp\Model\MandateRecipientAccount',
        'recipient' => '\FinversePhp\Model\GetMandateSender',
        'recipient_account' => '\FinversePhp\Model\MandateSenderAccount',
        'fees' => '\FinversePhp\Model\Fee[]',
        'live' => 'bool',
        'error' => '\FinversePhp\Model\FvEmbeddedErrorModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payout_id' => null,
        'status' => null,
        'type' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'transaction_date' => null,
        'payment_details' => null,
        'metadata' => null,
        'amount' => null,
        'currency' => null,
        'sender' => null,
        'sender_account' => null,
        'recipient' => null,
        'recipient_account' => null,
        'fees' => null,
        'live' => null,
        'error' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payout_id' => false,
        'status' => false,
        'type' => false,
        'created_at' => false,
        'updated_at' => false,
        'transaction_date' => false,
        'payment_details' => false,
        'metadata' => false,
        'amount' => false,
        'currency' => false,
        'sender' => false,
        'sender_account' => false,
        'recipient' => false,
        'recipient_account' => false,
        'fees' => false,
        'live' => false,
        'error' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payout_id' => 'payout_id',
        'status' => 'status',
        'type' => 'type',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'transaction_date' => 'transaction_date',
        'payment_details' => 'payment_details',
        'metadata' => 'metadata',
        'amount' => 'amount',
        'currency' => 'currency',
        'sender' => 'sender',
        'sender_account' => 'sender_account',
        'recipient' => 'recipient',
        'recipient_account' => 'recipient_account',
        'fees' => 'fees',
        'live' => 'live',
        'error' => 'error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payout_id' => 'setPayoutId',
        'status' => 'setStatus',
        'type' => 'setType',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'transaction_date' => 'setTransactionDate',
        'payment_details' => 'setPaymentDetails',
        'metadata' => 'setMetadata',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'sender' => 'setSender',
        'sender_account' => 'setSenderAccount',
        'recipient' => 'setRecipient',
        'recipient_account' => 'setRecipientAccount',
        'fees' => 'setFees',
        'live' => 'setLive',
        'error' => 'setError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payout_id' => 'getPayoutId',
        'status' => 'getStatus',
        'type' => 'getType',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'transaction_date' => 'getTransactionDate',
        'payment_details' => 'getPaymentDetails',
        'metadata' => 'getMetadata',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'sender' => 'getSender',
        'sender_account' => 'getSenderAccount',
        'recipient' => 'getRecipient',
        'recipient_account' => 'getRecipientAccount',
        'fees' => 'getFees',
        'live' => 'getLive',
        'error' => 'getError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_EXECUTED = 'EXECUTED';
    public const STATUS_CREATED = 'CREATED';
    public const STATUS_PROCESSING = 'PROCESSING';
    public const STATUS_PROCESSING_FUNDS = 'PROCESSING_FUNDS';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_FAILED = 'FAILED';
    public const STATUS_FUNDED = 'FUNDED';
    public const STATUS_SUBMITTED = 'SUBMITTED';
    public const TYPE_MANUAL = 'MANUAL';
    public const TYPE_SCHEDULED = 'SCHEDULED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_EXECUTED,
            self::STATUS_CREATED,
            self::STATUS_PROCESSING,
            self::STATUS_PROCESSING_FUNDS,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_FUNDED,
            self::STATUS_SUBMITTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MANUAL,
            self::TYPE_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payout_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('payment_details', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('sender_account', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('recipient_account', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('live', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['live'] === null) {
            $invalidProperties[] = "'live' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payout_id
     *
     * @return string|null
     */
    public function getPayoutId()
    {
        return $this->container['payout_id'];
    }

    /**
     * Sets payout_id
     *
     * @param string|null $payout_id payout_id
     *
     * @return self
     */
    public function setPayoutId($payout_id)
    {
        if (is_null($payout_id)) {
            throw new \InvalidArgumentException('non-nullable payout_id cannot be null');
        }
        $this->container['payout_id'] = $payout_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return string|null
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param string|null $transaction_date transaction_date
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets payment_details
     *
     * @return \FinversePhp\Model\PayoutSnapshotDetails|null
     */
    public function getPaymentDetails()
    {
        return $this->container['payment_details'];
    }

    /**
     * Sets payment_details
     *
     * @param \FinversePhp\Model\PayoutSnapshotDetails|null $payment_details payment_details
     *
     * @return self
     */
    public function setPaymentDetails($payment_details)
    {
        if (is_null($payment_details)) {
            throw new \InvalidArgumentException('non-nullable payment_details cannot be null');
        }
        $this->container['payment_details'] = $payment_details;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \FinversePhp\Model\MandateRecipient|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \FinversePhp\Model\MandateRecipient|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets sender_account
     *
     * @return \FinversePhp\Model\MandateRecipientAccount|null
     */
    public function getSenderAccount()
    {
        return $this->container['sender_account'];
    }

    /**
     * Sets sender_account
     *
     * @param \FinversePhp\Model\MandateRecipientAccount|null $sender_account sender_account
     *
     * @return self
     */
    public function setSenderAccount($sender_account)
    {
        if (is_null($sender_account)) {
            throw new \InvalidArgumentException('non-nullable sender_account cannot be null');
        }
        $this->container['sender_account'] = $sender_account;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \FinversePhp\Model\GetMandateSender|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \FinversePhp\Model\GetMandateSender|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets recipient_account
     *
     * @return \FinversePhp\Model\MandateSenderAccount|null
     */
    public function getRecipientAccount()
    {
        return $this->container['recipient_account'];
    }

    /**
     * Sets recipient_account
     *
     * @param \FinversePhp\Model\MandateSenderAccount|null $recipient_account recipient_account
     *
     * @return self
     */
    public function setRecipientAccount($recipient_account)
    {
        if (is_null($recipient_account)) {
            throw new \InvalidArgumentException('non-nullable recipient_account cannot be null');
        }
        $this->container['recipient_account'] = $recipient_account;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \FinversePhp\Model\Fee[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \FinversePhp\Model\Fee[]|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets live
     *
     * @return bool
     */
    public function getLive()
    {
        return $this->container['live'];
    }

    /**
     * Sets live
     *
     * @param bool $live Whether this payout is live or not
     *
     * @return self
     */
    public function setLive($live)
    {
        if (is_null($live)) {
            throw new \InvalidArgumentException('non-nullable live cannot be null');
        }
        $this->container['live'] = $live;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \FinversePhp\Model\FvEmbeddedErrorModel|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \FinversePhp\Model\FvEmbeddedErrorModel|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


