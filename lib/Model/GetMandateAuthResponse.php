<?php
/**
 * GetMandateAuthResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * GetMandateAuthResponse Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetMandateAuthResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetMandateAuthResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mandate_id' => 'string',
        'mandate_status' => 'string',
        'recipient_account_id' => 'string',
        'institution_id' => 'string',
        'sender_type' => 'string',
        'auth_checklist' => '\FinversePhp\Model\AuthChecklistFactor[]',
        'encryption_info' => '\FinversePhp\Model\MandateAuthEncryptionInfo',
        'last_update' => '\DateTime',
        'error' => '\FinversePhp\Model\FvEmbeddedErrorModel',
        'mandate_details' => '\FinversePhp\Model\MandateDetailsResponse',
        'recipient' => '\FinversePhp\Model\MandateRecipient'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mandate_id' => null,
        'mandate_status' => null,
        'recipient_account_id' => null,
        'institution_id' => null,
        'sender_type' => null,
        'auth_checklist' => null,
        'encryption_info' => null,
        'last_update' => 'date-time',
        'error' => null,
        'mandate_details' => null,
        'recipient' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mandate_id' => false,
        'mandate_status' => false,
        'recipient_account_id' => false,
        'institution_id' => false,
        'sender_type' => false,
        'auth_checklist' => false,
        'encryption_info' => false,
        'last_update' => false,
        'error' => false,
        'mandate_details' => false,
        'recipient' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mandate_id' => 'mandate_id',
        'mandate_status' => 'mandate_status',
        'recipient_account_id' => 'recipient_account_id',
        'institution_id' => 'institution_id',
        'sender_type' => 'sender_type',
        'auth_checklist' => 'auth_checklist',
        'encryption_info' => 'encryption_info',
        'last_update' => 'last_update',
        'error' => 'error',
        'mandate_details' => 'mandate_details',
        'recipient' => 'recipient'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mandate_id' => 'setMandateId',
        'mandate_status' => 'setMandateStatus',
        'recipient_account_id' => 'setRecipientAccountId',
        'institution_id' => 'setInstitutionId',
        'sender_type' => 'setSenderType',
        'auth_checklist' => 'setAuthChecklist',
        'encryption_info' => 'setEncryptionInfo',
        'last_update' => 'setLastUpdate',
        'error' => 'setError',
        'mandate_details' => 'setMandateDetails',
        'recipient' => 'setRecipient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mandate_id' => 'getMandateId',
        'mandate_status' => 'getMandateStatus',
        'recipient_account_id' => 'getRecipientAccountId',
        'institution_id' => 'getInstitutionId',
        'sender_type' => 'getSenderType',
        'auth_checklist' => 'getAuthChecklist',
        'encryption_info' => 'getEncryptionInfo',
        'last_update' => 'getLastUpdate',
        'error' => 'getError',
        'mandate_details' => 'getMandateDetails',
        'recipient' => 'getRecipient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MANDATE_STATUS_CREATED = 'CREATED';
    public const MANDATE_STATUS_PROCESSING = 'PROCESSING';
    public const MANDATE_STATUS_SUBMITTED = 'SUBMITTED';
    public const MANDATE_STATUS_ERROR = 'ERROR';
    public const SENDER_TYPE_INDIVIDUAL = 'INDIVIDUAL';
    public const SENDER_TYPE_BUSINESS = 'BUSINESS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMandateStatusAllowableValues()
    {
        return [
            self::MANDATE_STATUS_CREATED,
            self::MANDATE_STATUS_PROCESSING,
            self::MANDATE_STATUS_SUBMITTED,
            self::MANDATE_STATUS_ERROR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSenderTypeAllowableValues()
    {
        return [
            self::SENDER_TYPE_INDIVIDUAL,
            self::SENDER_TYPE_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('mandate_id', $data ?? [], null);
        $this->setIfExists('mandate_status', $data ?? [], null);
        $this->setIfExists('recipient_account_id', $data ?? [], null);
        $this->setIfExists('institution_id', $data ?? [], null);
        $this->setIfExists('sender_type', $data ?? [], null);
        $this->setIfExists('auth_checklist', $data ?? [], null);
        $this->setIfExists('encryption_info', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('mandate_details', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mandate_id'] === null) {
            $invalidProperties[] = "'mandate_id' can't be null";
        }
        if ($this->container['mandate_status'] === null) {
            $invalidProperties[] = "'mandate_status' can't be null";
        }
        $allowedValues = $this->getMandateStatusAllowableValues();
        if (!is_null($this->container['mandate_status']) && !in_array($this->container['mandate_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mandate_status', must be one of '%s'",
                $this->container['mandate_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['recipient_account_id'] === null) {
            $invalidProperties[] = "'recipient_account_id' can't be null";
        }
        if ($this->container['institution_id'] === null) {
            $invalidProperties[] = "'institution_id' can't be null";
        }
        $allowedValues = $this->getSenderTypeAllowableValues();
        if (!is_null($this->container['sender_type']) && !in_array($this->container['sender_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sender_type', must be one of '%s'",
                $this->container['sender_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['auth_checklist'] === null) {
            $invalidProperties[] = "'auth_checklist' can't be null";
        }
        if ($this->container['encryption_info'] === null) {
            $invalidProperties[] = "'encryption_info' can't be null";
        }
        if ($this->container['last_update'] === null) {
            $invalidProperties[] = "'last_update' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mandate_id
     *
     * @return string
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string $mandate_id Finverse Mandate ID
     *
     * @return self
     */
    public function setMandateId($mandate_id)
    {
        if (is_null($mandate_id)) {
            throw new \InvalidArgumentException('non-nullable mandate_id cannot be null');
        }
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets mandate_status
     *
     * @return string
     */
    public function getMandateStatus()
    {
        return $this->container['mandate_status'];
    }

    /**
     * Sets mandate_status
     *
     * @param string $mandate_status Mandate status
     *
     * @return self
     */
    public function setMandateStatus($mandate_status)
    {
        if (is_null($mandate_status)) {
            throw new \InvalidArgumentException('non-nullable mandate_status cannot be null');
        }
        $allowedValues = $this->getMandateStatusAllowableValues();
        if (!in_array($mandate_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mandate_status', must be one of '%s'",
                    $mandate_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mandate_status'] = $mandate_status;

        return $this;
    }

    /**
     * Gets recipient_account_id
     *
     * @return string
     */
    public function getRecipientAccountId()
    {
        return $this->container['recipient_account_id'];
    }

    /**
     * Sets recipient_account_id
     *
     * @param string $recipient_account_id Merchant account ID assigned by Finverse
     *
     * @return self
     */
    public function setRecipientAccountId($recipient_account_id)
    {
        if (is_null($recipient_account_id)) {
            throw new \InvalidArgumentException('non-nullable recipient_account_id cannot be null');
        }
        $this->container['recipient_account_id'] = $recipient_account_id;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id Finverse Institution ID. Only returned if institution_id was included in the request.
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        if (is_null($institution_id)) {
            throw new \InvalidArgumentException('non-nullable institution_id cannot be null');
        }
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets sender_type
     *
     * @return string|null
     */
    public function getSenderType()
    {
        return $this->container['sender_type'];
    }

    /**
     * Sets sender_type
     *
     * @param string|null $sender_type Type of account held by the Sender at the Institution. Possible values are INDIVIDUAL, BUSINESS
     *
     * @return self
     */
    public function setSenderType($sender_type)
    {
        if (is_null($sender_type)) {
            throw new \InvalidArgumentException('non-nullable sender_type cannot be null');
        }
        $allowedValues = $this->getSenderTypeAllowableValues();
        if (!in_array($sender_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sender_type', must be one of '%s'",
                    $sender_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sender_type'] = $sender_type;

        return $this;
    }

    /**
     * Gets auth_checklist
     *
     * @return \FinversePhp\Model\AuthChecklistFactor[]
     */
    public function getAuthChecklist()
    {
        return $this->container['auth_checklist'];
    }

    /**
     * Sets auth_checklist
     *
     * @param \FinversePhp\Model\AuthChecklistFactor[] $auth_checklist Checklist of the authorization factors needed to complete Mandate authorization
     *
     * @return self
     */
    public function setAuthChecklist($auth_checklist)
    {
        if (is_null($auth_checklist)) {
            throw new \InvalidArgumentException('non-nullable auth_checklist cannot be null');
        }
        $this->container['auth_checklist'] = $auth_checklist;

        return $this;
    }

    /**
     * Gets encryption_info
     *
     * @return \FinversePhp\Model\MandateAuthEncryptionInfo
     */
    public function getEncryptionInfo()
    {
        return $this->container['encryption_info'];
    }

    /**
     * Sets encryption_info
     *
     * @param \FinversePhp\Model\MandateAuthEncryptionInfo $encryption_info encryption_info
     *
     * @return self
     */
    public function setEncryptionInfo($encryption_info)
    {
        if (is_null($encryption_info)) {
            throw new \InvalidArgumentException('non-nullable encryption_info cannot be null');
        }
        $this->container['encryption_info'] = $encryption_info;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime $last_update Timestamp in ISO format (YYYY-MM-DDTHH:MM:SS.SSSZ)
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \FinversePhp\Model\FvEmbeddedErrorModel|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \FinversePhp\Model\FvEmbeddedErrorModel|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets mandate_details
     *
     * @return \FinversePhp\Model\MandateDetailsResponse|null
     */
    public function getMandateDetails()
    {
        return $this->container['mandate_details'];
    }

    /**
     * Sets mandate_details
     *
     * @param \FinversePhp\Model\MandateDetailsResponse|null $mandate_details mandate_details
     *
     * @return self
     */
    public function setMandateDetails($mandate_details)
    {
        if (is_null($mandate_details)) {
            throw new \InvalidArgumentException('non-nullable mandate_details cannot be null');
        }
        $this->container['mandate_details'] = $mandate_details;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \FinversePhp\Model\MandateRecipient|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \FinversePhp\Model\MandateRecipient|null $recipient recipient
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


