<?php
/**
 * MandateDetailsResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * MandateDetailsResponse Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MandateDetailsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MandateDetailsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dda_reference' => 'string',
        'currency' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'payment_schedule' => '\FinversePhp\Model\PaymentSchedule',
        'transaction_limits' => '\FinversePhp\Model\TransactionLimits',
        'description' => 'string',
        'mandate_bank_reference' => 'string',
        'processor_entity_name' => 'string',
        'collection_entity_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dda_reference' => null,
        'currency' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'payment_schedule' => null,
        'transaction_limits' => null,
        'description' => null,
        'mandate_bank_reference' => null,
        'processor_entity_name' => null,
        'collection_entity_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dda_reference' => false,
        'currency' => false,
        'start_date' => true,
        'end_date' => true,
        'payment_schedule' => false,
        'transaction_limits' => false,
        'description' => false,
        'mandate_bank_reference' => false,
        'processor_entity_name' => false,
        'collection_entity_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dda_reference' => 'dda_reference',
        'currency' => 'currency',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'payment_schedule' => 'payment_schedule',
        'transaction_limits' => 'transaction_limits',
        'description' => 'description',
        'mandate_bank_reference' => 'mandate_bank_reference',
        'processor_entity_name' => 'processor_entity_name',
        'collection_entity_name' => 'collection_entity_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dda_reference' => 'setDdaReference',
        'currency' => 'setCurrency',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'payment_schedule' => 'setPaymentSchedule',
        'transaction_limits' => 'setTransactionLimits',
        'description' => 'setDescription',
        'mandate_bank_reference' => 'setMandateBankReference',
        'processor_entity_name' => 'setProcessorEntityName',
        'collection_entity_name' => 'setCollectionEntityName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dda_reference' => 'getDdaReference',
        'currency' => 'getCurrency',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'payment_schedule' => 'getPaymentSchedule',
        'transaction_limits' => 'getTransactionLimits',
        'description' => 'getDescription',
        'mandate_bank_reference' => 'getMandateBankReference',
        'processor_entity_name' => 'getProcessorEntityName',
        'collection_entity_name' => 'getCollectionEntityName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dda_reference', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('payment_schedule', $data ?? [], null);
        $this->setIfExists('transaction_limits', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mandate_bank_reference', $data ?? [], null);
        $this->setIfExists('processor_entity_name', $data ?? [], null);
        $this->setIfExists('collection_entity_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dda_reference
     *
     * @return string|null
     */
    public function getDdaReference()
    {
        return $this->container['dda_reference'];
    }

    /**
     * Sets dda_reference
     *
     * @param string|null $dda_reference The direct debit authorization reference, if empty this will be omitted from response
     *
     * @return self
     */
    public function setDdaReference($dda_reference)
    {
        if (is_null($dda_reference)) {
            throw new \InvalidArgumentException('non-nullable dda_reference cannot be null');
        }
        $this->container['dda_reference'] = $dda_reference;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency ISO currency code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date YYYY-MM-DD, must be later than or the same as the date of creation. If unspecified, default to the date of creation.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date YYYY-MM-DD, must be later than the date of creation.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets payment_schedule
     *
     * @return \FinversePhp\Model\PaymentSchedule|null
     */
    public function getPaymentSchedule()
    {
        return $this->container['payment_schedule'];
    }

    /**
     * Sets payment_schedule
     *
     * @param \FinversePhp\Model\PaymentSchedule|null $payment_schedule payment_schedule
     *
     * @return self
     */
    public function setPaymentSchedule($payment_schedule)
    {
        if (is_null($payment_schedule)) {
            throw new \InvalidArgumentException('non-nullable payment_schedule cannot be null');
        }
        $this->container['payment_schedule'] = $payment_schedule;

        return $this;
    }

    /**
     * Gets transaction_limits
     *
     * @return \FinversePhp\Model\TransactionLimits|null
     */
    public function getTransactionLimits()
    {
        return $this->container['transaction_limits'];
    }

    /**
     * Sets transaction_limits
     *
     * @param \FinversePhp\Model\TransactionLimits|null $transaction_limits transaction_limits
     *
     * @return self
     */
    public function setTransactionLimits($transaction_limits)
    {
        if (is_null($transaction_limits)) {
            throw new \InvalidArgumentException('non-nullable transaction_limits cannot be null');
        }
        $this->container['transaction_limits'] = $transaction_limits;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description End-user facing description of the mandate (used in notifications, and in payments if no description is provided)
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mandate_bank_reference
     *
     * @return string|null
     */
    public function getMandateBankReference()
    {
        return $this->container['mandate_bank_reference'];
    }

    /**
     * Sets mandate_bank_reference
     *
     * @param string|null $mandate_bank_reference A bank specific reference, what the end user may see
     *
     * @return self
     */
    public function setMandateBankReference($mandate_bank_reference)
    {
        if (is_null($mandate_bank_reference)) {
            throw new \InvalidArgumentException('non-nullable mandate_bank_reference cannot be null');
        }
        $this->container['mandate_bank_reference'] = $mandate_bank_reference;

        return $this;
    }

    /**
     * Gets processor_entity_name
     *
     * @return string|null
     */
    public function getProcessorEntityName()
    {
        return $this->container['processor_entity_name'];
    }

    /**
     * Sets processor_entity_name
     *
     * @param string|null $processor_entity_name processor_entity_name
     *
     * @return self
     */
    public function setProcessorEntityName($processor_entity_name)
    {
        if (is_null($processor_entity_name)) {
            throw new \InvalidArgumentException('non-nullable processor_entity_name cannot be null');
        }
        $this->container['processor_entity_name'] = $processor_entity_name;

        return $this;
    }

    /**
     * Gets collection_entity_name
     *
     * @return string|null
     */
    public function getCollectionEntityName()
    {
        return $this->container['collection_entity_name'];
    }

    /**
     * Sets collection_entity_name
     *
     * @param string|null $collection_entity_name collection_entity_name
     *
     * @return self
     */
    public function setCollectionEntityName($collection_entity_name)
    {
        if (is_null($collection_entity_name)) {
            throw new \InvalidArgumentException('non-nullable collection_entity_name cannot be null');
        }
        $this->container['collection_entity_name'] = $collection_entity_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


