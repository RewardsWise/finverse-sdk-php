<?php
/**
 * LinkTokenRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Model;

use \ArrayAccess;
use \FinversePhp\ObjectSerializer;

/**
 * LinkTokenRequest Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LinkTokenRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LinkTokenRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'grant_type' => 'string',
        'response_type' => 'string',
        'response_mode' => 'string',
        'user_id' => 'string',
        'client_id' => 'string',
        'redirect_uri' => 'string',
        'state' => 'string',
        'scope' => 'string',
        'link_mode' => 'string',
        'ui_mode' => 'string',
        'language' => 'string',
        'code_challenge' => 'string',
        'code_challenge_method' => 'string',
        'login_identity_id' => 'string',
        'customization_id' => 'string',
        'institution_id' => 'string',
        'countries' => 'string[]',
        'user_type' => 'string[]',
        'products_supported' => 'string[]',
        'products_requested' => 'string[]',
        'payment_instruction_id' => 'string',
        'automatic_data_refresh' => 'string',
        'institution_status' => 'string',
        'user_configs' => '\FinversePhp\Model\LinkTokenUserConfigs'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'grant_type' => null,
        'response_type' => null,
        'response_mode' => null,
        'user_id' => null,
        'client_id' => null,
        'redirect_uri' => null,
        'state' => null,
        'scope' => null,
        'link_mode' => null,
        'ui_mode' => null,
        'language' => null,
        'code_challenge' => null,
        'code_challenge_method' => null,
        'login_identity_id' => null,
        'customization_id' => null,
        'institution_id' => null,
        'countries' => null,
        'user_type' => null,
        'products_supported' => null,
        'products_requested' => null,
        'payment_instruction_id' => null,
        'automatic_data_refresh' => null,
        'institution_status' => null,
        'user_configs' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'grant_type' => false,
        'response_type' => false,
        'response_mode' => false,
        'user_id' => false,
        'client_id' => false,
        'redirect_uri' => false,
        'state' => false,
        'scope' => false,
        'link_mode' => false,
        'ui_mode' => false,
        'language' => false,
        'code_challenge' => false,
        'code_challenge_method' => false,
        'login_identity_id' => false,
        'customization_id' => false,
        'institution_id' => false,
        'countries' => false,
        'user_type' => false,
        'products_supported' => false,
        'products_requested' => false,
        'payment_instruction_id' => false,
        'automatic_data_refresh' => false,
        'institution_status' => false,
        'user_configs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grant_type' => 'grant_type',
        'response_type' => 'response_type',
        'response_mode' => 'response_mode',
        'user_id' => 'user_id',
        'client_id' => 'client_id',
        'redirect_uri' => 'redirect_uri',
        'state' => 'state',
        'scope' => 'scope',
        'link_mode' => 'link_mode',
        'ui_mode' => 'ui_mode',
        'language' => 'language',
        'code_challenge' => 'code_challenge',
        'code_challenge_method' => 'code_challenge_method',
        'login_identity_id' => 'login_identity_id',
        'customization_id' => 'customization_id',
        'institution_id' => 'institution_id',
        'countries' => 'countries',
        'user_type' => 'user_type',
        'products_supported' => 'products_supported',
        'products_requested' => 'products_requested',
        'payment_instruction_id' => 'payment_instruction_id',
        'automatic_data_refresh' => 'automatic_data_refresh',
        'institution_status' => 'institution_status',
        'user_configs' => 'user_configs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grant_type' => 'setGrantType',
        'response_type' => 'setResponseType',
        'response_mode' => 'setResponseMode',
        'user_id' => 'setUserId',
        'client_id' => 'setClientId',
        'redirect_uri' => 'setRedirectUri',
        'state' => 'setState',
        'scope' => 'setScope',
        'link_mode' => 'setLinkMode',
        'ui_mode' => 'setUiMode',
        'language' => 'setLanguage',
        'code_challenge' => 'setCodeChallenge',
        'code_challenge_method' => 'setCodeChallengeMethod',
        'login_identity_id' => 'setLoginIdentityId',
        'customization_id' => 'setCustomizationId',
        'institution_id' => 'setInstitutionId',
        'countries' => 'setCountries',
        'user_type' => 'setUserType',
        'products_supported' => 'setProductsSupported',
        'products_requested' => 'setProductsRequested',
        'payment_instruction_id' => 'setPaymentInstructionId',
        'automatic_data_refresh' => 'setAutomaticDataRefresh',
        'institution_status' => 'setInstitutionStatus',
        'user_configs' => 'setUserConfigs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grant_type' => 'getGrantType',
        'response_type' => 'getResponseType',
        'response_mode' => 'getResponseMode',
        'user_id' => 'getUserId',
        'client_id' => 'getClientId',
        'redirect_uri' => 'getRedirectUri',
        'state' => 'getState',
        'scope' => 'getScope',
        'link_mode' => 'getLinkMode',
        'ui_mode' => 'getUiMode',
        'language' => 'getLanguage',
        'code_challenge' => 'getCodeChallenge',
        'code_challenge_method' => 'getCodeChallengeMethod',
        'login_identity_id' => 'getLoginIdentityId',
        'customization_id' => 'getCustomizationId',
        'institution_id' => 'getInstitutionId',
        'countries' => 'getCountries',
        'user_type' => 'getUserType',
        'products_supported' => 'getProductsSupported',
        'products_requested' => 'getProductsRequested',
        'payment_instruction_id' => 'getPaymentInstructionId',
        'automatic_data_refresh' => 'getAutomaticDataRefresh',
        'institution_status' => 'getInstitutionStatus',
        'user_configs' => 'getUserConfigs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UI_MODE_IFRAME = 'iframe';
    public const UI_MODE_REDIRECT = 'redirect';
    public const UI_MODE_AUTO_REDIRECT = 'auto_redirect';
    public const UI_MODE_STANDALONE = 'standalone';
    public const LANGUAGE_EN = 'en';
    public const LANGUAGE_VI = 'vi';
    public const LANGUAGE_ZH = 'zh';
    public const AUTOMATIC_DATA_REFRESH_ON = 'ON';
    public const AUTOMATIC_DATA_REFRESH_OFF = 'OFF';
    public const AUTOMATIC_DATA_REFRESH_FORCED_ON = 'FORCED_ON';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUiModeAllowableValues()
    {
        return [
            self::UI_MODE_IFRAME,
            self::UI_MODE_REDIRECT,
            self::UI_MODE_AUTO_REDIRECT,
            self::UI_MODE_STANDALONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_EN,
            self::LANGUAGE_VI,
            self::LANGUAGE_ZH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutomaticDataRefreshAllowableValues()
    {
        return [
            self::AUTOMATIC_DATA_REFRESH_ON,
            self::AUTOMATIC_DATA_REFRESH_OFF,
            self::AUTOMATIC_DATA_REFRESH_FORCED_ON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('grant_type', $data ?? [], null);
        $this->setIfExists('response_type', $data ?? [], null);
        $this->setIfExists('response_mode', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('redirect_uri', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('link_mode', $data ?? [], null);
        $this->setIfExists('ui_mode', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('code_challenge', $data ?? [], null);
        $this->setIfExists('code_challenge_method', $data ?? [], null);
        $this->setIfExists('login_identity_id', $data ?? [], null);
        $this->setIfExists('customization_id', $data ?? [], null);
        $this->setIfExists('institution_id', $data ?? [], null);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('user_type', $data ?? [], null);
        $this->setIfExists('products_supported', $data ?? [], null);
        $this->setIfExists('products_requested', $data ?? [], null);
        $this->setIfExists('payment_instruction_id', $data ?? [], null);
        $this->setIfExists('automatic_data_refresh', $data ?? [], null);
        $this->setIfExists('institution_status', $data ?? [], null);
        $this->setIfExists('user_configs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['grant_type'] === null) {
            $invalidProperties[] = "'grant_type' can't be null";
        }
        if ((mb_strlen($this->container['grant_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'grant_type', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['response_type'] === null) {
            $invalidProperties[] = "'response_type' can't be null";
        }
        if ((mb_strlen($this->container['response_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'response_type', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['response_mode'] === null) {
            $invalidProperties[] = "'response_mode' can't be null";
        }
        if ((mb_strlen($this->container['response_mode']) > 100)) {
            $invalidProperties[] = "invalid value for 'response_mode', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['user_id']) && (mb_strlen($this->container['user_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'user_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['user_id']) && (mb_strlen($this->container['user_id']) < 4)) {
            $invalidProperties[] = "invalid value for 'user_id', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ((mb_strlen($this->container['client_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['client_id']) < 4)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be bigger than or equal to 4.";
        }

        if ($this->container['redirect_uri'] === null) {
            $invalidProperties[] = "'redirect_uri' can't be null";
        }
        if ((mb_strlen($this->container['redirect_uri']) > 500)) {
            $invalidProperties[] = "invalid value for 'redirect_uri', the character length must be smaller than or equal to 500.";
        }

        if ((mb_strlen($this->container['redirect_uri']) < 4)) {
            $invalidProperties[] = "invalid value for 'redirect_uri', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 100)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['scope']) && (mb_strlen($this->container['scope']) > 500)) {
            $invalidProperties[] = "invalid value for 'scope', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['link_mode']) && (mb_strlen($this->container['link_mode']) > 100)) {
            $invalidProperties[] = "invalid value for 'link_mode', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getUiModeAllowableValues();
        if (!is_null($this->container['ui_mode']) && !in_array($this->container['ui_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ui_mode', must be one of '%s'",
                $this->container['ui_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'language', must be one of '%s'",
                $this->container['language'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 3)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['code_challenge']) && (mb_strlen($this->container['code_challenge']) > 100)) {
            $invalidProperties[] = "invalid value for 'code_challenge', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['code_challenge_method']) && (mb_strlen($this->container['code_challenge_method']) > 100)) {
            $invalidProperties[] = "invalid value for 'code_challenge_method', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['login_identity_id']) && (mb_strlen($this->container['login_identity_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'login_identity_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['customization_id']) && (mb_strlen($this->container['customization_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'customization_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['institution_id']) && (mb_strlen($this->container['institution_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'institution_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['payment_instruction_id']) && (mb_strlen($this->container['payment_instruction_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'payment_instruction_id', the character length must be smaller than or equal to 100.";
        }

        $allowedValues = $this->getAutomaticDataRefreshAllowableValues();
        if (!is_null($this->container['automatic_data_refresh']) && !in_array($this->container['automatic_data_refresh'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'automatic_data_refresh', must be one of '%s'",
                $this->container['automatic_data_refresh'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['automatic_data_refresh']) && (mb_strlen($this->container['automatic_data_refresh']) > 100)) {
            $invalidProperties[] = "invalid value for 'automatic_data_refresh', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['institution_status']) && (mb_strlen($this->container['institution_status']) > 100)) {
            $invalidProperties[] = "invalid value for 'institution_status', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grant_type
     *
     * @return string
     */
    public function getGrantType()
    {
        return $this->container['grant_type'];
    }

    /**
     * Sets grant_type
     *
     * @param string $grant_type support only client_credentials
     *
     * @return self
     */
    public function setGrantType($grant_type)
    {
        if (is_null($grant_type)) {
            throw new \InvalidArgumentException('non-nullable grant_type cannot be null');
        }
        if ((mb_strlen($grant_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $grant_type when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['grant_type'] = $grant_type;

        return $this;
    }

    /**
     * Gets response_type
     *
     * @return string
     */
    public function getResponseType()
    {
        return $this->container['response_type'];
    }

    /**
     * Sets response_type
     *
     * @param string $response_type response_type
     *
     * @return self
     */
    public function setResponseType($response_type)
    {
        if (is_null($response_type)) {
            throw new \InvalidArgumentException('non-nullable response_type cannot be null');
        }
        if ((mb_strlen($response_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $response_type when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['response_type'] = $response_type;

        return $this;
    }

    /**
     * Gets response_mode
     *
     * @return string
     */
    public function getResponseMode()
    {
        return $this->container['response_mode'];
    }

    /**
     * Sets response_mode
     *
     * @param string $response_mode response_mode
     *
     * @return self
     */
    public function setResponseMode($response_mode)
    {
        if (is_null($response_mode)) {
            throw new \InvalidArgumentException('non-nullable response_mode cannot be null');
        }
        if ((mb_strlen($response_mode) > 100)) {
            throw new \InvalidArgumentException('invalid length for $response_mode when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['response_mode'] = $response_mode;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id required when creating new Link, ignored when updating existing Link
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        if ((mb_strlen($user_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $user_id when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($user_id) < 4)) {
            throw new \InvalidArgumentException('invalid length for $user_id when calling LinkTokenRequest., must be bigger than or equal to 4.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        if ((mb_strlen($client_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($client_id) < 4)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling LinkTokenRequest., must be bigger than or equal to 4.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string $redirect_uri redirect_uri
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        if (is_null($redirect_uri)) {
            throw new \InvalidArgumentException('non-nullable redirect_uri cannot be null');
        }
        if ((mb_strlen($redirect_uri) > 500)) {
            throw new \InvalidArgumentException('invalid length for $redirect_uri when calling LinkTokenRequest., must be smaller than or equal to 500.');
        }
        if ((mb_strlen($redirect_uri) < 4)) {
            throw new \InvalidArgumentException('invalid length for $redirect_uri when calling LinkTokenRequest., must be bigger than or equal to 4.');
        }

        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        if ((mb_strlen($state) > 100)) {
            throw new \InvalidArgumentException('invalid length for $state when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope scope
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        if ((mb_strlen($scope) > 500)) {
            throw new \InvalidArgumentException('invalid length for $scope when calling LinkTokenRequest., must be smaller than or equal to 500.');
        }

        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets link_mode
     *
     * @return string|null
     */
    public function getLinkMode()
    {
        return $this->container['link_mode'];
    }

    /**
     * Sets link_mode
     *
     * @param string|null $link_mode Space separated list of the tags of the institutions to view.
     *
     * @return self
     */
    public function setLinkMode($link_mode)
    {
        if (is_null($link_mode)) {
            throw new \InvalidArgumentException('non-nullable link_mode cannot be null');
        }
        if ((mb_strlen($link_mode) > 100)) {
            throw new \InvalidArgumentException('invalid length for $link_mode when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['link_mode'] = $link_mode;

        return $this;
    }

    /**
     * Gets ui_mode
     *
     * @return string|null
     */
    public function getUiMode()
    {
        return $this->container['ui_mode'];
    }

    /**
     * Sets ui_mode
     *
     * @param string|null $ui_mode The UI mode link is intended to be used in - \"iframe\", \"auto_redirect\", \"redirect\" or \"standalone\"
     *
     * @return self
     */
    public function setUiMode($ui_mode)
    {
        if (is_null($ui_mode)) {
            throw new \InvalidArgumentException('non-nullable ui_mode cannot be null');
        }
        $allowedValues = $this->getUiModeAllowableValues();
        if (!in_array($ui_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ui_mode', must be one of '%s'",
                    $ui_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ui_mode'] = $ui_mode;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language ISO639-1 language code. Language to display when user open the link, default to English (en) if not specified
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'language', must be one of '%s'",
                    $language,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($language) > 3)) {
            throw new \InvalidArgumentException('invalid length for $language when calling LinkTokenRequest., must be smaller than or equal to 3.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets code_challenge
     *
     * @return string|null
     */
    public function getCodeChallenge()
    {
        return $this->container['code_challenge'];
    }

    /**
     * Sets code_challenge
     *
     * @param string|null $code_challenge code_challenge
     *
     * @return self
     */
    public function setCodeChallenge($code_challenge)
    {
        if (is_null($code_challenge)) {
            throw new \InvalidArgumentException('non-nullable code_challenge cannot be null');
        }
        if ((mb_strlen($code_challenge) > 100)) {
            throw new \InvalidArgumentException('invalid length for $code_challenge when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['code_challenge'] = $code_challenge;

        return $this;
    }

    /**
     * Gets code_challenge_method
     *
     * @return string|null
     */
    public function getCodeChallengeMethod()
    {
        return $this->container['code_challenge_method'];
    }

    /**
     * Sets code_challenge_method
     *
     * @param string|null $code_challenge_method code_challenge_method
     *
     * @return self
     */
    public function setCodeChallengeMethod($code_challenge_method)
    {
        if (is_null($code_challenge_method)) {
            throw new \InvalidArgumentException('non-nullable code_challenge_method cannot be null');
        }
        if ((mb_strlen($code_challenge_method) > 100)) {
            throw new \InvalidArgumentException('invalid length for $code_challenge_method when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['code_challenge_method'] = $code_challenge_method;

        return $this;
    }

    /**
     * Gets login_identity_id
     *
     * @return string|null
     */
    public function getLoginIdentityId()
    {
        return $this->container['login_identity_id'];
    }

    /**
     * Sets login_identity_id
     *
     * @param string|null $login_identity_id use this to update a specific login identity
     *
     * @return self
     */
    public function setLoginIdentityId($login_identity_id)
    {
        if (is_null($login_identity_id)) {
            throw new \InvalidArgumentException('non-nullable login_identity_id cannot be null');
        }
        if ((mb_strlen($login_identity_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $login_identity_id when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['login_identity_id'] = $login_identity_id;

        return $this;
    }

    /**
     * Gets customization_id
     *
     * @return string|null
     */
    public function getCustomizationId()
    {
        return $this->container['customization_id'];
    }

    /**
     * Sets customization_id
     *
     * @param string|null $customization_id The customization id if the customer wishes to embed it into link token for spawning link with their choice of stuffs
     *
     * @return self
     */
    public function setCustomizationId($customization_id)
    {
        if (is_null($customization_id)) {
            throw new \InvalidArgumentException('non-nullable customization_id cannot be null');
        }
        if ((mb_strlen($customization_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $customization_id when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['customization_id'] = $customization_id;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string|null
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string|null $institution_id Institution to preselect
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        if (is_null($institution_id)) {
            throw new \InvalidArgumentException('non-nullable institution_id cannot be null');
        }
        if ((mb_strlen($institution_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $institution_id when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[]|null $countries institution's country filter
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string[]|null
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string[]|null $user_type institution's supported user_type filter
     *
     * @return self
     */
    public function setUserType($user_type)
    {
        if (is_null($user_type)) {
            throw new \InvalidArgumentException('non-nullable user_type cannot be null');
        }
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets products_supported
     *
     * @return string[]|null
     */
    public function getProductsSupported()
    {
        return $this->container['products_supported'];
    }

    /**
     * Sets products_supported
     *
     * @param string[]|null $products_supported institution's supported product filter
     *
     * @return self
     */
    public function setProductsSupported($products_supported)
    {
        if (is_null($products_supported)) {
            throw new \InvalidArgumentException('non-nullable products_supported cannot be null');
        }
        $this->container['products_supported'] = $products_supported;

        return $this;
    }

    /**
     * Gets products_requested
     *
     * @return string[]|null
     */
    public function getProductsRequested()
    {
        return $this->container['products_requested'];
    }

    /**
     * Sets products_requested
     *
     * @param string[]|null $products_requested products that is requested
     *
     * @return self
     */
    public function setProductsRequested($products_requested)
    {
        if (is_null($products_requested)) {
            throw new \InvalidArgumentException('non-nullable products_requested cannot be null');
        }
        $this->container['products_requested'] = $products_requested;

        return $this;
    }

    /**
     * Gets payment_instruction_id
     *
     * @return string|null
     */
    public function getPaymentInstructionId()
    {
        return $this->container['payment_instruction_id'];
    }

    /**
     * Sets payment_instruction_id
     *
     * @param string|null $payment_instruction_id The identifier returned after creating payment instruction
     *
     * @return self
     */
    public function setPaymentInstructionId($payment_instruction_id)
    {
        if (is_null($payment_instruction_id)) {
            throw new \InvalidArgumentException('non-nullable payment_instruction_id cannot be null');
        }
        if ((mb_strlen($payment_instruction_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $payment_instruction_id when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['payment_instruction_id'] = $payment_instruction_id;

        return $this;
    }

    /**
     * Gets automatic_data_refresh
     *
     * @return string|null
     */
    public function getAutomaticDataRefresh()
    {
        return $this->container['automatic_data_refresh'];
    }

    /**
     * Sets automatic_data_refresh
     *
     * @param string|null $automatic_data_refresh Controls the behavior of the automatic data refresh checkbox
     *
     * @return self
     */
    public function setAutomaticDataRefresh($automatic_data_refresh)
    {
        if (is_null($automatic_data_refresh)) {
            throw new \InvalidArgumentException('non-nullable automatic_data_refresh cannot be null');
        }
        $allowedValues = $this->getAutomaticDataRefreshAllowableValues();
        if (!in_array($automatic_data_refresh, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'automatic_data_refresh', must be one of '%s'",
                    $automatic_data_refresh,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($automatic_data_refresh) > 100)) {
            throw new \InvalidArgumentException('invalid length for $automatic_data_refresh when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['automatic_data_refresh'] = $automatic_data_refresh;

        return $this;
    }

    /**
     * Gets institution_status
     *
     * @return string|null
     */
    public function getInstitutionStatus()
    {
        return $this->container['institution_status'];
    }

    /**
     * Sets institution_status
     *
     * @param string|null $institution_status institution's status filter
     *
     * @return self
     */
    public function setInstitutionStatus($institution_status)
    {
        if (is_null($institution_status)) {
            throw new \InvalidArgumentException('non-nullable institution_status cannot be null');
        }
        if ((mb_strlen($institution_status) > 100)) {
            throw new \InvalidArgumentException('invalid length for $institution_status when calling LinkTokenRequest., must be smaller than or equal to 100.');
        }

        $this->container['institution_status'] = $institution_status;

        return $this;
    }

    /**
     * Gets user_configs
     *
     * @return \FinversePhp\Model\LinkTokenUserConfigs|null
     */
    public function getUserConfigs()
    {
        return $this->container['user_configs'];
    }

    /**
     * Sets user_configs
     *
     * @param \FinversePhp\Model\LinkTokenUserConfigs|null $user_configs user_configs
     *
     * @return self
     */
    public function setUserConfigs($user_configs)
    {
        if (is_null($user_configs)) {
            throw new \InvalidArgumentException('non-nullable user_configs cannot be null');
        }
        $this->container['user_configs'] = $user_configs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


