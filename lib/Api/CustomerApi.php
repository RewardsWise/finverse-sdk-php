<?php
/**
 * CustomerApi
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use FinversePhp\ApiException;
use FinversePhp\Configuration;
use FinversePhp\FormDataProcessor;
use FinversePhp\HeaderSelector;
use FinversePhp\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'authorizeMandate' => [
            'application/json',
        ],
        'createMandate' => [
            'application/json',
        ],
        'createPayment' => [
            'application/json',
        ],
        'createPaymentAccount' => [
            'application/json',
        ],
        'createPaymentInstruction' => [
            'application/json',
        ],
        'createPaymentUser' => [
            'application/json',
        ],
        'deletePaymentAccount' => [
            'application/json',
        ],
        'generateLinkToken' => [
            'application/json',
        ],
        'getInstitution' => [
            'application/json',
        ],
        'getLineItemsForDisplay' => [
            'application/json',
        ],
        'getLoginIdentityById' => [
            'application/json',
        ],
        'getLoginIdentityHistory' => [
            'application/json',
        ],
        'getMandate' => [
            'application/json',
        ],
        'getMandateAuth' => [
            'application/json',
        ],
        'getMandateAuthLink' => [
            'application/json',
        ],
        'getPayment' => [
            'application/json',
        ],
        'getPaymentInstruction' => [
            'application/json',
        ],
        'getPaymentUser' => [
            'application/json',
        ],
        'listInstitutions' => [
            'application/json',
        ],
        'listPaymentAccounts' => [
            'application/json',
        ],
        'listPaymentAccountsWithEnrichedData' => [
            'application/json',
        ],
        'refreshToken' => [
            'application/json',
        ],
        'setMandateInstitution' => [
            'application/json',
        ],
        'submitAuthChecklist' => [
            'application/json',
        ],
        'updatePayment' => [
            'application/json',
        ],
        'updateTestPaymentStatus' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authorizeMandate
     *
     * @param  string $mandate_id The mandate_id that is being authorized (required)
     * @param  \FinversePhp\Model\AuthorizeMandateRequest $authorize_mandate_request request body for authorizing a mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function authorizeMandate($mandate_id, $authorize_mandate_request, string $contentType = self::contentTypes['authorizeMandate'][0])
    {
        list($response) = $this->authorizeMandateWithHttpInfo($mandate_id, $authorize_mandate_request, $contentType);
        return $response;
    }

    /**
     * Operation authorizeMandateWithHttpInfo
     *
     * @param  string $mandate_id The mandate_id that is being authorized (required)
     * @param  \FinversePhp\Model\AuthorizeMandateRequest $authorize_mandate_request request body for authorizing a mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizeMandateWithHttpInfo($mandate_id, $authorize_mandate_request, string $contentType = self::contentTypes['authorizeMandate'][0])
    {
        $request = $this->authorizeMandateRequest($mandate_id, $authorize_mandate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetMandateResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetMandateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetMandateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation authorizeMandateAsync
     *
     * @param  string $mandate_id The mandate_id that is being authorized (required)
     * @param  \FinversePhp\Model\AuthorizeMandateRequest $authorize_mandate_request request body for authorizing a mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeMandateAsync($mandate_id, $authorize_mandate_request, string $contentType = self::contentTypes['authorizeMandate'][0])
    {
        return $this->authorizeMandateAsyncWithHttpInfo($mandate_id, $authorize_mandate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizeMandateAsyncWithHttpInfo
     *
     * @param  string $mandate_id The mandate_id that is being authorized (required)
     * @param  \FinversePhp\Model\AuthorizeMandateRequest $authorize_mandate_request request body for authorizing a mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizeMandateAsyncWithHttpInfo($mandate_id, $authorize_mandate_request, string $contentType = self::contentTypes['authorizeMandate'][0])
    {
        $returnType = '\FinversePhp\Model\GetMandateResponse';
        $request = $this->authorizeMandateRequest($mandate_id, $authorize_mandate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorizeMandate'
     *
     * @param  string $mandate_id The mandate_id that is being authorized (required)
     * @param  \FinversePhp\Model\AuthorizeMandateRequest $authorize_mandate_request request body for authorizing a mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorizeMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authorizeMandateRequest($mandate_id, $authorize_mandate_request, string $contentType = self::contentTypes['authorizeMandate'][0])
    {

        // verify the required parameter 'mandate_id' is set
        if ($mandate_id === null || (is_array($mandate_id) && count($mandate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mandate_id when calling authorizeMandate'
            );
        }

        // verify the required parameter 'authorize_mandate_request' is set
        if ($authorize_mandate_request === null || (is_array($authorize_mandate_request) && count($authorize_mandate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorize_mandate_request when calling authorizeMandate'
            );
        }


        $resourcePath = '/mandates/{mandateId}/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mandate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mandateId' . '}',
                ObjectSerializer::toPathValue($mandate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($authorize_mandate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($authorize_mandate_request));
            } else {
                $httpBody = $authorize_mandate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMandate
     *
     * @param  \FinversePhp\Model\CreateMandateRequest $create_mandate_request request body for creating mandate (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\CreateMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createMandate($create_mandate_request, $idempotency_key = null, string $contentType = self::contentTypes['createMandate'][0])
    {
        list($response) = $this->createMandateWithHttpInfo($create_mandate_request, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation createMandateWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreateMandateRequest $create_mandate_request request body for creating mandate (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\CreateMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMandateWithHttpInfo($create_mandate_request, $idempotency_key = null, string $contentType = self::contentTypes['createMandate'][0])
    {
        $request = $this->createMandateRequest($create_mandate_request, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\CreateMandateResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\CreateMandateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\CreateMandateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createMandateAsync
     *
     * @param  \FinversePhp\Model\CreateMandateRequest $create_mandate_request request body for creating mandate (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMandateAsync($create_mandate_request, $idempotency_key = null, string $contentType = self::contentTypes['createMandate'][0])
    {
        return $this->createMandateAsyncWithHttpInfo($create_mandate_request, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMandateAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreateMandateRequest $create_mandate_request request body for creating mandate (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMandateAsyncWithHttpInfo($create_mandate_request, $idempotency_key = null, string $contentType = self::contentTypes['createMandate'][0])
    {
        $returnType = '\FinversePhp\Model\CreateMandateResponse';
        $request = $this->createMandateRequest($create_mandate_request, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMandate'
     *
     * @param  \FinversePhp\Model\CreateMandateRequest $create_mandate_request request body for creating mandate (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMandateRequest($create_mandate_request, $idempotency_key = null, string $contentType = self::contentTypes['createMandate'][0])
    {

        // verify the required parameter 'create_mandate_request' is set
        if ($create_mandate_request === null || (is_array($create_mandate_request) && count($create_mandate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_mandate_request when calling createMandate'
            );
        }



        $resourcePath = '/mandates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_mandate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_mandate_request));
            } else {
                $httpBody = $create_mandate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPayment
     *
     * @param  \FinversePhp\Model\CreatePaymentRequest $create_payment_request request body for creating payment (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createPayment($create_payment_request, $idempotency_key = null, string $contentType = self::contentTypes['createPayment'][0])
    {
        list($response) = $this->createPaymentWithHttpInfo($create_payment_request, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentRequest $create_payment_request request body for creating payment (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentWithHttpInfo($create_payment_request, $idempotency_key = null, string $contentType = self::contentTypes['createPayment'][0])
    {
        $request = $this->createPaymentRequest($create_payment_request, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentAsync
     *
     * @param  \FinversePhp\Model\CreatePaymentRequest $create_payment_request request body for creating payment (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAsync($create_payment_request, $idempotency_key = null, string $contentType = self::contentTypes['createPayment'][0])
    {
        return $this->createPaymentAsyncWithHttpInfo($create_payment_request, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentRequest $create_payment_request request body for creating payment (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAsyncWithHttpInfo($create_payment_request, $idempotency_key = null, string $contentType = self::contentTypes['createPayment'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentResponse';
        $request = $this->createPaymentRequest($create_payment_request, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPayment'
     *
     * @param  \FinversePhp\Model\CreatePaymentRequest $create_payment_request request body for creating payment (required)
     * @param  string|null $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentRequest($create_payment_request, $idempotency_key = null, string $contentType = self::contentTypes['createPayment'][0])
    {

        // verify the required parameter 'create_payment_request' is set
        if ($create_payment_request === null || (is_array($create_payment_request) && count($create_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payment_request when calling createPayment'
            );
        }



        $resourcePath = '/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_request));
            } else {
                $httpBody = $create_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentAccount
     *
     * @param  \FinversePhp\Model\CreatePaymentAccountRequest $create_payment_account_request request body for creating payment account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentAccount'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentAccountDetails|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createPaymentAccount($create_payment_account_request, string $contentType = self::contentTypes['createPaymentAccount'][0])
    {
        list($response) = $this->createPaymentAccountWithHttpInfo($create_payment_account_request, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentAccountWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentAccountRequest $create_payment_account_request request body for creating payment account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentAccount'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentAccountDetails|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentAccountWithHttpInfo($create_payment_account_request, string $contentType = self::contentTypes['createPaymentAccount'][0])
    {
        $request = $this->createPaymentAccountRequest($create_payment_account_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentAccountDetails',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentAccountDetails',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentAccountDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentAccountAsync
     *
     * @param  \FinversePhp\Model\CreatePaymentAccountRequest $create_payment_account_request request body for creating payment account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAccountAsync($create_payment_account_request, string $contentType = self::contentTypes['createPaymentAccount'][0])
    {
        return $this->createPaymentAccountAsyncWithHttpInfo($create_payment_account_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentAccountAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentAccountRequest $create_payment_account_request request body for creating payment account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentAccountAsyncWithHttpInfo($create_payment_account_request, string $contentType = self::contentTypes['createPaymentAccount'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentAccountDetails';
        $request = $this->createPaymentAccountRequest($create_payment_account_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentAccount'
     *
     * @param  \FinversePhp\Model\CreatePaymentAccountRequest $create_payment_account_request request body for creating payment account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentAccountRequest($create_payment_account_request, string $contentType = self::contentTypes['createPaymentAccount'][0])
    {

        // verify the required parameter 'create_payment_account_request' is set
        if ($create_payment_account_request === null || (is_array($create_payment_account_request) && count($create_payment_account_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payment_account_request when calling createPaymentAccount'
            );
        }


        $resourcePath = '/payment_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_account_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_account_request));
            } else {
                $httpBody = $create_payment_account_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentInstruction
     *
     * @param  \FinversePhp\Model\CustomerPaymentInstruction $payment_instruction Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\CreatePaymentInstructionResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse
     */
    public function createPaymentInstruction($payment_instruction, string $contentType = self::contentTypes['createPaymentInstruction'][0])
    {
        list($response) = $this->createPaymentInstructionWithHttpInfo($payment_instruction, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentInstructionWithHttpInfo
     *
     * @param  \FinversePhp\Model\CustomerPaymentInstruction $payment_instruction Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\CreatePaymentInstructionResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentInstructionWithHttpInfo($payment_instruction, string $contentType = self::contentTypes['createPaymentInstruction'][0])
    {
        $request = $this->createPaymentInstructionRequest($payment_instruction, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\CreatePaymentInstructionResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\CreatePaymentInstructionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\CreatePaymentInstructionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentInstructionAsync
     *
     * @param  \FinversePhp\Model\CustomerPaymentInstruction $payment_instruction Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentInstructionAsync($payment_instruction, string $contentType = self::contentTypes['createPaymentInstruction'][0])
    {
        return $this->createPaymentInstructionAsyncWithHttpInfo($payment_instruction, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentInstructionAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\CustomerPaymentInstruction $payment_instruction Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentInstructionAsyncWithHttpInfo($payment_instruction, string $contentType = self::contentTypes['createPaymentInstruction'][0])
    {
        $returnType = '\FinversePhp\Model\CreatePaymentInstructionResponse';
        $request = $this->createPaymentInstructionRequest($payment_instruction, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentInstruction'
     *
     * @param  \FinversePhp\Model\CustomerPaymentInstruction $payment_instruction Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentInstructionRequest($payment_instruction, string $contentType = self::contentTypes['createPaymentInstruction'][0])
    {

        // verify the required parameter 'payment_instruction' is set
        if ($payment_instruction === null || (is_array($payment_instruction) && count($payment_instruction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_instruction when calling createPaymentInstruction'
            );
        }


        $resourcePath = '/payments/instruction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment_instruction)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment_instruction));
            } else {
                $httpBody = $payment_instruction;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentUser
     *
     * @param  \FinversePhp\Model\CreatePaymentUserRequest $create_payment_user_request request body for creating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentUser|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createPaymentUser($create_payment_user_request, string $contentType = self::contentTypes['createPaymentUser'][0])
    {
        list($response) = $this->createPaymentUserWithHttpInfo($create_payment_user_request, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentUserWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentUserRequest $create_payment_user_request request body for creating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentUser|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentUserWithHttpInfo($create_payment_user_request, string $contentType = self::contentTypes['createPaymentUser'][0])
    {
        $request = $this->createPaymentUserRequest($create_payment_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentUser',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentUser',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentUserAsync
     *
     * @param  \FinversePhp\Model\CreatePaymentUserRequest $create_payment_user_request request body for creating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentUserAsync($create_payment_user_request, string $contentType = self::contentTypes['createPaymentUser'][0])
    {
        return $this->createPaymentUserAsyncWithHttpInfo($create_payment_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentUserAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentUserRequest $create_payment_user_request request body for creating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentUserAsyncWithHttpInfo($create_payment_user_request, string $contentType = self::contentTypes['createPaymentUser'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentUser';
        $request = $this->createPaymentUserRequest($create_payment_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentUser'
     *
     * @param  \FinversePhp\Model\CreatePaymentUserRequest $create_payment_user_request request body for creating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentUserRequest($create_payment_user_request, string $contentType = self::contentTypes['createPaymentUser'][0])
    {

        // verify the required parameter 'create_payment_user_request' is set
        if ($create_payment_user_request === null || (is_array($create_payment_user_request) && count($create_payment_user_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payment_user_request when calling createPaymentUser'
            );
        }


        $resourcePath = '/payment_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_user_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_user_request));
            } else {
                $httpBody = $create_payment_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaymentAccount
     *
     * @param  string $payment_account_id The payment account id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentAccount'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePaymentAccount($payment_account_id, string $contentType = self::contentTypes['deletePaymentAccount'][0])
    {
        $this->deletePaymentAccountWithHttpInfo($payment_account_id, $contentType);
    }

    /**
     * Operation deletePaymentAccountWithHttpInfo
     *
     * @param  string $payment_account_id The payment account id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentAccount'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentAccountWithHttpInfo($payment_account_id, string $contentType = self::contentTypes['deletePaymentAccount'][0])
    {
        $request = $this->deletePaymentAccountRequest($payment_account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deletePaymentAccountAsync
     *
     * @param  string $payment_account_id The payment account id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentAccountAsync($payment_account_id, string $contentType = self::contentTypes['deletePaymentAccount'][0])
    {
        return $this->deletePaymentAccountAsyncWithHttpInfo($payment_account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentAccountAsyncWithHttpInfo
     *
     * @param  string $payment_account_id The payment account id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentAccountAsyncWithHttpInfo($payment_account_id, string $contentType = self::contentTypes['deletePaymentAccount'][0])
    {
        $returnType = '';
        $request = $this->deletePaymentAccountRequest($payment_account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaymentAccount'
     *
     * @param  string $payment_account_id The payment account id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePaymentAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePaymentAccountRequest($payment_account_id, string $contentType = self::contentTypes['deletePaymentAccount'][0])
    {

        // verify the required parameter 'payment_account_id' is set
        if ($payment_account_id === null || (is_array($payment_account_id) && count($payment_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_account_id when calling deletePaymentAccount'
            );
        }


        $resourcePath = '/payment_accounts/{paymentAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentAccountId' . '}',
                ObjectSerializer::toPathValue($payment_account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateLinkToken
     *
     * @param  \FinversePhp\Model\LinkTokenRequest $link_token_request token request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateLinkToken'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\LinkTokenResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2
     */
    public function generateLinkToken($link_token_request, string $contentType = self::contentTypes['generateLinkToken'][0])
    {
        list($response) = $this->generateLinkTokenWithHttpInfo($link_token_request, $contentType);
        return $response;
    }

    /**
     * Operation generateLinkTokenWithHttpInfo
     *
     * @param  \FinversePhp\Model\LinkTokenRequest $link_token_request token request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateLinkToken'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\LinkTokenResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateLinkTokenWithHttpInfo($link_token_request, string $contentType = self::contentTypes['generateLinkToken'][0])
    {
        $request = $this->generateLinkTokenRequest($link_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\LinkTokenResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\LinkTokenResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\LinkTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation generateLinkTokenAsync
     *
     * @param  \FinversePhp\Model\LinkTokenRequest $link_token_request token request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateLinkToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateLinkTokenAsync($link_token_request, string $contentType = self::contentTypes['generateLinkToken'][0])
    {
        return $this->generateLinkTokenAsyncWithHttpInfo($link_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateLinkTokenAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\LinkTokenRequest $link_token_request token request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateLinkToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateLinkTokenAsyncWithHttpInfo($link_token_request, string $contentType = self::contentTypes['generateLinkToken'][0])
    {
        $returnType = '\FinversePhp\Model\LinkTokenResponse';
        $request = $this->generateLinkTokenRequest($link_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateLinkToken'
     *
     * @param  \FinversePhp\Model\LinkTokenRequest $link_token_request token request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateLinkToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateLinkTokenRequest($link_token_request, string $contentType = self::contentTypes['generateLinkToken'][0])
    {

        // verify the required parameter 'link_token_request' is set
        if ($link_token_request === null || (is_array($link_token_request) && count($link_token_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $link_token_request when calling generateLinkToken'
            );
        }


        $resourcePath = '/link/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($link_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($link_token_request));
            } else {
                $httpBody = $link_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstitution
     *
     * @param  string $institution_id The institution id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitution'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\Institution|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2
     */
    public function getInstitution($institution_id, string $contentType = self::contentTypes['getInstitution'][0])
    {
        list($response) = $this->getInstitutionWithHttpInfo($institution_id, $contentType);
        return $response;
    }

    /**
     * Operation getInstitutionWithHttpInfo
     *
     * @param  string $institution_id The institution id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitution'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\Institution|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstitutionWithHttpInfo($institution_id, string $contentType = self::contentTypes['getInstitution'][0])
    {
        $request = $this->getInstitutionRequest($institution_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\Institution',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\Institution',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\Institution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getInstitutionAsync
     *
     * @param  string $institution_id The institution id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionAsync($institution_id, string $contentType = self::contentTypes['getInstitution'][0])
    {
        return $this->getInstitutionAsyncWithHttpInfo($institution_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstitutionAsyncWithHttpInfo
     *
     * @param  string $institution_id The institution id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionAsyncWithHttpInfo($institution_id, string $contentType = self::contentTypes['getInstitution'][0])
    {
        $returnType = '\FinversePhp\Model\Institution';
        $request = $this->getInstitutionRequest($institution_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstitution'
     *
     * @param  string $institution_id The institution id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstitutionRequest($institution_id, string $contentType = self::contentTypes['getInstitution'][0])
    {

        // verify the required parameter 'institution_id' is set
        if ($institution_id === null || (is_array($institution_id) && count($institution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $institution_id when calling getInstitution'
            );
        }


        $resourcePath = '/institutions/{institutionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($institution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'institutionId' . '}',
                ObjectSerializer::toPathValue($institution_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLineItemsForDisplay
     *
     * @param  string $payment_type The payment type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLineItemsForDisplay'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetLineItemsForDisplayResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getLineItemsForDisplay($payment_type, string $contentType = self::contentTypes['getLineItemsForDisplay'][0])
    {
        list($response) = $this->getLineItemsForDisplayWithHttpInfo($payment_type, $contentType);
        return $response;
    }

    /**
     * Operation getLineItemsForDisplayWithHttpInfo
     *
     * @param  string $payment_type The payment type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLineItemsForDisplay'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetLineItemsForDisplayResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLineItemsForDisplayWithHttpInfo($payment_type, string $contentType = self::contentTypes['getLineItemsForDisplay'][0])
    {
        $request = $this->getLineItemsForDisplayRequest($payment_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetLineItemsForDisplayResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetLineItemsForDisplayResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetLineItemsForDisplayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getLineItemsForDisplayAsync
     *
     * @param  string $payment_type The payment type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLineItemsForDisplay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLineItemsForDisplayAsync($payment_type, string $contentType = self::contentTypes['getLineItemsForDisplay'][0])
    {
        return $this->getLineItemsForDisplayAsyncWithHttpInfo($payment_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLineItemsForDisplayAsyncWithHttpInfo
     *
     * @param  string $payment_type The payment type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLineItemsForDisplay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLineItemsForDisplayAsyncWithHttpInfo($payment_type, string $contentType = self::contentTypes['getLineItemsForDisplay'][0])
    {
        $returnType = '\FinversePhp\Model\GetLineItemsForDisplayResponse';
        $request = $this->getLineItemsForDisplayRequest($payment_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLineItemsForDisplay'
     *
     * @param  string $payment_type The payment type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLineItemsForDisplay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLineItemsForDisplayRequest($payment_type, string $contentType = self::contentTypes['getLineItemsForDisplay'][0])
    {

        // verify the required parameter 'payment_type' is set
        if ($payment_type === null || (is_array($payment_type) && count($payment_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_type when calling getLineItemsForDisplay'
            );
        }


        $resourcePath = '/calculate/line_items/{paymentType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_type !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentType' . '}',
                ObjectSerializer::toPathValue($payment_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoginIdentityById
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityById'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2
     */
    public function getLoginIdentityById($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityById'][0])
    {
        list($response) = $this->getLoginIdentityByIdWithHttpInfo($login_identity_id, $contentType);
        return $response;
    }

    /**
     * Operation getLoginIdentityByIdWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityById'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoginIdentityByIdWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityById'][0])
    {
        $request = $this->getLoginIdentityByIdRequest($login_identity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getLoginIdentityByIdAsync
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginIdentityByIdAsync($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityById'][0])
    {
        return $this->getLoginIdentityByIdAsyncWithHttpInfo($login_identity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoginIdentityByIdAsyncWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginIdentityByIdAsyncWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityById'][0])
    {
        $returnType = '\FinversePhp\Model\GetLoginIdentityByIdResponse';
        $request = $this->getLoginIdentityByIdRequest($login_identity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoginIdentityById'
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoginIdentityByIdRequest($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityById'][0])
    {

        // verify the required parameter 'login_identity_id' is set
        if ($login_identity_id === null || (is_array($login_identity_id) && count($login_identity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_identity_id when calling getLoginIdentityById'
            );
        }


        $resourcePath = '/login_identity/{loginIdentityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($login_identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loginIdentityId' . '}',
                ObjectSerializer::toPathValue($login_identity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoginIdentityHistory
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityHistory'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetLoginIdentityHistoryResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2
     */
    public function getLoginIdentityHistory($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityHistory'][0])
    {
        list($response) = $this->getLoginIdentityHistoryWithHttpInfo($login_identity_id, $contentType);
        return $response;
    }

    /**
     * Operation getLoginIdentityHistoryWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityHistory'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetLoginIdentityHistoryResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoginIdentityHistoryWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityHistory'][0])
    {
        $request = $this->getLoginIdentityHistoryRequest($login_identity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetLoginIdentityHistoryResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetLoginIdentityHistoryResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetLoginIdentityHistoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getLoginIdentityHistoryAsync
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginIdentityHistoryAsync($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityHistory'][0])
    {
        return $this->getLoginIdentityHistoryAsyncWithHttpInfo($login_identity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoginIdentityHistoryAsyncWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoginIdentityHistoryAsyncWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityHistory'][0])
    {
        $returnType = '\FinversePhp\Model\GetLoginIdentityHistoryResponse';
        $request = $this->getLoginIdentityHistoryRequest($login_identity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoginIdentityHistory'
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoginIdentityHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoginIdentityHistoryRequest($login_identity_id, string $contentType = self::contentTypes['getLoginIdentityHistory'][0])
    {

        // verify the required parameter 'login_identity_id' is set
        if ($login_identity_id === null || (is_array($login_identity_id) && count($login_identity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_identity_id when calling getLoginIdentityHistory'
            );
        }


        $resourcePath = '/login_identity/{loginIdentityId}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($login_identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loginIdentityId' . '}',
                ObjectSerializer::toPathValue($login_identity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMandate
     *
     * @param  string $mandate_id mandate id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getMandate($mandate_id, string $contentType = self::contentTypes['getMandate'][0])
    {
        list($response) = $this->getMandateWithHttpInfo($mandate_id, $contentType);
        return $response;
    }

    /**
     * Operation getMandateWithHttpInfo
     *
     * @param  string $mandate_id mandate id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMandateWithHttpInfo($mandate_id, string $contentType = self::contentTypes['getMandate'][0])
    {
        $request = $this->getMandateRequest($mandate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetMandateResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetMandateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetMandateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getMandateAsync
     *
     * @param  string $mandate_id mandate id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMandateAsync($mandate_id, string $contentType = self::contentTypes['getMandate'][0])
    {
        return $this->getMandateAsyncWithHttpInfo($mandate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMandateAsyncWithHttpInfo
     *
     * @param  string $mandate_id mandate id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMandateAsyncWithHttpInfo($mandate_id, string $contentType = self::contentTypes['getMandate'][0])
    {
        $returnType = '\FinversePhp\Model\GetMandateResponse';
        $request = $this->getMandateRequest($mandate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMandate'
     *
     * @param  string $mandate_id mandate id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMandateRequest($mandate_id, string $contentType = self::contentTypes['getMandate'][0])
    {

        // verify the required parameter 'mandate_id' is set
        if ($mandate_id === null || (is_array($mandate_id) && count($mandate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mandate_id when calling getMandate'
            );
        }


        $resourcePath = '/mandates/{mandateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mandate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'mandateId' . '}',
                ObjectSerializer::toPathValue($mandate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMandateAuth
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuth'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetMandateAuthResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getMandateAuth(string $contentType = self::contentTypes['getMandateAuth'][0])
    {
        list($response) = $this->getMandateAuthWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getMandateAuthWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuth'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetMandateAuthResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMandateAuthWithHttpInfo(string $contentType = self::contentTypes['getMandateAuth'][0])
    {
        $request = $this->getMandateAuthRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetMandateAuthResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetMandateAuthResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetMandateAuthResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getMandateAuthAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMandateAuthAsync(string $contentType = self::contentTypes['getMandateAuth'][0])
    {
        return $this->getMandateAuthAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMandateAuthAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMandateAuthAsyncWithHttpInfo(string $contentType = self::contentTypes['getMandateAuth'][0])
    {
        $returnType = '\FinversePhp\Model\GetMandateAuthResponse';
        $request = $this->getMandateAuthRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMandateAuth'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMandateAuthRequest(string $contentType = self::contentTypes['getMandateAuth'][0])
    {


        $resourcePath = '/mandates/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMandateAuthLink
     *
     * @param  \FinversePhp\Model\GetMandateAuthLinkRequest $get_mandate_auth_link_request request body for mandate authorization link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuthLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetMandateAuthLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getMandateAuthLink($get_mandate_auth_link_request, string $contentType = self::contentTypes['getMandateAuthLink'][0])
    {
        list($response) = $this->getMandateAuthLinkWithHttpInfo($get_mandate_auth_link_request, $contentType);
        return $response;
    }

    /**
     * Operation getMandateAuthLinkWithHttpInfo
     *
     * @param  \FinversePhp\Model\GetMandateAuthLinkRequest $get_mandate_auth_link_request request body for mandate authorization link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuthLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetMandateAuthLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMandateAuthLinkWithHttpInfo($get_mandate_auth_link_request, string $contentType = self::contentTypes['getMandateAuthLink'][0])
    {
        $request = $this->getMandateAuthLinkRequest($get_mandate_auth_link_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetMandateAuthLinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetMandateAuthLinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetMandateAuthLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getMandateAuthLinkAsync
     *
     * @param  \FinversePhp\Model\GetMandateAuthLinkRequest $get_mandate_auth_link_request request body for mandate authorization link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuthLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMandateAuthLinkAsync($get_mandate_auth_link_request, string $contentType = self::contentTypes['getMandateAuthLink'][0])
    {
        return $this->getMandateAuthLinkAsyncWithHttpInfo($get_mandate_auth_link_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMandateAuthLinkAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\GetMandateAuthLinkRequest $get_mandate_auth_link_request request body for mandate authorization link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuthLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMandateAuthLinkAsyncWithHttpInfo($get_mandate_auth_link_request, string $contentType = self::contentTypes['getMandateAuthLink'][0])
    {
        $returnType = '\FinversePhp\Model\GetMandateAuthLinkResponse';
        $request = $this->getMandateAuthLinkRequest($get_mandate_auth_link_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMandateAuthLink'
     *
     * @param  \FinversePhp\Model\GetMandateAuthLinkRequest $get_mandate_auth_link_request request body for mandate authorization link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMandateAuthLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMandateAuthLinkRequest($get_mandate_auth_link_request, string $contentType = self::contentTypes['getMandateAuthLink'][0])
    {

        // verify the required parameter 'get_mandate_auth_link_request' is set
        if ($get_mandate_auth_link_request === null || (is_array($get_mandate_auth_link_request) && count($get_mandate_auth_link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_mandate_auth_link_request when calling getMandateAuthLink'
            );
        }


        $resourcePath = '/mandates/link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_mandate_auth_link_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_mandate_auth_link_request));
            } else {
                $httpBody = $get_mandate_auth_link_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayment
     *
     * @param  string $payment_id payment id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getPayment($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        list($response) = $this->getPaymentWithHttpInfo($payment_id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentWithHttpInfo
     *
     * @param  string $payment_id payment id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentWithHttpInfo($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        $request = $this->getPaymentRequest($payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentAsync
     *
     * @param  string $payment_id payment id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsync($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        return $this->getPaymentAsyncWithHttpInfo($payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAsyncWithHttpInfo
     *
     * @param  string $payment_id payment id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsyncWithHttpInfo($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentResponse';
        $request = $this->getPaymentRequest($payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayment'
     *
     * @param  string $payment_id payment id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentRequest($payment_id, string $contentType = self::contentTypes['getPayment'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getPayment'
            );
        }


        $resourcePath = '/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentInstruction
     *
     * @param  string $payment_instruction_id The id of a payment instruction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetPaymentInstructionsResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse
     */
    public function getPaymentInstruction($payment_instruction_id, string $contentType = self::contentTypes['getPaymentInstruction'][0])
    {
        list($response) = $this->getPaymentInstructionWithHttpInfo($payment_instruction_id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentInstructionWithHttpInfo
     *
     * @param  string $payment_instruction_id The id of a payment instruction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetPaymentInstructionsResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentInstructionWithHttpInfo($payment_instruction_id, string $contentType = self::contentTypes['getPaymentInstruction'][0])
    {
        $request = $this->getPaymentInstructionRequest($payment_instruction_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetPaymentInstructionsResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetPaymentInstructionsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetPaymentInstructionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentInstructionAsync
     *
     * @param  string $payment_instruction_id The id of a payment instruction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentInstructionAsync($payment_instruction_id, string $contentType = self::contentTypes['getPaymentInstruction'][0])
    {
        return $this->getPaymentInstructionAsyncWithHttpInfo($payment_instruction_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentInstructionAsyncWithHttpInfo
     *
     * @param  string $payment_instruction_id The id of a payment instruction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentInstructionAsyncWithHttpInfo($payment_instruction_id, string $contentType = self::contentTypes['getPaymentInstruction'][0])
    {
        $returnType = '\FinversePhp\Model\GetPaymentInstructionsResponse';
        $request = $this->getPaymentInstructionRequest($payment_instruction_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentInstruction'
     *
     * @param  string $payment_instruction_id The id of a payment instruction (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentInstruction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentInstructionRequest($payment_instruction_id, string $contentType = self::contentTypes['getPaymentInstruction'][0])
    {

        // verify the required parameter 'payment_instruction_id' is set
        if ($payment_instruction_id === null || (is_array($payment_instruction_id) && count($payment_instruction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_instruction_id when calling getPaymentInstruction'
            );
        }


        $resourcePath = '/payments/instruction/{paymentInstructionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_instruction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentInstructionId' . '}',
                ObjectSerializer::toPathValue($payment_instruction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentUser
     *
     * @param  string $payment_user_id payment_user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentUser|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getPaymentUser($payment_user_id, string $contentType = self::contentTypes['getPaymentUser'][0])
    {
        list($response) = $this->getPaymentUserWithHttpInfo($payment_user_id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentUserWithHttpInfo
     *
     * @param  string $payment_user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentUser|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentUserWithHttpInfo($payment_user_id, string $contentType = self::contentTypes['getPaymentUser'][0])
    {
        $request = $this->getPaymentUserRequest($payment_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentUser',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentUser',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentUserAsync
     *
     * @param  string $payment_user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentUserAsync($payment_user_id, string $contentType = self::contentTypes['getPaymentUser'][0])
    {
        return $this->getPaymentUserAsyncWithHttpInfo($payment_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentUserAsyncWithHttpInfo
     *
     * @param  string $payment_user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentUserAsyncWithHttpInfo($payment_user_id, string $contentType = self::contentTypes['getPaymentUser'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentUser';
        $request = $this->getPaymentUserRequest($payment_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentUser'
     *
     * @param  string $payment_user_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentUserRequest($payment_user_id, string $contentType = self::contentTypes['getPaymentUser'][0])
    {

        // verify the required parameter 'payment_user_id' is set
        if ($payment_user_id === null || (is_array($payment_user_id) && count($payment_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_user_id when calling getPaymentUser'
            );
        }


        $resourcePath = '/payment_users/{paymentUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentUserId' . '}',
                ObjectSerializer::toPathValue($payment_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInstitutions
     *
     * @param  string|null $country (Deprecated) The country the institution belongs to (optional)
     * @param  string[]|null $countries The countries the institution belongs to (optional)
     * @param  string|null $products_supported The products that this institution supports (optional)
     * @param  string|null $institution_type The type of institution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstitutions'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\Institution[]|\FinversePhp\Model\BadRequestModelV2
     */
    public function listInstitutions($country = null, $countries = null, $products_supported = null, $institution_type = null, string $contentType = self::contentTypes['listInstitutions'][0])
    {
        list($response) = $this->listInstitutionsWithHttpInfo($country, $countries, $products_supported, $institution_type, $contentType);
        return $response;
    }

    /**
     * Operation listInstitutionsWithHttpInfo
     *
     * @param  string|null $country (Deprecated) The country the institution belongs to (optional)
     * @param  string[]|null $countries The countries the institution belongs to (optional)
     * @param  string|null $products_supported The products that this institution supports (optional)
     * @param  string|null $institution_type The type of institution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstitutions'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\Institution[]|\FinversePhp\Model\BadRequestModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInstitutionsWithHttpInfo($country = null, $countries = null, $products_supported = null, $institution_type = null, string $contentType = self::contentTypes['listInstitutions'][0])
    {
        $request = $this->listInstitutionsRequest($country, $countries, $products_supported, $institution_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\Institution[]',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\Institution[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\Institution[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listInstitutionsAsync
     *
     * @param  string|null $country (Deprecated) The country the institution belongs to (optional)
     * @param  string[]|null $countries The countries the institution belongs to (optional)
     * @param  string|null $products_supported The products that this institution supports (optional)
     * @param  string|null $institution_type The type of institution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInstitutionsAsync($country = null, $countries = null, $products_supported = null, $institution_type = null, string $contentType = self::contentTypes['listInstitutions'][0])
    {
        return $this->listInstitutionsAsyncWithHttpInfo($country, $countries, $products_supported, $institution_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInstitutionsAsyncWithHttpInfo
     *
     * @param  string|null $country (Deprecated) The country the institution belongs to (optional)
     * @param  string[]|null $countries The countries the institution belongs to (optional)
     * @param  string|null $products_supported The products that this institution supports (optional)
     * @param  string|null $institution_type The type of institution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInstitutionsAsyncWithHttpInfo($country = null, $countries = null, $products_supported = null, $institution_type = null, string $contentType = self::contentTypes['listInstitutions'][0])
    {
        $returnType = '\FinversePhp\Model\Institution[]';
        $request = $this->listInstitutionsRequest($country, $countries, $products_supported, $institution_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInstitutions'
     *
     * @param  string|null $country (Deprecated) The country the institution belongs to (optional)
     * @param  string[]|null $countries The countries the institution belongs to (optional)
     * @param  string|null $products_supported The products that this institution supports (optional)
     * @param  string|null $institution_type The type of institution (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstitutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listInstitutionsRequest($country = null, $countries = null, $products_supported = null, $institution_type = null, string $contentType = self::contentTypes['listInstitutions'][0])
    {






        $resourcePath = '/institutions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $countries,
            'countries', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $products_supported,
            'products_supported', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $institution_type,
            'institution_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPaymentAccounts
     *
     * @param  string $payment_user_id The payment user id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccounts'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ListPaymentAccountsResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function listPaymentAccounts($payment_user_id, string $contentType = self::contentTypes['listPaymentAccounts'][0])
    {
        list($response) = $this->listPaymentAccountsWithHttpInfo($payment_user_id, $contentType);
        return $response;
    }

    /**
     * Operation listPaymentAccountsWithHttpInfo
     *
     * @param  string $payment_user_id The payment user id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccounts'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ListPaymentAccountsResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPaymentAccountsWithHttpInfo($payment_user_id, string $contentType = self::contentTypes['listPaymentAccounts'][0])
    {
        $request = $this->listPaymentAccountsRequest($payment_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ListPaymentAccountsResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ListPaymentAccountsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ListPaymentAccountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPaymentAccountsAsync
     *
     * @param  string $payment_user_id The payment user id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentAccountsAsync($payment_user_id, string $contentType = self::contentTypes['listPaymentAccounts'][0])
    {
        return $this->listPaymentAccountsAsyncWithHttpInfo($payment_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPaymentAccountsAsyncWithHttpInfo
     *
     * @param  string $payment_user_id The payment user id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentAccountsAsyncWithHttpInfo($payment_user_id, string $contentType = self::contentTypes['listPaymentAccounts'][0])
    {
        $returnType = '\FinversePhp\Model\ListPaymentAccountsResponse';
        $request = $this->listPaymentAccountsRequest($payment_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPaymentAccounts'
     *
     * @param  string $payment_user_id The payment user id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPaymentAccountsRequest($payment_user_id, string $contentType = self::contentTypes['listPaymentAccounts'][0])
    {

        // verify the required parameter 'payment_user_id' is set
        if ($payment_user_id === null || (is_array($payment_user_id) && count($payment_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_user_id when calling listPaymentAccounts'
            );
        }


        $resourcePath = '/payment_users/{paymentUserId}/payment_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentUserId' . '}',
                ObjectSerializer::toPathValue($payment_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPaymentAccountsWithEnrichedData
     *
     * @param  string|null $account_type The account_type to filter for (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccountsWithEnrichedData'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ListPaymentAccountsWithEnrichedDataResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function listPaymentAccountsWithEnrichedData($account_type = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPaymentAccountsWithEnrichedData'][0])
    {
        list($response) = $this->listPaymentAccountsWithEnrichedDataWithHttpInfo($account_type, $currencies, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation listPaymentAccountsWithEnrichedDataWithHttpInfo
     *
     * @param  string|null $account_type The account_type to filter for (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccountsWithEnrichedData'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ListPaymentAccountsWithEnrichedDataResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPaymentAccountsWithEnrichedDataWithHttpInfo($account_type = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPaymentAccountsWithEnrichedData'][0])
    {
        $request = $this->listPaymentAccountsWithEnrichedDataRequest($account_type, $currencies, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ListPaymentAccountsWithEnrichedDataResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ListPaymentAccountsWithEnrichedDataResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ListPaymentAccountsWithEnrichedDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPaymentAccountsWithEnrichedDataAsync
     *
     * @param  string|null $account_type The account_type to filter for (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccountsWithEnrichedData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentAccountsWithEnrichedDataAsync($account_type = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPaymentAccountsWithEnrichedData'][0])
    {
        return $this->listPaymentAccountsWithEnrichedDataAsyncWithHttpInfo($account_type, $currencies, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPaymentAccountsWithEnrichedDataAsyncWithHttpInfo
     *
     * @param  string|null $account_type The account_type to filter for (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccountsWithEnrichedData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentAccountsWithEnrichedDataAsyncWithHttpInfo($account_type = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPaymentAccountsWithEnrichedData'][0])
    {
        $returnType = '\FinversePhp\Model\ListPaymentAccountsWithEnrichedDataResponse';
        $request = $this->listPaymentAccountsWithEnrichedDataRequest($account_type, $currencies, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPaymentAccountsWithEnrichedData'
     *
     * @param  string|null $account_type The account_type to filter for (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentAccountsWithEnrichedData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPaymentAccountsWithEnrichedDataRequest($account_type = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPaymentAccountsWithEnrichedData'][0])
    {



        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling CustomerApi.listPaymentAccountsWithEnrichedData, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerApi.listPaymentAccountsWithEnrichedData, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerApi.listPaymentAccountsWithEnrichedData, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/payment_accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_type,
            'account_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshToken
     *
     * @param  \FinversePhp\Model\RefreshRequest $refresh_request The refresh token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\AccessTokenResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2
     */
    public function refreshToken($refresh_request, string $contentType = self::contentTypes['refreshToken'][0])
    {
        list($response) = $this->refreshTokenWithHttpInfo($refresh_request, $contentType);
        return $response;
    }

    /**
     * Operation refreshTokenWithHttpInfo
     *
     * @param  \FinversePhp\Model\RefreshRequest $refresh_request The refresh token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\AccessTokenResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshTokenWithHttpInfo($refresh_request, string $contentType = self::contentTypes['refreshToken'][0])
    {
        $request = $this->refreshTokenRequest($refresh_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\AccessTokenResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\AccessTokenResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\AccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation refreshTokenAsync
     *
     * @param  \FinversePhp\Model\RefreshRequest $refresh_request The refresh token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshTokenAsync($refresh_request, string $contentType = self::contentTypes['refreshToken'][0])
    {
        return $this->refreshTokenAsyncWithHttpInfo($refresh_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshTokenAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\RefreshRequest $refresh_request The refresh token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshTokenAsyncWithHttpInfo($refresh_request, string $contentType = self::contentTypes['refreshToken'][0])
    {
        $returnType = '\FinversePhp\Model\AccessTokenResponse';
        $request = $this->refreshTokenRequest($refresh_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshToken'
     *
     * @param  \FinversePhp\Model\RefreshRequest $refresh_request The refresh token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshTokenRequest($refresh_request, string $contentType = self::contentTypes['refreshToken'][0])
    {

        // verify the required parameter 'refresh_request' is set
        if ($refresh_request === null || (is_array($refresh_request) && count($refresh_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refresh_request when calling refreshToken'
            );
        }


        $resourcePath = '/auth/token/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refresh_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refresh_request));
            } else {
                $httpBody = $refresh_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMandateInstitution
     *
     * @param  \FinversePhp\Model\SetMandateInstitutionRequest $update_request request body for updating mandate institutionId and senderType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMandateInstitution'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\SetMandateInstitutionResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function setMandateInstitution($update_request, string $contentType = self::contentTypes['setMandateInstitution'][0])
    {
        list($response) = $this->setMandateInstitutionWithHttpInfo($update_request, $contentType);
        return $response;
    }

    /**
     * Operation setMandateInstitutionWithHttpInfo
     *
     * @param  \FinversePhp\Model\SetMandateInstitutionRequest $update_request request body for updating mandate institutionId and senderType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMandateInstitution'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\SetMandateInstitutionResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMandateInstitutionWithHttpInfo($update_request, string $contentType = self::contentTypes['setMandateInstitution'][0])
    {
        $request = $this->setMandateInstitutionRequest($update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\SetMandateInstitutionResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\SetMandateInstitutionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\SetMandateInstitutionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setMandateInstitutionAsync
     *
     * @param  \FinversePhp\Model\SetMandateInstitutionRequest $update_request request body for updating mandate institutionId and senderType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMandateInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMandateInstitutionAsync($update_request, string $contentType = self::contentTypes['setMandateInstitution'][0])
    {
        return $this->setMandateInstitutionAsyncWithHttpInfo($update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setMandateInstitutionAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\SetMandateInstitutionRequest $update_request request body for updating mandate institutionId and senderType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMandateInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMandateInstitutionAsyncWithHttpInfo($update_request, string $contentType = self::contentTypes['setMandateInstitution'][0])
    {
        $returnType = '\FinversePhp\Model\SetMandateInstitutionResponse';
        $request = $this->setMandateInstitutionRequest($update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMandateInstitution'
     *
     * @param  \FinversePhp\Model\SetMandateInstitutionRequest $update_request request body for updating mandate institutionId and senderType (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setMandateInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setMandateInstitutionRequest($update_request, string $contentType = self::contentTypes['setMandateInstitution'][0])
    {

        // verify the required parameter 'update_request' is set
        if ($update_request === null || (is_array($update_request) && count($update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_request when calling setMandateInstitution'
            );
        }


        $resourcePath = '/mandates/institution_selection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_request));
            } else {
                $httpBody = $update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitAuthChecklist
     *
     * @param  \FinversePhp\Model\SubmitAuthChecklistRequest $submit_auth_checklist_request request body for submitting auth checklist (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitAuthChecklist'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\SubmitAuthChecklistResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function submitAuthChecklist($submit_auth_checklist_request, string $contentType = self::contentTypes['submitAuthChecklist'][0])
    {
        list($response) = $this->submitAuthChecklistWithHttpInfo($submit_auth_checklist_request, $contentType);
        return $response;
    }

    /**
     * Operation submitAuthChecklistWithHttpInfo
     *
     * @param  \FinversePhp\Model\SubmitAuthChecklistRequest $submit_auth_checklist_request request body for submitting auth checklist (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitAuthChecklist'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\SubmitAuthChecklistResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitAuthChecklistWithHttpInfo($submit_auth_checklist_request, string $contentType = self::contentTypes['submitAuthChecklist'][0])
    {
        $request = $this->submitAuthChecklistRequest($submit_auth_checklist_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\SubmitAuthChecklistResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\SubmitAuthChecklistResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\SubmitAuthChecklistResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation submitAuthChecklistAsync
     *
     * @param  \FinversePhp\Model\SubmitAuthChecklistRequest $submit_auth_checklist_request request body for submitting auth checklist (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitAuthChecklist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitAuthChecklistAsync($submit_auth_checklist_request, string $contentType = self::contentTypes['submitAuthChecklist'][0])
    {
        return $this->submitAuthChecklistAsyncWithHttpInfo($submit_auth_checklist_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitAuthChecklistAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\SubmitAuthChecklistRequest $submit_auth_checklist_request request body for submitting auth checklist (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitAuthChecklist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitAuthChecklistAsyncWithHttpInfo($submit_auth_checklist_request, string $contentType = self::contentTypes['submitAuthChecklist'][0])
    {
        $returnType = '\FinversePhp\Model\SubmitAuthChecklistResponse';
        $request = $this->submitAuthChecklistRequest($submit_auth_checklist_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitAuthChecklist'
     *
     * @param  \FinversePhp\Model\SubmitAuthChecklistRequest $submit_auth_checklist_request request body for submitting auth checklist (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitAuthChecklist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitAuthChecklistRequest($submit_auth_checklist_request, string $contentType = self::contentTypes['submitAuthChecklist'][0])
    {

        // verify the required parameter 'submit_auth_checklist_request' is set
        if ($submit_auth_checklist_request === null || (is_array($submit_auth_checklist_request) && count($submit_auth_checklist_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submit_auth_checklist_request when calling submitAuthChecklist'
            );
        }


        $resourcePath = '/mandates/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($submit_auth_checklist_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($submit_auth_checklist_request));
            } else {
                $httpBody = $submit_auth_checklist_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePayment
     *
     * @param  string $payment_id payment id (required)
     * @param  \FinversePhp\Model\UpdatePaymentRequest $update_payment_request request body for updating payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function updatePayment($payment_id, $update_payment_request, string $contentType = self::contentTypes['updatePayment'][0])
    {
        list($response) = $this->updatePaymentWithHttpInfo($payment_id, $update_payment_request, $contentType);
        return $response;
    }

    /**
     * Operation updatePaymentWithHttpInfo
     *
     * @param  string $payment_id payment id (required)
     * @param  \FinversePhp\Model\UpdatePaymentRequest $update_payment_request request body for updating payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentWithHttpInfo($payment_id, $update_payment_request, string $contentType = self::contentTypes['updatePayment'][0])
    {
        $request = $this->updatePaymentRequest($payment_id, $update_payment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePaymentAsync
     *
     * @param  string $payment_id payment id (required)
     * @param  \FinversePhp\Model\UpdatePaymentRequest $update_payment_request request body for updating payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentAsync($payment_id, $update_payment_request, string $contentType = self::contentTypes['updatePayment'][0])
    {
        return $this->updatePaymentAsyncWithHttpInfo($payment_id, $update_payment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentAsyncWithHttpInfo
     *
     * @param  string $payment_id payment id (required)
     * @param  \FinversePhp\Model\UpdatePaymentRequest $update_payment_request request body for updating payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentAsyncWithHttpInfo($payment_id, $update_payment_request, string $contentType = self::contentTypes['updatePayment'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentResponse';
        $request = $this->updatePaymentRequest($payment_id, $update_payment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePayment'
     *
     * @param  string $payment_id payment id (required)
     * @param  \FinversePhp\Model\UpdatePaymentRequest $update_payment_request request body for updating payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaymentRequest($payment_id, $update_payment_request, string $contentType = self::contentTypes['updatePayment'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling updatePayment'
            );
        }

        // verify the required parameter 'update_payment_request' is set
        if ($update_payment_request === null || (is_array($update_payment_request) && count($update_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_payment_request when calling updatePayment'
            );
        }


        $resourcePath = '/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_payment_request));
            } else {
                $httpBody = $update_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTestPaymentStatus
     *
     * @param  string $payment_id The test payment ID (required)
     * @param  \FinversePhp\Model\UpdateTestPaymentStatusRequest $payment_status Request body for updating the test manual payment status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTestPaymentStatus'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTestPaymentStatus($payment_id, $payment_status, string $contentType = self::contentTypes['updateTestPaymentStatus'][0])
    {
        $this->updateTestPaymentStatusWithHttpInfo($payment_id, $payment_status, $contentType);
    }

    /**
     * Operation updateTestPaymentStatusWithHttpInfo
     *
     * @param  string $payment_id The test payment ID (required)
     * @param  \FinversePhp\Model\UpdateTestPaymentStatusRequest $payment_status Request body for updating the test manual payment status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTestPaymentStatus'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTestPaymentStatusWithHttpInfo($payment_id, $payment_status, string $contentType = self::contentTypes['updateTestPaymentStatus'][0])
    {
        $request = $this->updateTestPaymentStatusRequest($payment_id, $payment_status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTestPaymentStatusAsync
     *
     * @param  string $payment_id The test payment ID (required)
     * @param  \FinversePhp\Model\UpdateTestPaymentStatusRequest $payment_status Request body for updating the test manual payment status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTestPaymentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTestPaymentStatusAsync($payment_id, $payment_status, string $contentType = self::contentTypes['updateTestPaymentStatus'][0])
    {
        return $this->updateTestPaymentStatusAsyncWithHttpInfo($payment_id, $payment_status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTestPaymentStatusAsyncWithHttpInfo
     *
     * @param  string $payment_id The test payment ID (required)
     * @param  \FinversePhp\Model\UpdateTestPaymentStatusRequest $payment_status Request body for updating the test manual payment status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTestPaymentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTestPaymentStatusAsyncWithHttpInfo($payment_id, $payment_status, string $contentType = self::contentTypes['updateTestPaymentStatus'][0])
    {
        $returnType = '';
        $request = $this->updateTestPaymentStatusRequest($payment_id, $payment_status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTestPaymentStatus'
     *
     * @param  string $payment_id The test payment ID (required)
     * @param  \FinversePhp\Model\UpdateTestPaymentStatusRequest $payment_status Request body for updating the test manual payment status (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTestPaymentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTestPaymentStatusRequest($payment_id, $payment_status, string $contentType = self::contentTypes['updateTestPaymentStatus'][0])
    {

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling updateTestPaymentStatus'
            );
        }

        // verify the required parameter 'payment_status' is set
        if ($payment_status === null || (is_array($payment_status) && count($payment_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_status when calling updateTestPaymentStatus'
            );
        }


        $resourcePath = '/testing/payments/{paymentId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment_status)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment_status));
            } else {
                $httpBody = $payment_status;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
