<?php
/**
 * DefaultApi
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use FinversePhp\ApiException;
use FinversePhp\Configuration;
use FinversePhp\FormDataProcessor;
use FinversePhp\HeaderSelector;
use FinversePhp\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelPaymentLink' => [
            'application/json',
        ],
        'cancelPayout' => [
            'application/json',
        ],
        'changePaymentMethodPaymentLink' => [
            'application/json',
        ],
        'confirmManualPayment' => [
            'application/json',
        ],
        'confirmPayment' => [
            'application/json',
        ],
        'createFpsToken' => [
            'application/json',
        ],
        'createMandateForExistingSender' => [
            'application/json',
        ],
        'createPaymentLink' => [
            'application/json',
        ],
        'createPaymentLinkCardPayment' => [
            'application/json',
        ],
        'createPaymentLinkMandate' => [
            'application/json',
        ],
        'createPaymentMethod' => [
            'application/json',
        ],
        'createScheduledPayout' => [
            'application/json',
        ],
        'demotePaymentAttempt' => [
            'application/json',
        ],
        'downloadBalanceStatement' => [
            'application/json',
        ],
        'getFpsQrCode' => [
            'application/json',
        ],
        'getInstitutionsForCustomer' => [
            'application/json',
        ],
        'getPaymentLink' => [
            'application/json',
        ],
        'getPaymentMethod' => [
            'application/json',
        ],
        'getPaymentMethodPaymentLink' => [
            'application/json',
        ],
        'getPaymentPaymentLink' => [
            'application/json',
        ],
        'getPayoutById' => [
            'application/json',
        ],
        'getSenderPaymentUser' => [
            'application/json',
        ],
        'listDetokenizedMandates' => [
            'application/json',
        ],
        'listMandates' => [
            'application/json',
        ],
        'listPaymentMethods' => [
            'application/json',
        ],
        'listPayments' => [
            'application/json',
        ],
        'listPayouts' => [
            'application/json',
        ],
        'refreshPaymentAttempt' => [
            'application/json',
        ],
        'setAutopayConsent' => [
            'application/json',
        ],
        'updatePaymentUser' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelPaymentLink
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function cancelPaymentLink($payment_link_id, string $contentType = self::contentTypes['cancelPaymentLink'][0])
    {
        list($response) = $this->cancelPaymentLinkWithHttpInfo($payment_link_id, $contentType);
        return $response;
    }

    /**
     * Operation cancelPaymentLinkWithHttpInfo
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPaymentLinkWithHttpInfo($payment_link_id, string $contentType = self::contentTypes['cancelPaymentLink'][0])
    {
        $request = $this->cancelPaymentLinkRequest($payment_link_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentLinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentLinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cancelPaymentLinkAsync
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentLinkAsync($payment_link_id, string $contentType = self::contentTypes['cancelPaymentLink'][0])
    {
        return $this->cancelPaymentLinkAsyncWithHttpInfo($payment_link_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPaymentLinkAsyncWithHttpInfo
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentLinkAsyncWithHttpInfo($payment_link_id, string $contentType = self::contentTypes['cancelPaymentLink'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentLinkResponse';
        $request = $this->cancelPaymentLinkRequest($payment_link_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPaymentLink'
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPaymentLinkRequest($payment_link_id, string $contentType = self::contentTypes['cancelPaymentLink'][0])
    {

        // verify the required parameter 'payment_link_id' is set
        if ($payment_link_id === null || (is_array($payment_link_id) && count($payment_link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_link_id when calling cancelPaymentLink'
            );
        }
        if (strlen($payment_link_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$payment_link_id" when calling DefaultApi.cancelPaymentLink, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/payment_links/{paymentLinkId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentLinkId' . '}',
                ObjectSerializer::toPathValue($payment_link_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPayout
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayout'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PayoutSnapshotResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function cancelPayout($payout_id, string $contentType = self::contentTypes['cancelPayout'][0])
    {
        list($response) = $this->cancelPayoutWithHttpInfo($payout_id, $contentType);
        return $response;
    }

    /**
     * Operation cancelPayoutWithHttpInfo
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayout'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PayoutSnapshotResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPayoutWithHttpInfo($payout_id, string $contentType = self::contentTypes['cancelPayout'][0])
    {
        $request = $this->cancelPayoutRequest($payout_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PayoutSnapshotResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PayoutSnapshotResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PayoutSnapshotResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cancelPayoutAsync
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPayoutAsync($payout_id, string $contentType = self::contentTypes['cancelPayout'][0])
    {
        return $this->cancelPayoutAsyncWithHttpInfo($payout_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPayoutAsyncWithHttpInfo
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPayoutAsyncWithHttpInfo($payout_id, string $contentType = self::contentTypes['cancelPayout'][0])
    {
        $returnType = '\FinversePhp\Model\PayoutSnapshotResponse';
        $request = $this->cancelPayoutRequest($payout_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPayout'
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPayoutRequest($payout_id, string $contentType = self::contentTypes['cancelPayout'][0])
    {

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling cancelPayout'
            );
        }


        $resourcePath = '/payouts/{payoutId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changePaymentMethodPaymentLink
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ChangePaymentMethodFvLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function changePaymentMethodPaymentLink(string $contentType = self::contentTypes['changePaymentMethodPaymentLink'][0])
    {
        list($response) = $this->changePaymentMethodPaymentLinkWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation changePaymentMethodPaymentLinkWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ChangePaymentMethodFvLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function changePaymentMethodPaymentLinkWithHttpInfo(string $contentType = self::contentTypes['changePaymentMethodPaymentLink'][0])
    {
        $request = $this->changePaymentMethodPaymentLinkRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ChangePaymentMethodFvLinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ChangePaymentMethodFvLinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ChangePaymentMethodFvLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation changePaymentMethodPaymentLinkAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentMethodPaymentLinkAsync(string $contentType = self::contentTypes['changePaymentMethodPaymentLink'][0])
    {
        return $this->changePaymentMethodPaymentLinkAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changePaymentMethodPaymentLinkAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentMethodPaymentLinkAsyncWithHttpInfo(string $contentType = self::contentTypes['changePaymentMethodPaymentLink'][0])
    {
        $returnType = '\FinversePhp\Model\ChangePaymentMethodFvLinkResponse';
        $request = $this->changePaymentMethodPaymentLinkRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changePaymentMethodPaymentLink'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changePaymentMethodPaymentLinkRequest(string $contentType = self::contentTypes['changePaymentMethodPaymentLink'][0])
    {


        $resourcePath = '/payment_link/fvlink/payment_method/change';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmManualPayment
     *
     * @param  \FinversePhp\Model\ManualPaymentConfirmationRequest $manual_payment_identifiers Request body containing information to identify manual payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmManualPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ManualPaymentConfirmationResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function confirmManualPayment($manual_payment_identifiers, string $contentType = self::contentTypes['confirmManualPayment'][0])
    {
        list($response) = $this->confirmManualPaymentWithHttpInfo($manual_payment_identifiers, $contentType);
        return $response;
    }

    /**
     * Operation confirmManualPaymentWithHttpInfo
     *
     * @param  \FinversePhp\Model\ManualPaymentConfirmationRequest $manual_payment_identifiers Request body containing information to identify manual payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmManualPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ManualPaymentConfirmationResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmManualPaymentWithHttpInfo($manual_payment_identifiers, string $contentType = self::contentTypes['confirmManualPayment'][0])
    {
        $request = $this->confirmManualPaymentRequest($manual_payment_identifiers, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ManualPaymentConfirmationResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ManualPaymentConfirmationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ManualPaymentConfirmationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation confirmManualPaymentAsync
     *
     * @param  \FinversePhp\Model\ManualPaymentConfirmationRequest $manual_payment_identifiers Request body containing information to identify manual payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmManualPaymentAsync($manual_payment_identifiers, string $contentType = self::contentTypes['confirmManualPayment'][0])
    {
        return $this->confirmManualPaymentAsyncWithHttpInfo($manual_payment_identifiers, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmManualPaymentAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\ManualPaymentConfirmationRequest $manual_payment_identifiers Request body containing information to identify manual payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmManualPaymentAsyncWithHttpInfo($manual_payment_identifiers, string $contentType = self::contentTypes['confirmManualPayment'][0])
    {
        $returnType = '\FinversePhp\Model\ManualPaymentConfirmationResponse';
        $request = $this->confirmManualPaymentRequest($manual_payment_identifiers, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmManualPayment'
     *
     * @param  \FinversePhp\Model\ManualPaymentConfirmationRequest $manual_payment_identifiers Request body containing information to identify manual payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmManualPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmManualPaymentRequest($manual_payment_identifiers, string $contentType = self::contentTypes['confirmManualPayment'][0])
    {

        // verify the required parameter 'manual_payment_identifiers' is set
        if ($manual_payment_identifiers === null || (is_array($manual_payment_identifiers) && count($manual_payment_identifiers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manual_payment_identifiers when calling confirmManualPayment'
            );
        }


        $resourcePath = '/payments/manual_payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($manual_payment_identifiers)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($manual_payment_identifiers));
            } else {
                $httpBody = $manual_payment_identifiers;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPayment
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ConfirmPaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function confirmPayment(string $contentType = self::contentTypes['confirmPayment'][0])
    {
        list($response) = $this->confirmPaymentWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation confirmPaymentWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ConfirmPaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPaymentWithHttpInfo(string $contentType = self::contentTypes['confirmPayment'][0])
    {
        $request = $this->confirmPaymentRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ConfirmPaymentResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ConfirmPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ConfirmPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation confirmPaymentAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPaymentAsync(string $contentType = self::contentTypes['confirmPayment'][0])
    {
        return $this->confirmPaymentAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPaymentAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPaymentAsyncWithHttpInfo(string $contentType = self::contentTypes['confirmPayment'][0])
    {
        $returnType = '\FinversePhp\Model\ConfirmPaymentResponse';
        $request = $this->confirmPaymentRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPayment'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['confirmPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function confirmPaymentRequest(string $contentType = self::contentTypes['confirmPayment'][0])
    {


        $resourcePath = '/payment_links/confirm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFpsToken
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFpsToken'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\CreateFpsTokenResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createFpsToken(string $contentType = self::contentTypes['createFpsToken'][0])
    {
        list($response) = $this->createFpsTokenWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation createFpsTokenWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFpsToken'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\CreateFpsTokenResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFpsTokenWithHttpInfo(string $contentType = self::contentTypes['createFpsToken'][0])
    {
        $request = $this->createFpsTokenRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\CreateFpsTokenResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\CreateFpsTokenResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\CreateFpsTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createFpsTokenAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFpsToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFpsTokenAsync(string $contentType = self::contentTypes['createFpsToken'][0])
    {
        return $this->createFpsTokenAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFpsTokenAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFpsToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFpsTokenAsyncWithHttpInfo(string $contentType = self::contentTypes['createFpsToken'][0])
    {
        $returnType = '\FinversePhp\Model\CreateFpsTokenResponse';
        $request = $this->createFpsTokenRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFpsToken'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFpsToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFpsTokenRequest(string $contentType = self::contentTypes['createFpsToken'][0])
    {


        $resourcePath = '/payment_links/fps/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMandateForExistingSender
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateMandateWithSenderAccountRequest $create_mandate_request request body for creating mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandateForExistingSender'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\CreateMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createMandateForExistingSender($idempotency_key, $create_mandate_request, string $contentType = self::contentTypes['createMandateForExistingSender'][0])
    {
        list($response) = $this->createMandateForExistingSenderWithHttpInfo($idempotency_key, $create_mandate_request, $contentType);
        return $response;
    }

    /**
     * Operation createMandateForExistingSenderWithHttpInfo
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateMandateWithSenderAccountRequest $create_mandate_request request body for creating mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandateForExistingSender'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\CreateMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMandateForExistingSenderWithHttpInfo($idempotency_key, $create_mandate_request, string $contentType = self::contentTypes['createMandateForExistingSender'][0])
    {
        $request = $this->createMandateForExistingSenderRequest($idempotency_key, $create_mandate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\CreateMandateResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\CreateMandateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\CreateMandateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createMandateForExistingSenderAsync
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateMandateWithSenderAccountRequest $create_mandate_request request body for creating mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandateForExistingSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMandateForExistingSenderAsync($idempotency_key, $create_mandate_request, string $contentType = self::contentTypes['createMandateForExistingSender'][0])
    {
        return $this->createMandateForExistingSenderAsyncWithHttpInfo($idempotency_key, $create_mandate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMandateForExistingSenderAsyncWithHttpInfo
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateMandateWithSenderAccountRequest $create_mandate_request request body for creating mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandateForExistingSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMandateForExistingSenderAsyncWithHttpInfo($idempotency_key, $create_mandate_request, string $contentType = self::contentTypes['createMandateForExistingSender'][0])
    {
        $returnType = '\FinversePhp\Model\CreateMandateResponse';
        $request = $this->createMandateForExistingSenderRequest($idempotency_key, $create_mandate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMandateForExistingSender'
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateMandateWithSenderAccountRequest $create_mandate_request request body for creating mandate (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMandateForExistingSender'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMandateForExistingSenderRequest($idempotency_key, $create_mandate_request, string $contentType = self::contentTypes['createMandateForExistingSender'][0])
    {

        // verify the required parameter 'idempotency_key' is set
        if ($idempotency_key === null || (is_array($idempotency_key) && count($idempotency_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idempotency_key when calling createMandateForExistingSender'
            );
        }

        // verify the required parameter 'create_mandate_request' is set
        if ($create_mandate_request === null || (is_array($create_mandate_request) && count($create_mandate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_mandate_request when calling createMandateForExistingSender'
            );
        }


        $resourcePath = '/mandates/sender_account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_mandate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_mandate_request));
            } else {
                $httpBody = $create_mandate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentLink
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkRequest $create_payment_link_request Parameters required to create a payment link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createPaymentLink($create_payment_link_request, string $contentType = self::contentTypes['createPaymentLink'][0])
    {
        list($response) = $this->createPaymentLinkWithHttpInfo($create_payment_link_request, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentLinkWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkRequest $create_payment_link_request Parameters required to create a payment link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentLinkWithHttpInfo($create_payment_link_request, string $contentType = self::contentTypes['createPaymentLink'][0])
    {
        $request = $this->createPaymentLinkRequest($create_payment_link_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentLinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentLinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentLinkAsync
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkRequest $create_payment_link_request Parameters required to create a payment link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkAsync($create_payment_link_request, string $contentType = self::contentTypes['createPaymentLink'][0])
    {
        return $this->createPaymentLinkAsyncWithHttpInfo($create_payment_link_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentLinkAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkRequest $create_payment_link_request Parameters required to create a payment link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkAsyncWithHttpInfo($create_payment_link_request, string $contentType = self::contentTypes['createPaymentLink'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentLinkResponse';
        $request = $this->createPaymentLinkRequest($create_payment_link_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentLink'
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkRequest $create_payment_link_request Parameters required to create a payment link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentLinkRequest($create_payment_link_request, string $contentType = self::contentTypes['createPaymentLink'][0])
    {

        // verify the required parameter 'create_payment_link_request' is set
        if ($create_payment_link_request === null || (is_array($create_payment_link_request) && count($create_payment_link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payment_link_request when calling createPaymentLink'
            );
        }


        $resourcePath = '/payment_links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_link_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_link_request));
            } else {
                $httpBody = $create_payment_link_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentLinkCardPayment
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkCardPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\CreatePaymentLinkCardPaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createPaymentLinkCardPayment(string $contentType = self::contentTypes['createPaymentLinkCardPayment'][0])
    {
        list($response) = $this->createPaymentLinkCardPaymentWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation createPaymentLinkCardPaymentWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkCardPayment'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\CreatePaymentLinkCardPaymentResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentLinkCardPaymentWithHttpInfo(string $contentType = self::contentTypes['createPaymentLinkCardPayment'][0])
    {
        $request = $this->createPaymentLinkCardPaymentRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\CreatePaymentLinkCardPaymentResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\CreatePaymentLinkCardPaymentResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\CreatePaymentLinkCardPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentLinkCardPaymentAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkCardPaymentAsync(string $contentType = self::contentTypes['createPaymentLinkCardPayment'][0])
    {
        return $this->createPaymentLinkCardPaymentAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentLinkCardPaymentAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkCardPaymentAsyncWithHttpInfo(string $contentType = self::contentTypes['createPaymentLinkCardPayment'][0])
    {
        $returnType = '\FinversePhp\Model\CreatePaymentLinkCardPaymentResponse';
        $request = $this->createPaymentLinkCardPaymentRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentLinkCardPayment'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentLinkCardPaymentRequest(string $contentType = self::contentTypes['createPaymentLinkCardPayment'][0])
    {


        $resourcePath = '/payment_links/card';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentLinkMandate
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkMandateRequest $create_payment_link_mandate_request request body for creating mandate for payment-link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\CreatePaymentLinkMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createPaymentLinkMandate($create_payment_link_mandate_request, string $contentType = self::contentTypes['createPaymentLinkMandate'][0])
    {
        list($response) = $this->createPaymentLinkMandateWithHttpInfo($create_payment_link_mandate_request, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentLinkMandateWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkMandateRequest $create_payment_link_mandate_request request body for creating mandate for payment-link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkMandate'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\CreatePaymentLinkMandateResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentLinkMandateWithHttpInfo($create_payment_link_mandate_request, string $contentType = self::contentTypes['createPaymentLinkMandate'][0])
    {
        $request = $this->createPaymentLinkMandateRequest($create_payment_link_mandate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\CreatePaymentLinkMandateResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\CreatePaymentLinkMandateResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\CreatePaymentLinkMandateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentLinkMandateAsync
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkMandateRequest $create_payment_link_mandate_request request body for creating mandate for payment-link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkMandateAsync($create_payment_link_mandate_request, string $contentType = self::contentTypes['createPaymentLinkMandate'][0])
    {
        return $this->createPaymentLinkMandateAsyncWithHttpInfo($create_payment_link_mandate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentLinkMandateAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkMandateRequest $create_payment_link_mandate_request request body for creating mandate for payment-link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentLinkMandateAsyncWithHttpInfo($create_payment_link_mandate_request, string $contentType = self::contentTypes['createPaymentLinkMandate'][0])
    {
        $returnType = '\FinversePhp\Model\CreatePaymentLinkMandateResponse';
        $request = $this->createPaymentLinkMandateRequest($create_payment_link_mandate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentLinkMandate'
     *
     * @param  \FinversePhp\Model\CreatePaymentLinkMandateRequest $create_payment_link_mandate_request request body for creating mandate for payment-link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentLinkMandate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentLinkMandateRequest($create_payment_link_mandate_request, string $contentType = self::contentTypes['createPaymentLinkMandate'][0])
    {

        // verify the required parameter 'create_payment_link_mandate_request' is set
        if ($create_payment_link_mandate_request === null || (is_array($create_payment_link_mandate_request) && count($create_payment_link_mandate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payment_link_mandate_request when calling createPaymentLinkMandate'
            );
        }


        $resourcePath = '/payment_links/mandates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_link_mandate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_link_mandate_request));
            } else {
                $httpBody = $create_payment_link_mandate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentMethod
     *
     * @param  string $payment_user_id Payment User ID (required)
     * @param  \FinversePhp\Model\CreatePaymentMethodRequest $create_payment_method_request create_payment_method_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentMethod'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentMethodResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createPaymentMethod($payment_user_id, $create_payment_method_request, string $contentType = self::contentTypes['createPaymentMethod'][0])
    {
        list($response) = $this->createPaymentMethodWithHttpInfo($payment_user_id, $create_payment_method_request, $contentType);
        return $response;
    }

    /**
     * Operation createPaymentMethodWithHttpInfo
     *
     * @param  string $payment_user_id Payment User ID (required)
     * @param  \FinversePhp\Model\CreatePaymentMethodRequest $create_payment_method_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentMethod'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentMethodResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentMethodWithHttpInfo($payment_user_id, $create_payment_method_request, string $contentType = self::contentTypes['createPaymentMethod'][0])
    {
        $request = $this->createPaymentMethodRequest($payment_user_id, $create_payment_method_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentMethodResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentMethodResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentMethodResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPaymentMethodAsync
     *
     * @param  string $payment_user_id Payment User ID (required)
     * @param  \FinversePhp\Model\CreatePaymentMethodRequest $create_payment_method_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentMethodAsync($payment_user_id, $create_payment_method_request, string $contentType = self::contentTypes['createPaymentMethod'][0])
    {
        return $this->createPaymentMethodAsyncWithHttpInfo($payment_user_id, $create_payment_method_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentMethodAsyncWithHttpInfo
     *
     * @param  string $payment_user_id Payment User ID (required)
     * @param  \FinversePhp\Model\CreatePaymentMethodRequest $create_payment_method_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentMethodAsyncWithHttpInfo($payment_user_id, $create_payment_method_request, string $contentType = self::contentTypes['createPaymentMethod'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentMethodResponse';
        $request = $this->createPaymentMethodRequest($payment_user_id, $create_payment_method_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentMethod'
     *
     * @param  string $payment_user_id Payment User ID (required)
     * @param  \FinversePhp\Model\CreatePaymentMethodRequest $create_payment_method_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPaymentMethodRequest($payment_user_id, $create_payment_method_request, string $contentType = self::contentTypes['createPaymentMethod'][0])
    {

        // verify the required parameter 'payment_user_id' is set
        if ($payment_user_id === null || (is_array($payment_user_id) && count($payment_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_user_id when calling createPaymentMethod'
            );
        }

        // verify the required parameter 'create_payment_method_request' is set
        if ($create_payment_method_request === null || (is_array($create_payment_method_request) && count($create_payment_method_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payment_method_request when calling createPaymentMethod'
            );
        }


        $resourcePath = '/payment_users/{paymentUserId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentUserId' . '}',
                ObjectSerializer::toPathValue($payment_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payment_method_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payment_method_request));
            } else {
                $httpBody = $create_payment_method_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createScheduledPayout
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateScheduledPayoutRequest $create_scheduled_payout_request Request body containing information to create scheduled payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createScheduledPayout'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PayoutSnapshotResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function createScheduledPayout($idempotency_key, $create_scheduled_payout_request, string $contentType = self::contentTypes['createScheduledPayout'][0])
    {
        list($response) = $this->createScheduledPayoutWithHttpInfo($idempotency_key, $create_scheduled_payout_request, $contentType);
        return $response;
    }

    /**
     * Operation createScheduledPayoutWithHttpInfo
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateScheduledPayoutRequest $create_scheduled_payout_request Request body containing information to create scheduled payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createScheduledPayout'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PayoutSnapshotResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function createScheduledPayoutWithHttpInfo($idempotency_key, $create_scheduled_payout_request, string $contentType = self::contentTypes['createScheduledPayout'][0])
    {
        $request = $this->createScheduledPayoutRequest($idempotency_key, $create_scheduled_payout_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PayoutSnapshotResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PayoutSnapshotResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PayoutSnapshotResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createScheduledPayoutAsync
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateScheduledPayoutRequest $create_scheduled_payout_request Request body containing information to create scheduled payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createScheduledPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createScheduledPayoutAsync($idempotency_key, $create_scheduled_payout_request, string $contentType = self::contentTypes['createScheduledPayout'][0])
    {
        return $this->createScheduledPayoutAsyncWithHttpInfo($idempotency_key, $create_scheduled_payout_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createScheduledPayoutAsyncWithHttpInfo
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateScheduledPayoutRequest $create_scheduled_payout_request Request body containing information to create scheduled payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createScheduledPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createScheduledPayoutAsyncWithHttpInfo($idempotency_key, $create_scheduled_payout_request, string $contentType = self::contentTypes['createScheduledPayout'][0])
    {
        $returnType = '\FinversePhp\Model\PayoutSnapshotResponse';
        $request = $this->createScheduledPayoutRequest($idempotency_key, $create_scheduled_payout_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createScheduledPayout'
     *
     * @param  string $idempotency_key A random key provided by the customer, per unique payment. The purpose for the Idempotency key is to allow safe retrying without the operation being performed multiple times. (required)
     * @param  \FinversePhp\Model\CreateScheduledPayoutRequest $create_scheduled_payout_request Request body containing information to create scheduled payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createScheduledPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createScheduledPayoutRequest($idempotency_key, $create_scheduled_payout_request, string $contentType = self::contentTypes['createScheduledPayout'][0])
    {

        // verify the required parameter 'idempotency_key' is set
        if ($idempotency_key === null || (is_array($idempotency_key) && count($idempotency_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idempotency_key when calling createScheduledPayout'
            );
        }

        // verify the required parameter 'create_scheduled_payout_request' is set
        if ($create_scheduled_payout_request === null || (is_array($create_scheduled_payout_request) && count($create_scheduled_payout_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_scheduled_payout_request when calling createScheduledPayout'
            );
        }


        $resourcePath = '/payouts/scheduled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['Idempotency-Key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_scheduled_payout_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_scheduled_payout_request));
            } else {
                $httpBody = $create_scheduled_payout_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation demotePaymentAttempt
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demotePaymentAttempt'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function demotePaymentAttempt(string $contentType = self::contentTypes['demotePaymentAttempt'][0])
    {
        $this->demotePaymentAttemptWithHttpInfo($contentType);
    }

    /**
     * Operation demotePaymentAttemptWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demotePaymentAttempt'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function demotePaymentAttemptWithHttpInfo(string $contentType = self::contentTypes['demotePaymentAttempt'][0])
    {
        $request = $this->demotePaymentAttemptRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation demotePaymentAttemptAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demotePaymentAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function demotePaymentAttemptAsync(string $contentType = self::contentTypes['demotePaymentAttempt'][0])
    {
        return $this->demotePaymentAttemptAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation demotePaymentAttemptAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demotePaymentAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function demotePaymentAttemptAsyncWithHttpInfo(string $contentType = self::contentTypes['demotePaymentAttempt'][0])
    {
        $returnType = '';
        $request = $this->demotePaymentAttemptRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'demotePaymentAttempt'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['demotePaymentAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function demotePaymentAttemptRequest(string $contentType = self::contentTypes['demotePaymentAttempt'][0])
    {


        $resourcePath = '/payment_link/fvlink/payment_attempt/demote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadBalanceStatement
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadBalanceStatement'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\DownloadBalanceStatementResponse|\FinversePhp\Model\ErrBodyModelV2
     */
    public function downloadBalanceStatement($date_from = null, $date_to = null, $currencies = null, string $contentType = self::contentTypes['downloadBalanceStatement'][0])
    {
        list($response) = $this->downloadBalanceStatementWithHttpInfo($date_from, $date_to, $currencies, $contentType);
        return $response;
    }

    /**
     * Operation downloadBalanceStatementWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadBalanceStatement'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\DownloadBalanceStatementResponse|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadBalanceStatementWithHttpInfo($date_from = null, $date_to = null, $currencies = null, string $contentType = self::contentTypes['downloadBalanceStatement'][0])
    {
        $request = $this->downloadBalanceStatementRequest($date_from, $date_to, $currencies, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\DownloadBalanceStatementResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\DownloadBalanceStatementResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\DownloadBalanceStatementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation downloadBalanceStatementAsync
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadBalanceStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadBalanceStatementAsync($date_from = null, $date_to = null, $currencies = null, string $contentType = self::contentTypes['downloadBalanceStatement'][0])
    {
        return $this->downloadBalanceStatementAsyncWithHttpInfo($date_from, $date_to, $currencies, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadBalanceStatementAsyncWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadBalanceStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadBalanceStatementAsyncWithHttpInfo($date_from = null, $date_to = null, $currencies = null, string $contentType = self::contentTypes['downloadBalanceStatement'][0])
    {
        $returnType = '\FinversePhp\Model\DownloadBalanceStatementResponse';
        $request = $this->downloadBalanceStatementRequest($date_from, $date_to, $currencies, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadBalanceStatement'
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $currencies The currencies to filter for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadBalanceStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadBalanceStatementRequest($date_from = null, $date_to = null, $currencies = null, string $contentType = self::contentTypes['downloadBalanceStatement'][0])
    {





        $resourcePath = '/ledger/statement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'date_from', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_to,
            'date_to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFpsQrCode
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFpsQrCode'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\FpsQrCodeResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getFpsQrCode(string $contentType = self::contentTypes['getFpsQrCode'][0])
    {
        list($response) = $this->getFpsQrCodeWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getFpsQrCodeWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFpsQrCode'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\FpsQrCodeResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFpsQrCodeWithHttpInfo(string $contentType = self::contentTypes['getFpsQrCode'][0])
    {
        $request = $this->getFpsQrCodeRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\FpsQrCodeResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\FpsQrCodeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\FpsQrCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getFpsQrCodeAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFpsQrCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFpsQrCodeAsync(string $contentType = self::contentTypes['getFpsQrCode'][0])
    {
        return $this->getFpsQrCodeAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFpsQrCodeAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFpsQrCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFpsQrCodeAsyncWithHttpInfo(string $contentType = self::contentTypes['getFpsQrCode'][0])
    {
        $returnType = '\FinversePhp\Model\FpsQrCodeResponse';
        $request = $this->getFpsQrCodeRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFpsQrCode'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFpsQrCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFpsQrCodeRequest(string $contentType = self::contentTypes['getFpsQrCode'][0])
    {


        $resourcePath = '/payment_links/fps/qr_code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstitutionsForCustomer
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitutionsForCustomer'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\Institution[]|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getInstitutionsForCustomer(string $contentType = self::contentTypes['getInstitutionsForCustomer'][0])
    {
        list($response) = $this->getInstitutionsForCustomerWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getInstitutionsForCustomerWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitutionsForCustomer'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\Institution[]|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstitutionsForCustomerWithHttpInfo(string $contentType = self::contentTypes['getInstitutionsForCustomer'][0])
    {
        $request = $this->getInstitutionsForCustomerRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\Institution[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\Institution[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\Institution[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getInstitutionsForCustomerAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitutionsForCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionsForCustomerAsync(string $contentType = self::contentTypes['getInstitutionsForCustomer'][0])
    {
        return $this->getInstitutionsForCustomerAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstitutionsForCustomerAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitutionsForCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionsForCustomerAsyncWithHttpInfo(string $contentType = self::contentTypes['getInstitutionsForCustomer'][0])
    {
        $returnType = '\FinversePhp\Model\Institution[]';
        $request = $this->getInstitutionsForCustomerRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstitutionsForCustomer'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstitutionsForCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstitutionsForCustomerRequest(string $contentType = self::contentTypes['getInstitutionsForCustomer'][0])
    {


        $resourcePath = '/institutions/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentLink
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getPaymentLink($payment_link_id, string $contentType = self::contentTypes['getPaymentLink'][0])
    {
        list($response) = $this->getPaymentLinkWithHttpInfo($payment_link_id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentLinkWithHttpInfo
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentLinkWithHttpInfo($payment_link_id, string $contentType = self::contentTypes['getPaymentLink'][0])
    {
        $request = $this->getPaymentLinkRequest($payment_link_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentLinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentLinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentLinkAsync
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentLinkAsync($payment_link_id, string $contentType = self::contentTypes['getPaymentLink'][0])
    {
        return $this->getPaymentLinkAsyncWithHttpInfo($payment_link_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentLinkAsyncWithHttpInfo
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentLinkAsyncWithHttpInfo($payment_link_id, string $contentType = self::contentTypes['getPaymentLink'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentLinkResponse';
        $request = $this->getPaymentLinkRequest($payment_link_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentLink'
     *
     * @param  string $payment_link_id The payment link id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentLinkRequest($payment_link_id, string $contentType = self::contentTypes['getPaymentLink'][0])
    {

        // verify the required parameter 'payment_link_id' is set
        if ($payment_link_id === null || (is_array($payment_link_id) && count($payment_link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_link_id when calling getPaymentLink'
            );
        }
        if (strlen($payment_link_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$payment_link_id" when calling DefaultApi.getPaymentLink, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/payment_links/{paymentLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentLinkId' . '}',
                ObjectSerializer::toPathValue($payment_link_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethod
     *
     * @param  string $payment_method_id payment_method_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentMethodResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getPaymentMethod($payment_method_id, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        list($response) = $this->getPaymentMethodWithHttpInfo($payment_method_id, $contentType);
        return $response;
    }

    /**
     * Operation getPaymentMethodWithHttpInfo
     *
     * @param  string $payment_method_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentMethodResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodWithHttpInfo($payment_method_id, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        $request = $this->getPaymentMethodRequest($payment_method_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentMethodResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentMethodResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentMethodResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodAsync
     *
     * @param  string $payment_method_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAsync($payment_method_id, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        return $this->getPaymentMethodAsyncWithHttpInfo($payment_method_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodAsyncWithHttpInfo
     *
     * @param  string $payment_method_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAsyncWithHttpInfo($payment_method_id, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentMethodResponse';
        $request = $this->getPaymentMethodRequest($payment_method_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethod'
     *
     * @param  string $payment_method_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentMethodRequest($payment_method_id, string $contentType = self::contentTypes['getPaymentMethod'][0])
    {

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling getPaymentMethod'
            );
        }


        $resourcePath = '/payment_methods/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethodPaymentLink
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentMethodFvLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getPaymentMethodPaymentLink(string $contentType = self::contentTypes['getPaymentMethodPaymentLink'][0])
    {
        list($response) = $this->getPaymentMethodPaymentLinkWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getPaymentMethodPaymentLinkWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentMethodFvLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodPaymentLinkWithHttpInfo(string $contentType = self::contentTypes['getPaymentMethodPaymentLink'][0])
    {
        $request = $this->getPaymentMethodPaymentLinkRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentMethodFvLinkResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentMethodFvLinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentMethodFvLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodPaymentLinkAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodPaymentLinkAsync(string $contentType = self::contentTypes['getPaymentMethodPaymentLink'][0])
    {
        return $this->getPaymentMethodPaymentLinkAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodPaymentLinkAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodPaymentLinkAsyncWithHttpInfo(string $contentType = self::contentTypes['getPaymentMethodPaymentLink'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentMethodFvLinkResponse';
        $request = $this->getPaymentMethodPaymentLinkRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethodPaymentLink'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentMethodPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentMethodPaymentLinkRequest(string $contentType = self::contentTypes['getPaymentMethodPaymentLink'][0])
    {


        $resourcePath = '/payment_link/fvlink/payment_method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentPaymentLink
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentFvLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getPaymentPaymentLink(string $contentType = self::contentTypes['getPaymentPaymentLink'][0])
    {
        list($response) = $this->getPaymentPaymentLinkWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getPaymentPaymentLinkWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentPaymentLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentFvLinkResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentPaymentLinkWithHttpInfo(string $contentType = self::contentTypes['getPaymentPaymentLink'][0])
    {
        $request = $this->getPaymentPaymentLinkRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentFvLinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentFvLinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentFvLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPaymentPaymentLinkAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentPaymentLinkAsync(string $contentType = self::contentTypes['getPaymentPaymentLink'][0])
    {
        return $this->getPaymentPaymentLinkAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentPaymentLinkAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentPaymentLinkAsyncWithHttpInfo(string $contentType = self::contentTypes['getPaymentPaymentLink'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentFvLinkResponse';
        $request = $this->getPaymentPaymentLinkRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentPaymentLink'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaymentPaymentLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaymentPaymentLinkRequest(string $contentType = self::contentTypes['getPaymentPaymentLink'][0])
    {


        $resourcePath = '/payment_link/fvlink/payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayoutById
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutById'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PayoutSnapshotResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getPayoutById($payout_id, string $contentType = self::contentTypes['getPayoutById'][0])
    {
        list($response) = $this->getPayoutByIdWithHttpInfo($payout_id, $contentType);
        return $response;
    }

    /**
     * Operation getPayoutByIdWithHttpInfo
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutById'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PayoutSnapshotResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutByIdWithHttpInfo($payout_id, string $contentType = self::contentTypes['getPayoutById'][0])
    {
        $request = $this->getPayoutByIdRequest($payout_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PayoutSnapshotResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PayoutSnapshotResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PayoutSnapshotResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPayoutByIdAsync
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutByIdAsync($payout_id, string $contentType = self::contentTypes['getPayoutById'][0])
    {
        return $this->getPayoutByIdAsyncWithHttpInfo($payout_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutByIdAsyncWithHttpInfo
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutByIdAsyncWithHttpInfo($payout_id, string $contentType = self::contentTypes['getPayoutById'][0])
    {
        $returnType = '\FinversePhp\Model\PayoutSnapshotResponse';
        $request = $this->getPayoutByIdRequest($payout_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayoutById'
     *
     * @param  string $payout_id payout id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayoutById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayoutByIdRequest($payout_id, string $contentType = self::contentTypes['getPayoutById'][0])
    {

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling getPayoutById'
            );
        }


        $resourcePath = '/payouts/{payoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSenderPaymentUser
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSenderPaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetPaymentUserResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function getSenderPaymentUser(string $contentType = self::contentTypes['getSenderPaymentUser'][0])
    {
        list($response) = $this->getSenderPaymentUserWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSenderPaymentUserWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSenderPaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetPaymentUserResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSenderPaymentUserWithHttpInfo(string $contentType = self::contentTypes['getSenderPaymentUser'][0])
    {
        $request = $this->getSenderPaymentUserRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetPaymentUserResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetPaymentUserResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetPaymentUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSenderPaymentUserAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSenderPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSenderPaymentUserAsync(string $contentType = self::contentTypes['getSenderPaymentUser'][0])
    {
        return $this->getSenderPaymentUserAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSenderPaymentUserAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSenderPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSenderPaymentUserAsyncWithHttpInfo(string $contentType = self::contentTypes['getSenderPaymentUser'][0])
    {
        $returnType = '\FinversePhp\Model\GetPaymentUserResponse';
        $request = $this->getSenderPaymentUserRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSenderPaymentUser'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSenderPaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSenderPaymentUserRequest(string $contentType = self::contentTypes['getSenderPaymentUser'][0])
    {


        $resourcePath = '/payment_link/fvlink/payment_user/sender';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDetokenizedMandates
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDetokenizedMandates'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ListMandatesResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function listDetokenizedMandates($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listDetokenizedMandates'][0])
    {
        list($response) = $this->listDetokenizedMandatesWithHttpInfo($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation listDetokenizedMandatesWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDetokenizedMandates'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ListMandatesResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDetokenizedMandatesWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listDetokenizedMandates'][0])
    {
        $request = $this->listDetokenizedMandatesRequest($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ListMandatesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ListMandatesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ListMandatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listDetokenizedMandatesAsync
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDetokenizedMandates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDetokenizedMandatesAsync($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listDetokenizedMandates'][0])
    {
        return $this->listDetokenizedMandatesAsyncWithHttpInfo($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDetokenizedMandatesAsyncWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDetokenizedMandates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDetokenizedMandatesAsyncWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listDetokenizedMandates'][0])
    {
        $returnType = '\FinversePhp\Model\ListMandatesResponse';
        $request = $this->listDetokenizedMandatesRequest($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDetokenizedMandates'
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDetokenizedMandates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDetokenizedMandatesRequest($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listDetokenizedMandates'][0])
    {







        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.listDetokenizedMandates, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listDetokenizedMandates, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listDetokenizedMandates, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/mandates/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'date_from', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_to,
            'date_to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sender_type,
            'sender_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'user_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $institution_id,
            'institution_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMandates
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMandates'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ListMandatesResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function listMandates($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listMandates'][0])
    {
        list($response) = $this->listMandatesWithHttpInfo($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation listMandatesWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMandates'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ListMandatesResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMandatesWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listMandates'][0])
    {
        $request = $this->listMandatesRequest($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ListMandatesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ListMandatesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ListMandatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listMandatesAsync
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMandates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMandatesAsync($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listMandates'][0])
    {
        return $this->listMandatesAsyncWithHttpInfo($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMandatesAsyncWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMandates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listMandatesAsyncWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listMandates'][0])
    {
        $returnType = '\FinversePhp\Model\ListMandatesResponse';
        $request = $this->listMandatesRequest($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMandates'
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The mandate statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMandates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMandatesRequest($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listMandates'][0])
    {







        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.listMandates, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listMandates, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listMandates, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/mandates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'date_from', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_to,
            'date_to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sender_type,
            'sender_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'user_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $institution_id,
            'institution_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPaymentMethods
     *
     * @param  string $payment_user_id Payment User Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentMethods'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ListPaymentMethodsResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function listPaymentMethods($payment_user_id, string $contentType = self::contentTypes['listPaymentMethods'][0])
    {
        list($response) = $this->listPaymentMethodsWithHttpInfo($payment_user_id, $contentType);
        return $response;
    }

    /**
     * Operation listPaymentMethodsWithHttpInfo
     *
     * @param  string $payment_user_id Payment User Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentMethods'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ListPaymentMethodsResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPaymentMethodsWithHttpInfo($payment_user_id, string $contentType = self::contentTypes['listPaymentMethods'][0])
    {
        $request = $this->listPaymentMethodsRequest($payment_user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ListPaymentMethodsResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ListPaymentMethodsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ListPaymentMethodsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPaymentMethodsAsync
     *
     * @param  string $payment_user_id Payment User Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentMethodsAsync($payment_user_id, string $contentType = self::contentTypes['listPaymentMethods'][0])
    {
        return $this->listPaymentMethodsAsyncWithHttpInfo($payment_user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPaymentMethodsAsyncWithHttpInfo
     *
     * @param  string $payment_user_id Payment User Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentMethodsAsyncWithHttpInfo($payment_user_id, string $contentType = self::contentTypes['listPaymentMethods'][0])
    {
        $returnType = '\FinversePhp\Model\ListPaymentMethodsResponse';
        $request = $this->listPaymentMethodsRequest($payment_user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPaymentMethods'
     *
     * @param  string $payment_user_id Payment User Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPaymentMethodsRequest($payment_user_id, string $contentType = self::contentTypes['listPaymentMethods'][0])
    {

        // verify the required parameter 'payment_user_id' is set
        if ($payment_user_id === null || (is_array($payment_user_id) && count($payment_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_user_id when calling listPaymentMethods'
            );
        }


        $resourcePath = '/payment_users/{paymentUserId}/payment_methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentUserId' . '}',
                ObjectSerializer::toPathValue($payment_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPayments
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payment statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  string|null $payment_type Deprecated - The type of payment (optional)
     * @param  string[]|null $payment_types payment_types (optional)
     * @param  string|null $mandate_id The mandate the payment belongs to (optional)
     * @param  string|null $currency Deprecated - The currency the payment is made in (optional)
     * @param  string[]|null $currencies currencies (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayments'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ListPaymentsResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function listPayments($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $payment_type = null, $payment_types = null, $mandate_id = null, $currency = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayments'][0])
    {
        list($response) = $this->listPaymentsWithHttpInfo($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $payment_type, $payment_types, $mandate_id, $currency, $currencies, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation listPaymentsWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payment statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  string|null $payment_type Deprecated - The type of payment (optional)
     * @param  string[]|null $payment_types (optional)
     * @param  string|null $mandate_id The mandate the payment belongs to (optional)
     * @param  string|null $currency Deprecated - The currency the payment is made in (optional)
     * @param  string[]|null $currencies (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayments'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ListPaymentsResponse|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPaymentsWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $payment_type = null, $payment_types = null, $mandate_id = null, $currency = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayments'][0])
    {
        $request = $this->listPaymentsRequest($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $payment_type, $payment_types, $mandate_id, $currency, $currencies, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ListPaymentsResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ListPaymentsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ListPaymentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPaymentsAsync
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payment statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  string|null $payment_type Deprecated - The type of payment (optional)
     * @param  string[]|null $payment_types (optional)
     * @param  string|null $mandate_id The mandate the payment belongs to (optional)
     * @param  string|null $currency Deprecated - The currency the payment is made in (optional)
     * @param  string[]|null $currencies (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentsAsync($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $payment_type = null, $payment_types = null, $mandate_id = null, $currency = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayments'][0])
    {
        return $this->listPaymentsAsyncWithHttpInfo($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $payment_type, $payment_types, $mandate_id, $currency, $currencies, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPaymentsAsyncWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payment statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  string|null $payment_type Deprecated - The type of payment (optional)
     * @param  string[]|null $payment_types (optional)
     * @param  string|null $mandate_id The mandate the payment belongs to (optional)
     * @param  string|null $currency Deprecated - The currency the payment is made in (optional)
     * @param  string[]|null $currencies (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPaymentsAsyncWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $payment_type = null, $payment_types = null, $mandate_id = null, $currency = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayments'][0])
    {
        $returnType = '\FinversePhp\Model\ListPaymentsResponse';
        $request = $this->listPaymentsRequest($date_from, $date_to, $statuses, $sender_type, $user_id, $institution_id, $payment_type, $payment_types, $mandate_id, $currency, $currencies, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPayments'
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payment statuses to filter for, comma separated (optional)
     * @param  string|null $sender_type The sender type of the mandate (optional)
     * @param  string|null $user_id The user_id the mandate was setup for (optional)
     * @param  string|null $institution_id The institution the mandate was executed against (optional)
     * @param  string|null $payment_type Deprecated - The type of payment (optional)
     * @param  string[]|null $payment_types (optional)
     * @param  string|null $mandate_id The mandate the payment belongs to (optional)
     * @param  string|null $currency Deprecated - The currency the payment is made in (optional)
     * @param  string[]|null $currencies (optional)
     * @param  int|null $offset default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPaymentsRequest($date_from = null, $date_to = null, $statuses = null, $sender_type = null, $user_id = null, $institution_id = null, $payment_type = null, $payment_types = null, $mandate_id = null, $currency = null, $currencies = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayments'][0])
    {












        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.listPayments, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listPayments, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listPayments, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'date_from', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_to,
            'date_to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sender_type,
            'sender_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'user_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $institution_id,
            'institution_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_type,
            'payment_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_types,
            'payment_types', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mandate_id,
            'mandate_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPayouts
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payout statuses to filter for, comma separated (optional)
     * @param  string[]|null $currencies currencies (optional)
     * @param  string[]|null $payout_types payout_types (optional)
     * @param  string|null $mandate_id mandate_id (optional)
     * @param  string|null $sender_account_id sender_account_id (optional)
     * @param  string|null $recipient_account_id recipient_account_id (optional)
     * @param  string|null $recipient_user_id recipient_user_id (optional)
     * @param  string|null $recipient_external_user_id recipient_external_user_id (optional)
     * @param  int|null $offset Default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayouts'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\ListPayoutsResponse|\FinversePhp\Model\ErrBodyModelV2
     */
    public function listPayouts($date_from = null, $date_to = null, $statuses = null, $currencies = null, $payout_types = null, $mandate_id = null, $sender_account_id = null, $recipient_account_id = null, $recipient_user_id = null, $recipient_external_user_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayouts'][0])
    {
        list($response) = $this->listPayoutsWithHttpInfo($date_from, $date_to, $statuses, $currencies, $payout_types, $mandate_id, $sender_account_id, $recipient_account_id, $recipient_user_id, $recipient_external_user_id, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation listPayoutsWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payout statuses to filter for, comma separated (optional)
     * @param  string[]|null $currencies (optional)
     * @param  string[]|null $payout_types (optional)
     * @param  string|null $mandate_id (optional)
     * @param  string|null $sender_account_id (optional)
     * @param  string|null $recipient_account_id (optional)
     * @param  string|null $recipient_user_id (optional)
     * @param  string|null $recipient_external_user_id (optional)
     * @param  int|null $offset Default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayouts'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\ListPayoutsResponse|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPayoutsWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $currencies = null, $payout_types = null, $mandate_id = null, $sender_account_id = null, $recipient_account_id = null, $recipient_user_id = null, $recipient_external_user_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayouts'][0])
    {
        $request = $this->listPayoutsRequest($date_from, $date_to, $statuses, $currencies, $payout_types, $mandate_id, $sender_account_id, $recipient_account_id, $recipient_user_id, $recipient_external_user_id, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ListPayoutsResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\ListPayoutsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ListPayoutsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPayoutsAsync
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payout statuses to filter for, comma separated (optional)
     * @param  string[]|null $currencies (optional)
     * @param  string[]|null $payout_types (optional)
     * @param  string|null $mandate_id (optional)
     * @param  string|null $sender_account_id (optional)
     * @param  string|null $recipient_account_id (optional)
     * @param  string|null $recipient_user_id (optional)
     * @param  string|null $recipient_external_user_id (optional)
     * @param  int|null $offset Default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPayoutsAsync($date_from = null, $date_to = null, $statuses = null, $currencies = null, $payout_types = null, $mandate_id = null, $sender_account_id = null, $recipient_account_id = null, $recipient_user_id = null, $recipient_external_user_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayouts'][0])
    {
        return $this->listPayoutsAsyncWithHttpInfo($date_from, $date_to, $statuses, $currencies, $payout_types, $mandate_id, $sender_account_id, $recipient_account_id, $recipient_user_id, $recipient_external_user_id, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPayoutsAsyncWithHttpInfo
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payout statuses to filter for, comma separated (optional)
     * @param  string[]|null $currencies (optional)
     * @param  string[]|null $payout_types (optional)
     * @param  string|null $mandate_id (optional)
     * @param  string|null $sender_account_id (optional)
     * @param  string|null $recipient_account_id (optional)
     * @param  string|null $recipient_user_id (optional)
     * @param  string|null $recipient_external_user_id (optional)
     * @param  int|null $offset Default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPayoutsAsyncWithHttpInfo($date_from = null, $date_to = null, $statuses = null, $currencies = null, $payout_types = null, $mandate_id = null, $sender_account_id = null, $recipient_account_id = null, $recipient_user_id = null, $recipient_external_user_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayouts'][0])
    {
        $returnType = '\FinversePhp\Model\ListPayoutsResponse';
        $request = $this->listPayoutsRequest($date_from, $date_to, $statuses, $currencies, $payout_types, $mandate_id, $sender_account_id, $recipient_account_id, $recipient_user_id, $recipient_external_user_id, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPayouts'
     *
     * @param  \DateTime|null $date_from ISO format (YYYY-MM-DD) (optional)
     * @param  \DateTime|null $date_to ISO format (YYYY-MM-DD) (optional)
     * @param  string[]|null $statuses The payout statuses to filter for, comma separated (optional)
     * @param  string[]|null $currencies (optional)
     * @param  string[]|null $payout_types (optional)
     * @param  string|null $mandate_id (optional)
     * @param  string|null $sender_account_id (optional)
     * @param  string|null $recipient_account_id (optional)
     * @param  string|null $recipient_user_id (optional)
     * @param  string|null $recipient_external_user_id (optional)
     * @param  int|null $offset Default is 0 (optional, default to 0)
     * @param  int|null $limit default is 500, max is 1000 (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPayoutsRequest($date_from = null, $date_to = null, $statuses = null, $currencies = null, $payout_types = null, $mandate_id = null, $sender_account_id = null, $recipient_account_id = null, $recipient_user_id = null, $recipient_external_user_id = null, $offset = 0, $limit = 500, string $contentType = self::contentTypes['listPayouts'][0])
    {











        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DefaultApi.listPayouts, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listPayouts, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DefaultApi.listPayouts, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'date_from', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_to,
            'date_to', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payout_types,
            'payout_types', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mandate_id,
            'mandate_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sender_account_id,
            'sender_account_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recipient_account_id,
            'recipient_account_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recipient_user_id,
            'recipient_user_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recipient_external_user_id,
            'recipient_external_user_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshPaymentAttempt
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshPaymentAttempt'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\RefreshPaymentAttemptResponse|\FinversePhp\Model\ErrBodyModelV2
     */
    public function refreshPaymentAttempt(string $contentType = self::contentTypes['refreshPaymentAttempt'][0])
    {
        list($response) = $this->refreshPaymentAttemptWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation refreshPaymentAttemptWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshPaymentAttempt'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\RefreshPaymentAttemptResponse|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshPaymentAttemptWithHttpInfo(string $contentType = self::contentTypes['refreshPaymentAttempt'][0])
    {
        $request = $this->refreshPaymentAttemptRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\RefreshPaymentAttemptResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\RefreshPaymentAttemptResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\RefreshPaymentAttemptResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation refreshPaymentAttemptAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshPaymentAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshPaymentAttemptAsync(string $contentType = self::contentTypes['refreshPaymentAttempt'][0])
    {
        return $this->refreshPaymentAttemptAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshPaymentAttemptAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshPaymentAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshPaymentAttemptAsyncWithHttpInfo(string $contentType = self::contentTypes['refreshPaymentAttempt'][0])
    {
        $returnType = '\FinversePhp\Model\RefreshPaymentAttemptResponse';
        $request = $this->refreshPaymentAttemptRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshPaymentAttempt'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshPaymentAttempt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshPaymentAttemptRequest(string $contentType = self::contentTypes['refreshPaymentAttempt'][0])
    {


        $resourcePath = '/payment_link/fvlink/payment_attempt/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAutopayConsent
     *
     * @param  \FinversePhp\Model\SetAutopayConsentRequest $set_autopay_consent_request set_autopay_consent_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAutopayConsent'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setAutopayConsent($set_autopay_consent_request, string $contentType = self::contentTypes['setAutopayConsent'][0])
    {
        $this->setAutopayConsentWithHttpInfo($set_autopay_consent_request, $contentType);
    }

    /**
     * Operation setAutopayConsentWithHttpInfo
     *
     * @param  \FinversePhp\Model\SetAutopayConsentRequest $set_autopay_consent_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAutopayConsent'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAutopayConsentWithHttpInfo($set_autopay_consent_request, string $contentType = self::contentTypes['setAutopayConsent'][0])
    {
        $request = $this->setAutopayConsentRequest($set_autopay_consent_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setAutopayConsentAsync
     *
     * @param  \FinversePhp\Model\SetAutopayConsentRequest $set_autopay_consent_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAutopayConsent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAutopayConsentAsync($set_autopay_consent_request, string $contentType = self::contentTypes['setAutopayConsent'][0])
    {
        return $this->setAutopayConsentAsyncWithHttpInfo($set_autopay_consent_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAutopayConsentAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\SetAutopayConsentRequest $set_autopay_consent_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAutopayConsent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAutopayConsentAsyncWithHttpInfo($set_autopay_consent_request, string $contentType = self::contentTypes['setAutopayConsent'][0])
    {
        $returnType = '';
        $request = $this->setAutopayConsentRequest($set_autopay_consent_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setAutopayConsent'
     *
     * @param  \FinversePhp\Model\SetAutopayConsentRequest $set_autopay_consent_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAutopayConsent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAutopayConsentRequest($set_autopay_consent_request, string $contentType = self::contentTypes['setAutopayConsent'][0])
    {

        // verify the required parameter 'set_autopay_consent_request' is set
        if ($set_autopay_consent_request === null || (is_array($set_autopay_consent_request) && count($set_autopay_consent_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_autopay_consent_request when calling setAutopayConsent'
            );
        }


        $resourcePath = '/payment_link/fvlink/payment_user/autopay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_autopay_consent_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_autopay_consent_request));
            } else {
                $httpBody = $set_autopay_consent_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaymentUser
     *
     * @param  string $payment_user_id payment_user_id (required)
     * @param  \FinversePhp\Model\UpdatePaymentUserRequest $update_payment_user_request request body for updating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\PaymentUser|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2
     */
    public function updatePaymentUser($payment_user_id, $update_payment_user_request, string $contentType = self::contentTypes['updatePaymentUser'][0])
    {
        list($response) = $this->updatePaymentUserWithHttpInfo($payment_user_id, $update_payment_user_request, $contentType);
        return $response;
    }

    /**
     * Operation updatePaymentUserWithHttpInfo
     *
     * @param  string $payment_user_id (required)
     * @param  \FinversePhp\Model\UpdatePaymentUserRequest $update_payment_user_request request body for updating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentUser'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\PaymentUser|\FinversePhp\Model\ErrBodyModelV2|\FinversePhp\Model\ErrBodyModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentUserWithHttpInfo($payment_user_id, $update_payment_user_request, string $contentType = self::contentTypes['updatePaymentUser'][0])
    {
        $request = $this->updatePaymentUserRequest($payment_user_id, $update_payment_user_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\PaymentUser',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\PaymentUser',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\PaymentUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePaymentUserAsync
     *
     * @param  string $payment_user_id (required)
     * @param  \FinversePhp\Model\UpdatePaymentUserRequest $update_payment_user_request request body for updating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentUserAsync($payment_user_id, $update_payment_user_request, string $contentType = self::contentTypes['updatePaymentUser'][0])
    {
        return $this->updatePaymentUserAsyncWithHttpInfo($payment_user_id, $update_payment_user_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentUserAsyncWithHttpInfo
     *
     * @param  string $payment_user_id (required)
     * @param  \FinversePhp\Model\UpdatePaymentUserRequest $update_payment_user_request request body for updating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentUserAsyncWithHttpInfo($payment_user_id, $update_payment_user_request, string $contentType = self::contentTypes['updatePaymentUser'][0])
    {
        $returnType = '\FinversePhp\Model\PaymentUser';
        $request = $this->updatePaymentUserRequest($payment_user_id, $update_payment_user_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaymentUser'
     *
     * @param  string $payment_user_id (required)
     * @param  \FinversePhp\Model\UpdatePaymentUserRequest $update_payment_user_request request body for updating payment user (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePaymentUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePaymentUserRequest($payment_user_id, $update_payment_user_request, string $contentType = self::contentTypes['updatePaymentUser'][0])
    {

        // verify the required parameter 'payment_user_id' is set
        if ($payment_user_id === null || (is_array($payment_user_id) && count($payment_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_user_id when calling updatePaymentUser'
            );
        }

        // verify the required parameter 'update_payment_user_request' is set
        if ($update_payment_user_request === null || (is_array($update_payment_user_request) && count($update_payment_user_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_payment_user_request when calling updatePaymentUser'
            );
        }


        $resourcePath = '/payment_users/{paymentUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentUserId' . '}',
                ObjectSerializer::toPathValue($payment_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_payment_user_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_payment_user_request));
            } else {
                $httpBody = $update_payment_user_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
