<?php
/**
 * LinkApi
 * PHP version 8.1
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Finverse Public
 *
 * Documentation of the early finverse services
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: info@finverse.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FinversePhp\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use FinversePhp\ApiException;
use FinversePhp\Configuration;
use FinversePhp\FormDataProcessor;
use FinversePhp\HeaderSelector;
use FinversePhp\ObjectSerializer;

/**
 * LinkApi Class Doc Comment
 *
 * @category Class
 * @package  FinversePhp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LinkApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createLink' => [
            'application/json',
        ],
        'createLinkWoauth' => [
            'application/json',
        ],
        'linkAction' => [
            'application/json',
        ],
        'linkStatus' => [
            'application/json',
        ],
        'linkStatusNonSensitive' => [
            'application/json',
        ],
        'relink' => [
            'application/json',
        ],
        'relinkV2' => [
            'application/json',
        ],
        'token' => [
            'application/x-www-form-urlencoded',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createLink
     *
     * @param  \FinversePhp\Model\ApiLinkRequest $api_link_request Request body for creating a new link and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel
     */
    public function createLink($api_link_request, string $contentType = self::contentTypes['createLink'][0])
    {
        list($response) = $this->createLinkWithHttpInfo($api_link_request, $contentType);
        return $response;
    }

    /**
     * Operation createLinkWithHttpInfo
     *
     * @param  \FinversePhp\Model\ApiLinkRequest $api_link_request Request body for creating a new link and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLinkWithHttpInfo($api_link_request, string $contentType = self::contentTypes['createLink'][0])
    {
        $request = $this->createLinkRequest($api_link_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createLinkAsync
     *
     * @param  \FinversePhp\Model\ApiLinkRequest $api_link_request Request body for creating a new link and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkAsync($api_link_request, string $contentType = self::contentTypes['createLink'][0])
    {
        return $this->createLinkAsyncWithHttpInfo($api_link_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLinkAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\ApiLinkRequest $api_link_request Request body for creating a new link and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkAsyncWithHttpInfo($api_link_request, string $contentType = self::contentTypes['createLink'][0])
    {
        $returnType = '\FinversePhp\Model\GetLoginIdentityByIdResponse';
        $request = $this->createLinkRequest($api_link_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLink'
     *
     * @param  \FinversePhp\Model\ApiLinkRequest $api_link_request Request body for creating a new link and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLinkRequest($api_link_request, string $contentType = self::contentTypes['createLink'][0])
    {

        // verify the required parameter 'api_link_request' is set
        if ($api_link_request === null || (is_array($api_link_request) && count($api_link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_link_request when calling createLink'
            );
        }


        $resourcePath = '/link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_link_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_link_request));
            } else {
                $httpBody = $api_link_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLinkWoauth
     *
     * @param  \FinversePhp\Model\LinkRequest $link_request Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkWoauth'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\LinkResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse
     */
    public function createLinkWoauth($link_request, string $contentType = self::contentTypes['createLinkWoauth'][0])
    {
        list($response) = $this->createLinkWoauthWithHttpInfo($link_request, $contentType);
        return $response;
    }

    /**
     * Operation createLinkWoauthWithHttpInfo
     *
     * @param  \FinversePhp\Model\LinkRequest $link_request Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkWoauth'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\LinkResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLinkWoauthWithHttpInfo($link_request, string $contentType = self::contentTypes['createLinkWoauth'][0])
    {
        $request = $this->createLinkWoauthRequest($link_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\LinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\LinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\LinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createLinkWoauthAsync
     *
     * @param  \FinversePhp\Model\LinkRequest $link_request Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkWoauth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkWoauthAsync($link_request, string $contentType = self::contentTypes['createLinkWoauth'][0])
    {
        return $this->createLinkWoauthAsyncWithHttpInfo($link_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLinkWoauthAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\LinkRequest $link_request Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkWoauth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkWoauthAsyncWithHttpInfo($link_request, string $contentType = self::contentTypes['createLinkWoauth'][0])
    {
        $returnType = '\FinversePhp\Model\LinkResponse';
        $request = $this->createLinkWoauthRequest($link_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLinkWoauth'
     *
     * @param  \FinversePhp\Model\LinkRequest $link_request Request body for starting a new Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkWoauth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLinkWoauthRequest($link_request, string $contentType = self::contentTypes['createLinkWoauth'][0])
    {

        // verify the required parameter 'link_request' is set
        if ($link_request === null || (is_array($link_request) && count($link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $link_request when calling createLinkWoauth'
            );
        }


        $resourcePath = '/link/woauth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($link_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($link_request));
            } else {
                $httpBody = $link_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkAction
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ActionRequest $action_request Request body for post link action (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkAction'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel
     */
    public function linkAction($login_identity_id, $action_request, string $contentType = self::contentTypes['linkAction'][0])
    {
        list($response) = $this->linkActionWithHttpInfo($login_identity_id, $action_request, $contentType);
        return $response;
    }

    /**
     * Operation linkActionWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ActionRequest $action_request Request body for post link action (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkAction'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function linkActionWithHttpInfo($login_identity_id, $action_request, string $contentType = self::contentTypes['linkAction'][0])
    {
        $request = $this->linkActionRequest($login_identity_id, $action_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation linkActionAsync
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ActionRequest $action_request Request body for post link action (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkAction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkActionAsync($login_identity_id, $action_request, string $contentType = self::contentTypes['linkAction'][0])
    {
        return $this->linkActionAsyncWithHttpInfo($login_identity_id, $action_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation linkActionAsyncWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ActionRequest $action_request Request body for post link action (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkAction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkActionAsyncWithHttpInfo($login_identity_id, $action_request, string $contentType = self::contentTypes['linkAction'][0])
    {
        $returnType = '\FinversePhp\Model\GetLoginIdentityByIdResponse';
        $request = $this->linkActionRequest($login_identity_id, $action_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkAction'
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ActionRequest $action_request Request body for post link action (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkAction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkActionRequest($login_identity_id, $action_request, string $contentType = self::contentTypes['linkAction'][0])
    {

        // verify the required parameter 'login_identity_id' is set
        if ($login_identity_id === null || (is_array($login_identity_id) && count($login_identity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_identity_id when calling linkAction'
            );
        }

        // verify the required parameter 'action_request' is set
        if ($action_request === null || (is_array($action_request) && count($action_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action_request when calling linkAction'
            );
        }


        $resourcePath = '/link/action/{loginIdentityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($login_identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loginIdentityId' . '}',
                ObjectSerializer::toPathValue($login_identity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($action_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($action_request));
            } else {
                $httpBody = $action_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkStatus
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatus'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\LinkStatusResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel
     */
    public function linkStatus($login_identity_id, string $contentType = self::contentTypes['linkStatus'][0])
    {
        list($response) = $this->linkStatusWithHttpInfo($login_identity_id, $contentType);
        return $response;
    }

    /**
     * Operation linkStatusWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatus'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\LinkStatusResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function linkStatusWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['linkStatus'][0])
    {
        $request = $this->linkStatusRequest($login_identity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\LinkStatusResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\LinkStatusResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\LinkStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation linkStatusAsync
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkStatusAsync($login_identity_id, string $contentType = self::contentTypes['linkStatus'][0])
    {
        return $this->linkStatusAsyncWithHttpInfo($login_identity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation linkStatusAsyncWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkStatusAsyncWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['linkStatus'][0])
    {
        $returnType = '\FinversePhp\Model\LinkStatusResponse';
        $request = $this->linkStatusRequest($login_identity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkStatus'
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkStatusRequest($login_identity_id, string $contentType = self::contentTypes['linkStatus'][0])
    {

        // verify the required parameter 'login_identity_id' is set
        if ($login_identity_id === null || (is_array($login_identity_id) && count($login_identity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_identity_id when calling linkStatus'
            );
        }


        $resourcePath = '/link/status/{loginIdentityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($login_identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loginIdentityId' . '}',
                ObjectSerializer::toPathValue($login_identity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkStatusNonSensitive
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatusNonSensitive'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\NonSensitiveLinkStatusResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel
     */
    public function linkStatusNonSensitive($login_identity_id, string $contentType = self::contentTypes['linkStatusNonSensitive'][0])
    {
        list($response) = $this->linkStatusNonSensitiveWithHttpInfo($login_identity_id, $contentType);
        return $response;
    }

    /**
     * Operation linkStatusNonSensitiveWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatusNonSensitive'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\NonSensitiveLinkStatusResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function linkStatusNonSensitiveWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['linkStatusNonSensitive'][0])
    {
        $request = $this->linkStatusNonSensitiveRequest($login_identity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\NonSensitiveLinkStatusResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\NonSensitiveLinkStatusResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\NonSensitiveLinkStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation linkStatusNonSensitiveAsync
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatusNonSensitive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkStatusNonSensitiveAsync($login_identity_id, string $contentType = self::contentTypes['linkStatusNonSensitive'][0])
    {
        return $this->linkStatusNonSensitiveAsyncWithHttpInfo($login_identity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation linkStatusNonSensitiveAsyncWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatusNonSensitive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkStatusNonSensitiveAsyncWithHttpInfo($login_identity_id, string $contentType = self::contentTypes['linkStatusNonSensitive'][0])
    {
        $returnType = '\FinversePhp\Model\NonSensitiveLinkStatusResponse';
        $request = $this->linkStatusNonSensitiveRequest($login_identity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkStatusNonSensitive'
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkStatusNonSensitive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkStatusNonSensitiveRequest($login_identity_id, string $contentType = self::contentTypes['linkStatusNonSensitive'][0])
    {

        // verify the required parameter 'login_identity_id' is set
        if ($login_identity_id === null || (is_array($login_identity_id) && count($login_identity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_identity_id when calling linkStatusNonSensitive'
            );
        }


        $resourcePath = '/link/fvlink/status/{loginIdentityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($login_identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loginIdentityId' . '}',
                ObjectSerializer::toPathValue($login_identity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation relink
     *
     * @param  \FinversePhp\Model\RelinkRequest $relink_request Request body for updating Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\LinkResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse
     */
    public function relink($relink_request, string $contentType = self::contentTypes['relink'][0])
    {
        list($response) = $this->relinkWithHttpInfo($relink_request, $contentType);
        return $response;
    }

    /**
     * Operation relinkWithHttpInfo
     *
     * @param  \FinversePhp\Model\RelinkRequest $relink_request Request body for updating Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relink'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\LinkResponse|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\BadRequestModel|\FinversePhp\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function relinkWithHttpInfo($relink_request, string $contentType = self::contentTypes['relink'][0])
    {
        $request = $this->relinkRequest($relink_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\LinkResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\LinkResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\LinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation relinkAsync
     *
     * @param  \FinversePhp\Model\RelinkRequest $relink_request Request body for updating Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relinkAsync($relink_request, string $contentType = self::contentTypes['relink'][0])
    {
        return $this->relinkAsyncWithHttpInfo($relink_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation relinkAsyncWithHttpInfo
     *
     * @param  \FinversePhp\Model\RelinkRequest $relink_request Request body for updating Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relinkAsyncWithHttpInfo($relink_request, string $contentType = self::contentTypes['relink'][0])
    {
        $returnType = '\FinversePhp\Model\LinkResponse';
        $request = $this->relinkRequest($relink_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'relink'
     *
     * @param  \FinversePhp\Model\RelinkRequest $relink_request Request body for updating Link (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function relinkRequest($relink_request, string $contentType = self::contentTypes['relink'][0])
    {

        // verify the required parameter 'relink_request' is set
        if ($relink_request === null || (is_array($relink_request) && count($relink_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relink_request when calling relink'
            );
        }


        $resourcePath = '/link/relink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($relink_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($relink_request));
            } else {
                $httpBody = $relink_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation relinkV2
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ApiRelinkRequest $api_relink_request Request body for relinking and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relinkV2'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel
     */
    public function relinkV2($login_identity_id, $api_relink_request, string $contentType = self::contentTypes['relinkV2'][0])
    {
        list($response) = $this->relinkV2WithHttpInfo($login_identity_id, $api_relink_request, $contentType);
        return $response;
    }

    /**
     * Operation relinkV2WithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ApiRelinkRequest $api_relink_request Request body for relinking and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relinkV2'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\GetLoginIdentityByIdResponse|\FinversePhp\Model\ErrBodyModel|\FinversePhp\Model\ErrBodyModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function relinkV2WithHttpInfo($login_identity_id, $api_relink_request, string $contentType = self::contentTypes['relinkV2'][0])
    {
        $request = $this->relinkV2Request($login_identity_id, $api_relink_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\ErrBodyModel',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\GetLoginIdentityByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\ErrBodyModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation relinkV2Async
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ApiRelinkRequest $api_relink_request Request body for relinking and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relinkV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relinkV2Async($login_identity_id, $api_relink_request, string $contentType = self::contentTypes['relinkV2'][0])
    {
        return $this->relinkV2AsyncWithHttpInfo($login_identity_id, $api_relink_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation relinkV2AsyncWithHttpInfo
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ApiRelinkRequest $api_relink_request Request body for relinking and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relinkV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function relinkV2AsyncWithHttpInfo($login_identity_id, $api_relink_request, string $contentType = self::contentTypes['relinkV2'][0])
    {
        $returnType = '\FinversePhp\Model\GetLoginIdentityByIdResponse';
        $request = $this->relinkV2Request($login_identity_id, $api_relink_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'relinkV2'
     *
     * @param  string $login_identity_id The login identity id (required)
     * @param  \FinversePhp\Model\ApiRelinkRequest $api_relink_request Request body for relinking and submitting credentials (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['relinkV2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function relinkV2Request($login_identity_id, $api_relink_request, string $contentType = self::contentTypes['relinkV2'][0])
    {

        // verify the required parameter 'login_identity_id' is set
        if ($login_identity_id === null || (is_array($login_identity_id) && count($login_identity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login_identity_id when calling relinkV2'
            );
        }

        // verify the required parameter 'api_relink_request' is set
        if ($api_relink_request === null || (is_array($api_relink_request) && count($api_relink_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_relink_request when calling relinkV2'
            );
        }


        $resourcePath = '/link/relink/{loginIdentityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($login_identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loginIdentityId' . '}',
                ObjectSerializer::toPathValue($login_identity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($api_relink_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($api_relink_request));
            } else {
                $httpBody = $api_relink_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation token
     *
     * @param  string $grant_type grant_type (required)
     * @param  string $code code (required)
     * @param  string $client_id client_id (required)
     * @param  string $redirect_uri redirect_uri (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['token'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \FinversePhp\Model\AccessTokenResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2
     */
    public function token($grant_type, $code, $client_id, $redirect_uri, string $contentType = self::contentTypes['token'][0])
    {
        list($response) = $this->tokenWithHttpInfo($grant_type, $code, $client_id, $redirect_uri, $contentType);
        return $response;
    }

    /**
     * Operation tokenWithHttpInfo
     *
     * @param  string $grant_type (required)
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $redirect_uri (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['token'] to see the possible values for this operation
     *
     * @throws \FinversePhp\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \FinversePhp\Model\AccessTokenResponse|\FinversePhp\Model\BadRequestModelV2|\FinversePhp\Model\BadRequestModelV2, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenWithHttpInfo($grant_type, $code, $client_id, $redirect_uri, string $contentType = self::contentTypes['token'][0])
    {
        $request = $this->tokenRequest($grant_type, $code, $client_id, $redirect_uri, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\AccessTokenResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\FinversePhp\Model\BadRequestModelV2',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\FinversePhp\Model\AccessTokenResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\AccessTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FinversePhp\Model\BadRequestModelV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation tokenAsync
     *
     * @param  string $grant_type (required)
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $redirect_uri (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['token'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenAsync($grant_type, $code, $client_id, $redirect_uri, string $contentType = self::contentTypes['token'][0])
    {
        return $this->tokenAsyncWithHttpInfo($grant_type, $code, $client_id, $redirect_uri, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenAsyncWithHttpInfo
     *
     * @param  string $grant_type (required)
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $redirect_uri (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['token'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenAsyncWithHttpInfo($grant_type, $code, $client_id, $redirect_uri, string $contentType = self::contentTypes['token'][0])
    {
        $returnType = '\FinversePhp\Model\AccessTokenResponse';
        $request = $this->tokenRequest($grant_type, $code, $client_id, $redirect_uri, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'token'
     *
     * @param  string $grant_type (required)
     * @param  string $code (required)
     * @param  string $client_id (required)
     * @param  string $redirect_uri (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['token'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenRequest($grant_type, $code, $client_id, $redirect_uri, string $contentType = self::contentTypes['token'][0])
    {

        // verify the required parameter 'grant_type' is set
        if ($grant_type === null || (is_array($grant_type) && count($grant_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling token'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling token'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling token'
            );
        }

        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null || (is_array($redirect_uri) && count($redirect_uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_uri when calling token'
            );
        }


        $resourcePath = '/auth/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'grant_type' => $grant_type,
            'code' => $code,
            'client_id' => $client_id,
            'redirect_uri' => $redirect_uri,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
